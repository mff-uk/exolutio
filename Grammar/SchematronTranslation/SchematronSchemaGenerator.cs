using System;
using System.Xml.Linq;
using Exolutio.Model.OCL;
using Exolutio.Model.OCL.AST;
using Exolutio.SupportingClasses;

namespace Exolutio.Model.PSM.Grammar.SchematronTranslation
{
    public class SchematronSchemaGenerator
    {
        private PSMSchema psmSchema;

        public PSMSchema PSMSchema
        {
            get { return psmSchema; }
        }

        public Log Log { get; private set; }

        public void Initialize(PSMSchema psmSchema)
        {
            this.psmSchema = psmSchema;
            Log = new Log();
        }

        public XDocument GetSchematronSchema()
        {
            XDocument doc = new XDocument(new XDeclaration("1.0", "utf-8", null));
            XElement schSchema = doc.SchematronSchema();
            XComment comment = new XComment(string.Format(" generated by eXolutio on {0} {1} from {2}/{3}. ", DateTime.Now.ToShortDateString(), DateTime.Now.ToShortTimeString(), PSMSchema.Project.Name, PSMSchema.Caption));
            schSchema.Add(comment);

            foreach (OCLScript oclScript in PSMSchema.OCLScripts)
            {
                TranslateScript(schSchema, oclScript);
            }

            return doc;
        }

        private void TranslateScript(XElement schSchema, OCLScript oclScript)
        {
            XElement patternElement = schSchema.SchematronPattern(oclScript.Name);

            CompilerResult compilerResult = oclScript.CompileToAst();
            if (!compilerResult.Errors.HasError)
            {
                foreach (ClassifierConstraint constraint in compilerResult.Constraints.Classifiers)
                {
                    
                }
            }
            else
            {
                XComment comment = new XComment(string.Format("OCL script contains errors and thus can not be translated"));
                patternElement.Add(comment);
            }
        }
    }
}