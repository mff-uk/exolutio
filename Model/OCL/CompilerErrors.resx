<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OCLAst_ClassifierContextHead_ClassifierNotFound_1" xml:space="preserve">
    <value>Classifier `{0}` (used in context header) not found.</value>
  </data>
  <data name="OCLAst_InfixOperation_NotDefined_2" xml:space="preserve">
    <value>Infix operation `{1}` is not defined on type `{0}`.</value>
  </data>
  <data name="OCLAst_ProcessPropertyCall_PropertyNotExists_1" xml:space="preserve">
    <value>Unknown property `{0}`.</value>
  </data>
  <data name="OCLAst_ProcessOperationCall_OperationNotExists_1" xml:space="preserve">
    <value>Unknowon operation `{0}`.</value>
  </data>
  <data name="OCLAst_ProcessIteratorCall_Unknow_iterator_operation" xml:space="preserve">
    <value>Unknow iterator operation.</value>
  </data>
  <data name="OCLAst_ProcessIteratorCall_Iterator_ma_jenom_jedno_tělo_výrazu" xml:space="preserve">
    <value>Iterator must have only on body expression. </value>
  </data>
  <data name="OCLAst_ProcessIteratorCall_Body_type_inconsistency" xml:space="preserve">
    <value>Inconsistent types in iterator body.</value>
  </data>
  <data name="OCLAst_ProcessIteratorCall_Bad_iterator_operation_1" xml:space="preserve">
    <value>Unknown iterator operation `{0}`. </value>
  </data>
  <data name="OCLAst_ProcessCollectionOperationCall_Unknown_collection_operation" xml:space="preserve">
    <value>Unknown collection operation `{0}`.</value>
  </data>
  <data name="OCLAst_ResolvePath_Modifikator__pre_se_nepoji_s_promenou" xml:space="preserve">
    <value>Modifier `@pre` is not attached to a variable. </value>
  </data>
  <data name="OCLAst_ResolvePath_Chyba_nebo_nepodporovane_pravidlo" xml:space="preserve">
    <value>Syntax error or unsupported syntax rule. </value>
  </data>
  <data name="OCLAst_ResolveImplicitOperation_1" xml:space="preserve">
    <value>Unknown operation `{0}`.</value>
  </data>
  <data name="OCLAst_ResolveImplicitOperation_Operation_not_found_1" xml:space="preserve">
    <value>Unknown operation `{0}`.</value>
  </data>
  <data name="OCLAst_CreateIntegerLiteral_Bad_format_of_integer" xml:space="preserve">
    <value>Wrong integer fromat. </value>
  </data>
  <data name="OCLAst_CreateRealLiteral_Bad_format_of_real" xml:space="preserve">
    <value>Wrong real format</value>
  </data>
  <data name="OCLAst_CollectionLiteralExp_CollectionIsAbstract" xml:space="preserve">
    <value>'Collection' is an abstract class, can not create instances. </value>
  </data>
  <data name="OCLAst_CollectionLiteralExp_Incorrects_mishmash_type_in_collection_literal" xml:space="preserve">
    <value>Inconsistent types in collection literal. </value>
  </data>
  <data name="OCLAst_CreateTupleLiteral_Name_repeated_1" xml:space="preserve">
    <value>Name `{0}` is used repeatedly.</value>
  </data>
  <data name="OCLAst_CreateTupleLiteral_Type_does_not_comform_to_declared_type" xml:space="preserve">
    <value>Type does not comform to the declared type.</value>
  </data>
  <data name="OCLAst_ResolveTypePathName_Path__0__do_not_exists_1" xml:space="preserve">
    <value>Path `{0}` does not exist.</value>
  </data>
  <data name="OCLAst_ResolveTypePathName_Path__0__do_not_referres_type_1" xml:space="preserve">
    <value>Path `{0}` does not refer a type.</value>
  </data>
  <data name="OCLAst_ProcessAccDef_Init_value_do_not_conform_to_variable_type" xml:space="preserve">
    <value>Value does not conform to variable type.</value>
  </data>
  <data name="OCLAst_LetDecl_The_variable_name_must_be_unique_in_the_current_scope" xml:space="preserve">
    <value>The variable name must be unique in the current scope.</value>
  </data>
  <data name="OCLAst_LetDecl_Variable_type_does_not_conform_to_variable_expression_type" xml:space="preserve">
    <value>Declared variable type does not conform to expression type.</value>
  </data>
  <data name="OCLAst_CreateIf_Condition_of_IF_must_conform_to_bool" xml:space="preserve">
    <value>Condition in an if expression must be of type bool.</value>
  </data>
  <data name="OCLAst_TestNull_Compiler_panic_in_method_1" xml:space="preserve">
    <value>Compiler panic in method `{0}`.</value>
  </data>
  <data name="OCLAst_ProcessIteratorCall_Compiler_don_t_support_iterator_operations_on_not_collection_type" xml:space="preserve">
    <value>Compiler doesn't support iterator operations on non-collection type.</value>
  </data>
  <data name="VariableAlreadyExisted" xml:space="preserve">
    <value>Variable `{0}` has been defined earlier. </value>
  </data>
  <data name="AmbiguousNavigation" xml:space="preserve">
    <value>Navigation `{0}.{1}` is ambiguous.</value>
  </data>
  <data name="OCLParser_UnaryOperation_UnaryOperationNotFound" xml:space="preserve">
    <value>Unary operation `{1}` is not defined on type `{0}`.</value>
  </data>
  <data name="OCLParser_InfixOperation_OperationNotFound_2" xml:space="preserve">
    <value>Unknown operation `{1}` on type `{0}`.</value>
  </data>
  <data name="OCLParser_UnaryOperation_OperationNotFound_2" xml:space="preserve">
    <value>Operation `{1}` is not defined on type `{0}`.</value>
  </data>
  <data name="OCLParser_PropertyCallRoot_PreModifierNotOnVariable" xml:space="preserve">
    <value>Modifier `@pre` is not attached to a variable.</value>
  </data>
  <data name="OCLParser_OperationNotFound_1" xml:space="preserve">
    <value>Unknown operation `{0}`.</value>
  </data>
  <data name="OCLParser_PropertyCallBody_SourceOfCollectionOperationIsNotACollection" xml:space="preserve">
    <value>Illegal use of '-&gt;', source is not a collection.</value>
  </data>
  <data name="OCLParser_PropertyCallBody_IncorectCallConvention" xml:space="preserve">
    <value>Incorect call convention for iterator.</value>
  </data>
  <data name="OCLParser_ProcessArrowIterator_Illegal_declaration" xml:space="preserve">
    <value>Variable declaration is not allowed here (this is a collection operation, not an iterator expression). </value>
  </data>
  <data name="OCLParser_ProcessArrowIterator_Type_mismatch" xml:space="preserve">
    <value>Type mismatch.</value>
  </data>
  <data name="OCLParser_CollectionLiteralExpAndType_Attemt_to_instantiate_abstract_type" xml:space="preserve">
    <value>‘Collection’ is an abstract class and can not be instantiated. </value>
  </data>
  <data name="OCLParser_CollectionLiteralExpAndType_Inconsistent_types_in_collection_literal" xml:space="preserve">
    <value>Inconsistent types in collection literal. </value>
  </data>
  <data name="OCLParser_CreateIntegerLiteral_Bad_integer_format" xml:space="preserve">
    <value>Wront integer format. </value>
  </data>
  <data name="OCLParser_CreateIntegerLiteral_Integer_literal_overflow_1" xml:space="preserve">
    <value>Integer literal `{0}` results in overflow.</value>
  </data>
  <data name="OCLParser_CreateRealLiteral_Incorrect_real_format" xml:space="preserve">
    <value>Wrong real format.</value>
  </data>
  <data name="OCLParser_CreateTupleLiteral_Tuple_part_name_used_repeatedly_1" xml:space="preserve">
    <value>Name `{0}` is used repeatedly.</value>
  </data>
  <data name="OCLParser_CreateVariableDeclaration_Missing_loop_variable_initialization" xml:space="preserve">
    <value>Loop variables must be initialized. </value>
  </data>
  <data name="OCLParser_CreateVariableDeclaration_Types_do_not_conform_2" xml:space="preserve">
    <value>Type `{0}` does not conforms to `{1}`.</value>
  </data>
  <data name="OCLParser_ResolveTypePathName_Path_not_exists_1" xml:space="preserve">
    <value>Path `{0}` does not exists.</value>
  </data>
  <data name="OCLParser_ResolveTypePathName_Path_does_not_refer_a_type_1" xml:space="preserve">
    <value>Path `{0}` does not refer a type.</value>
  </data>
  <data name="OCLParser_CreateVariableDeclaration_CreateVariableDeclaration_missing_case_for_VariableDeclarationRequirement" xml:space="preserve">
    <value>CreateVariableDeclaration( ... ): missing case for VariableDeclarationRequirement.</value>
  </data>
  <data name="OCLParser_CreateVariableDeclaration_Of_type_variable_condition" xml:space="preserve">
    <value>Type must be defined and value must be omited for variable declarations of tuple type.</value>
  </data>
  <data name="OCLParser_CreateVariableDeclaration_tuple_literal_variable_condition" xml:space="preserve">
    <value>Type and value must be present in variable declarations for tuple literars.</value>
  </data>
  <data name="OCLAst_CreateIntegerLiteral_Number__0__is_overflow_" xml:space="preserve">
    <value>Literal `{0}` results in overflow.</value>
  </data>
</root>