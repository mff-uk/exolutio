//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3 2012-07-01 11:33:31

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using Exolutio.Model.OCL.AST;
using Exolutio.Model.OCL.Types;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLAst : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACC", "ARGS", "BODY", "CALL", "CALLARGS", "CLASSIFIERCONDITION", "CLASSIFIERHEAD", "CLASSLITERAL", "COLLECTIONLITERAL", "COLLECTIONTYPE", "COLLPART", "COLLPARTRANGE", "COLLTYPE", "CONDITION", "Char", "DECL", "DEF", "DERIVATE", "DoubleDot", "EVOLUTIONHEAD", "EscapeSequence", "ExponentPart", "Hex", "IF", "INDEX", "INFIX", "INIT", "INV", "ITERATE", "IntegerLiteralExp", "InvalidLiteralExp", "LET", "LINE_COMMENT", "MESSAGE", "NESTED_ML_COMMENT", "NameChar", "NameStartChar", "NullLiteralExp", "Num", "OPERATION", "OPERATIONCONDITION", "OPERATIONHEAD", "PATH", "POST", "PRE", "PRIMITIVELITERAL", "PROPERTYCONDITION", "PROPERTYHEAD", "RealLiteralExp", "SimpleName", "StringChar", "StringLiteralExp", "TUPLELITERAL", "TYPE", "UNARY", "UnlimitedNaturalLiteralExp", "VARDECL", "WS", "WhiteSpaceChar", "'('", "')'", "'+'", "','", "'-'", "'->'", "'.'", "'/'", "':'", "'::'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'?'", "'@'", "'Bag'", "'Boolean'", "'Collection'", "'Integer'", "'OclAny'", "'OclInvalid'", "'OclMessage'", "'OclVoid'", "'OrderedSet'", "'Real'", "'Sequence'", "'Set'", "'String'", "'Tuple'", "'UnlimitedNatural'", "'['", "']'", "'^'", "'^^'", "'and'", "'body'", "'context'", "'def'", "'derive'", "'else'", "'endif'", "'false'", "'if'", "'implies'", "'in'", "'init'", "'inv'", "'iterate'", "'let'", "'message'", "'new'", "'not'", "'or'", "'post'", "'pre'", "'source version'", "'static'", "'then'", "'true'", "'xor'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int ACC=4;
	public const int ARGS=5;
	public const int BODY=6;
	public const int CALL=7;
	public const int CALLARGS=8;
	public const int CLASSIFIERCONDITION=9;
	public const int CLASSIFIERHEAD=10;
	public const int CLASSLITERAL=11;
	public const int COLLECTIONLITERAL=12;
	public const int COLLECTIONTYPE=13;
	public const int COLLPART=14;
	public const int COLLPARTRANGE=15;
	public const int COLLTYPE=16;
	public const int CONDITION=17;
	public const int Char=18;
	public const int DECL=19;
	public const int DEF=20;
	public const int DERIVATE=21;
	public const int DoubleDot=22;
	public const int EVOLUTIONHEAD=23;
	public const int EscapeSequence=24;
	public const int ExponentPart=25;
	public const int Hex=26;
	public const int IF=27;
	public const int INDEX=28;
	public const int INFIX=29;
	public const int INIT=30;
	public const int INV=31;
	public const int ITERATE=32;
	public const int IntegerLiteralExp=33;
	public const int InvalidLiteralExp=34;
	public const int LET=35;
	public const int LINE_COMMENT=36;
	public const int MESSAGE=37;
	public const int NESTED_ML_COMMENT=38;
	public const int NameChar=39;
	public const int NameStartChar=40;
	public const int NullLiteralExp=41;
	public const int Num=42;
	public const int OPERATION=43;
	public const int OPERATIONCONDITION=44;
	public const int OPERATIONHEAD=45;
	public const int PATH=46;
	public const int POST=47;
	public const int PRE=48;
	public const int PRIMITIVELITERAL=49;
	public const int PROPERTYCONDITION=50;
	public const int PROPERTYHEAD=51;
	public const int RealLiteralExp=52;
	public const int SimpleName=53;
	public const int StringChar=54;
	public const int StringLiteralExp=55;
	public const int TUPLELITERAL=56;
	public const int TYPE=57;
	public const int UNARY=58;
	public const int UnlimitedNaturalLiteralExp=59;
	public const int VARDECL=60;
	public const int WS=61;
	public const int WhiteSpaceChar=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;

	// delegates
	// delegators

	public OCLAst( ITreeNodeStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public OCLAst(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
		

	public override string[] TokenNames { get { return OCLAst.tokenNames; } }
	public override string GrammarFileName { get { return "..\\..\\Model\\OCL\\Grammar\\OCLAst.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	protected sealed partial class evolutionDeclarationList_scope
	{
		public Constraints Conts;
		public PropertyInitializations Props;

		public evolutionDeclarationList_scope(OCLAst grammar) { OnCreated(grammar); }
		partial void OnCreated(OCLAst grammar);
	}
	partial void evolutionDeclarationList_scopeInit( evolutionDeclarationList_scope scope );
	partial void evolutionDeclarationList_scopeAfter( evolutionDeclarationList_scope scope );
	protected readonly Stack<evolutionDeclarationList_scope> evolutionDeclarationList_stack = new Stack<evolutionDeclarationList_scope>();

	public sealed partial class evolutionDeclarationList_return : TreeRuleReturnScope<CommonTree>
	{
		public Constraints Constraints;
		public PropertyInitializations PropertyInitializations;
		public evolutionDeclarationList_return(OCLAst grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLAst grammar);
	}

	partial void EnterRule_evolutionDeclarationList();
	partial void LeaveRule_evolutionDeclarationList();

	// $ANTLR start "evolutionDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:20:1: public evolutionDeclarationList returns [Constraints Constraints, PropertyInitializations PropertyInitializations] : ^( EVOLUTIONHEAD SimpleName ( contextDeclarationE )* ) ;
	[GrammarRule("evolutionDeclarationList")]
	public OCLAst.evolutionDeclarationList_return evolutionDeclarationList()
	{
		EnterRule_evolutionDeclarationList();
		EnterRule("evolutionDeclarationList", 1);
		TraceIn("evolutionDeclarationList", 1);
		evolutionDeclarationList_stack.Push(new evolutionDeclarationList_scope(this));evolutionDeclarationList_scopeInit(evolutionDeclarationList_stack.Peek());
		OCLAst.evolutionDeclarationList_return retval = new OCLAst.evolutionDeclarationList_return(this);
		retval.Start = (CommonTree)input.LT(1);

		CommonTree SimpleName1 = default(CommonTree);

		evolutionDeclarationList_stack.Peek().Conts =  new Constraints(); evolutionDeclarationList_stack.Peek().Props =  new PropertyInitializations();
		try { DebugEnterRule(GrammarFileName, "evolutionDeclarationList");
		DebugLocation(20, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:28:2: ( ^( EVOLUTIONHEAD SimpleName ( contextDeclarationE )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:28:4: ^( EVOLUTIONHEAD SimpleName ( contextDeclarationE )* )
			{
			DebugLocation(28, 4);
			DebugLocation(28, 6);
			Match(input,EVOLUTIONHEAD,Follow._EVOLUTIONHEAD_in_evolutionDeclarationList77); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(28, 20);
			SimpleName1=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_evolutionDeclarationList79); 
			DebugLocation(28, 31);
			 ResolveVersion(SimpleName1.Text); 
			DebugLocation(28, 69);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:28:69: ( contextDeclarationE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==CLASSIFIERCONDITION||LA1_0==OPERATIONCONDITION||LA1_0==PROPERTYCONDITION))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:28:69: contextDeclarationE
					{
					DebugLocation(28, 69);
					PushFollow(Follow._contextDeclarationE_in_evolutionDeclarationList83);
					contextDeclarationE();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			Match(input, TokenTypes.Up, null); 

			}

			retval.Constraints = evolutionDeclarationList_stack.Peek().Conts; retval.PropertyInitializations = evolutionDeclarationList_stack.Peek().Props;
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("evolutionDeclarationList", 1);
			LeaveRule("evolutionDeclarationList", 1);
			LeaveRule_evolutionDeclarationList();
			evolutionDeclarationList_scopeAfter(evolutionDeclarationList_stack.Peek());evolutionDeclarationList_stack.Pop();
		}
		DebugLocation(29, 1);
		} finally { DebugExitRule(GrammarFileName, "evolutionDeclarationList"); }
		return retval;

	}
	// $ANTLR end "evolutionDeclarationList"

	protected sealed partial class contextDeclarationList_scope
	{
		public Constraints Conts;
		public PropertyInitializations Props;

		public contextDeclarationList_scope(OCLAst grammar) { OnCreated(grammar); }
		partial void OnCreated(OCLAst grammar);
	}
	partial void contextDeclarationList_scopeInit( contextDeclarationList_scope scope );
	partial void contextDeclarationList_scopeAfter( contextDeclarationList_scope scope );
	protected readonly Stack<contextDeclarationList_scope> contextDeclarationList_stack = new Stack<contextDeclarationList_scope>();

	public sealed partial class contextDeclarationList_return : TreeRuleReturnScope<CommonTree>
	{
		public Constraints Constraints;
		public PropertyInitializations PropertyInitializations;
		public contextDeclarationList_return(OCLAst grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLAst grammar);
	}

	partial void EnterRule_contextDeclarationList();
	partial void LeaveRule_contextDeclarationList();

	// $ANTLR start "contextDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:32:1: public contextDeclarationList returns [Constraints Constraints, PropertyInitializations PropertyInitializations] : ^( CONDITION ( contextDeclaration )* ) ;
	[GrammarRule("contextDeclarationList")]
	public OCLAst.contextDeclarationList_return contextDeclarationList()
	{
		EnterRule_contextDeclarationList();
		EnterRule("contextDeclarationList", 2);
		TraceIn("contextDeclarationList", 2);
		contextDeclarationList_stack.Push(new contextDeclarationList_scope(this));contextDeclarationList_scopeInit(contextDeclarationList_stack.Peek());
		OCLAst.contextDeclarationList_return retval = new OCLAst.contextDeclarationList_return(this);
		retval.Start = (CommonTree)input.LT(1);

		contextDeclarationList_stack.Peek().Conts =  new Constraints(); contextDeclarationList_stack.Peek().Props =  new PropertyInitializations();
		try { DebugEnterRule(GrammarFileName, "contextDeclarationList");
		DebugLocation(32, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:2: ( ^( CONDITION ( contextDeclaration )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:4: ^( CONDITION ( contextDeclaration )* )
			{
			DebugLocation(40, 4);
			DebugLocation(40, 6);
			Match(input,CONDITION,Follow._CONDITION_in_contextDeclarationList118); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(40, 16);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:16: ( contextDeclaration )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if ((LA2_0==CLASSIFIERCONDITION||LA2_0==OPERATIONCONDITION||LA2_0==PROPERTYCONDITION))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:16: contextDeclaration
						{
						DebugLocation(40, 16);
						PushFollow(Follow._contextDeclaration_in_contextDeclarationList120);
						contextDeclaration();
						PopFollow();


						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }


				Match(input, TokenTypes.Up, null); 
			}

			}

			retval.Constraints = contextDeclarationList_stack.Peek().Conts; retval.PropertyInitializations = contextDeclarationList_stack.Peek().Props;
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contextDeclarationList", 2);
			LeaveRule("contextDeclarationList", 2);
			LeaveRule_contextDeclarationList();
			contextDeclarationList_scopeAfter(contextDeclarationList_stack.Peek());contextDeclarationList_stack.Pop();
		}
		DebugLocation(41, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclarationList"); }
		return retval;

	}
	// $ANTLR end "contextDeclarationList"


	partial void EnterRule_contextDeclaration();
	partial void LeaveRule_contextDeclaration();

	// $ANTLR start "contextDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:43:1: contextDeclaration : ( propertyContextDecl | classifierContextDecl | operationContextDecl );
	[GrammarRule("contextDeclaration")]
	private void contextDeclaration()
	{
		EnterRule_contextDeclaration();
		EnterRule("contextDeclaration", 3);
		TraceIn("contextDeclaration", 3);
		PropertyInitializationBlock propertyContextDecl2 = default(PropertyInitializationBlock);
		ClassifierConstraintBlock classifierContextDecl3 = default(ClassifierConstraintBlock);

		try { DebugEnterRule(GrammarFileName, "contextDeclaration");
		DebugLocation(43, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:44:2: ( propertyContextDecl | classifierContextDecl | operationContextDecl )
			int alt3=3;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case PROPERTYCONDITION:
				{
				alt3 = 1;
				}
				break;
			case CLASSIFIERCONDITION:
				{
				alt3 = 2;
				}
				break;
			case OPERATIONCONDITION:
				{
				alt3 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:44:3: propertyContextDecl
				{
				DebugLocation(44, 3);
				PushFollow(Follow._propertyContextDecl_in_contextDeclaration133);
				propertyContextDecl2=propertyContextDecl();
				PopFollow();

				DebugLocation(44, 25);
				contextDeclarationList_stack.Peek().Props.PropertyInitializationBlocks.Add(propertyContextDecl2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:45:3: classifierContextDecl
				{
				DebugLocation(45, 3);
				PushFollow(Follow._classifierContextDecl_in_contextDeclaration141);
				classifierContextDecl3=classifierContextDecl();
				PopFollow();

				DebugLocation(45, 25);
				contextDeclarationList_stack.Peek().Conts.ClassifierConstraintBlocks.Add(classifierContextDecl3);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:46:3: operationContextDecl
				{
				DebugLocation(46, 3);
				PushFollow(Follow._operationContextDecl_in_contextDeclaration147);
				operationContextDecl();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contextDeclaration", 3);
			LeaveRule("contextDeclaration", 3);
			LeaveRule_contextDeclaration();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclaration"); }
		return;

	}
	// $ANTLR end "contextDeclaration"


	partial void EnterRule_contextDeclarationE();
	partial void LeaveRule_contextDeclarationE();

	// $ANTLR start "contextDeclarationE"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:49:1: contextDeclarationE : ( propertyContextDecl | classifierContextDecl | operationContextDecl );
	[GrammarRule("contextDeclarationE")]
	private void contextDeclarationE()
	{
		EnterRule_contextDeclarationE();
		EnterRule("contextDeclarationE", 4);
		TraceIn("contextDeclarationE", 4);
		PropertyInitializationBlock propertyContextDecl4 = default(PropertyInitializationBlock);
		ClassifierConstraintBlock classifierContextDecl5 = default(ClassifierConstraintBlock);

		try { DebugEnterRule(GrammarFileName, "contextDeclarationE");
		DebugLocation(49, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:50:2: ( propertyContextDecl | classifierContextDecl | operationContextDecl )
			int alt4=3;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case PROPERTYCONDITION:
				{
				alt4 = 1;
				}
				break;
			case CLASSIFIERCONDITION:
				{
				alt4 = 2;
				}
				break;
			case OPERATIONCONDITION:
				{
				alt4 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:50:3: propertyContextDecl
				{
				DebugLocation(50, 3);
				PushFollow(Follow._propertyContextDecl_in_contextDeclarationE157);
				propertyContextDecl4=propertyContextDecl();
				PopFollow();

				DebugLocation(50, 25);
				evolutionDeclarationList_stack.Peek().Props.PropertyInitializationBlocks.Add(propertyContextDecl4);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:51:3: classifierContextDecl
				{
				DebugLocation(51, 3);
				PushFollow(Follow._classifierContextDecl_in_contextDeclarationE165);
				classifierContextDecl5=classifierContextDecl();
				PopFollow();

				DebugLocation(51, 25);
				evolutionDeclarationList_stack.Peek().Conts.ClassifierConstraintBlocks.Add(classifierContextDecl5);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:52:3: operationContextDecl
				{
				DebugLocation(52, 3);
				PushFollow(Follow._operationContextDecl_in_contextDeclarationE171);
				operationContextDecl();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contextDeclarationE", 4);
			LeaveRule("contextDeclarationE", 4);
			LeaveRule_contextDeclarationE();
		}
		DebugLocation(53, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclarationE"); }
		return;

	}
	// $ANTLR end "contextDeclarationE"


	partial void EnterRule_propertyContextDecl();
	partial void LeaveRule_propertyContextDecl();

	// $ANTLR start "propertyContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:55:1: propertyContextDecl returns [PropertyInitializationBlock Decl] : ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) ;
	[GrammarRule("propertyContextDecl")]
	private PropertyInitializationBlock propertyContextDecl()
	{
		EnterRule_propertyContextDecl();
		EnterRule("propertyContextDecl", 5);
		TraceIn("propertyContextDecl", 5);
		PropertyInitializationBlock Decl = default(PropertyInitializationBlock);

		PropertyInitialization initOrDerValue6 = default(PropertyInitialization);
		OCLAst.propertyContextHead_return propertyContextHead7 = default(OCLAst.propertyContextHead_return);

		List<PropertyInitialization> invs=new List<PropertyInitialization>(); 
		try { DebugEnterRule(GrammarFileName, "propertyContextDecl");
		DebugLocation(55, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:59:2: ( ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:59:3: ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* )
			{
			DebugLocation(59, 3);
			DebugLocation(59, 5);
			Match(input,PROPERTYCONDITION,Follow._PROPERTYCONDITION_in_propertyContextDecl196); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(59, 23);
			PushFollow(Follow._propertyContextHead_in_propertyContextDecl198);
			propertyContextHead7=propertyContextHead();
			PopFollow();

			DebugLocation(59, 43);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:59:43: ( initOrDerValue )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==DERIVATE||LA5_0==INIT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:59:44: initOrDerValue
					{
					DebugLocation(59, 44);
					PushFollow(Follow._initOrDerValue_in_propertyContextDecl201);
					initOrDerValue6=initOrDerValue();
					PopFollow();

					DebugLocation(60, 3);

								if (initOrDerValue6 != null)
								{
									initOrDerValue6.Property = (propertyContextHead7!=null?propertyContextHead7.Property:default(Property)); invs.Add(initOrDerValue6);
								}		
							

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); 
			DebugLocation(65, 8);
			Decl = new PropertyInitializationBlock((propertyContextHead7!=null?propertyContextHead7.Context:default(Classifier)), invs, (propertyContextHead7!=null?propertyContextHead7.Self:default(VariableDeclaration)));

			}

			EnvironmentStack.Pop();EnvironmentStack.Pop();
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyContextDecl", 5);
			LeaveRule("propertyContextDecl", 5);
			LeaveRule_propertyContextDecl();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextDecl"); }
		return Decl;

	}
	// $ANTLR end "propertyContextDecl"

	private sealed partial class propertyContextHead_return : TreeRuleReturnScope<CommonTree>
	{
		public Classifier Context;
		public Property Property;
		public VariableDeclaration Self;
		public propertyContextHead_return(OCLAst grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLAst grammar);
	}

	partial void EnterRule_propertyContextHead();
	partial void LeaveRule_propertyContextHead();

	// $ANTLR start "propertyContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:68:1: propertyContextHead returns [Classifier Context, Property Property, VariableDeclaration Self] : ^( PROPERTYHEAD ( SimpleName )+ type ) ;
	[GrammarRule("propertyContextHead")]
	private OCLAst.propertyContextHead_return propertyContextHead()
	{
		EnterRule_propertyContextHead();
		EnterRule("propertyContextHead", 6);
		TraceIn("propertyContextHead", 6);
		OCLAst.propertyContextHead_return retval = new OCLAst.propertyContextHead_return(this);
		retval.Start = (CommonTree)input.LT(1);

		CommonTree SimpleName8 = default(CommonTree);
		Classifier type9 = default(Classifier);

		List<string> simpleNames=new List<string>(); 
		try { DebugEnterRule(GrammarFileName, "propertyContextHead");
		DebugLocation(68, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:2: ( ^( PROPERTYHEAD ( SimpleName )+ type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:3: ^( PROPERTYHEAD ( SimpleName )+ type )
			{
			DebugLocation(71, 3);
			DebugLocation(71, 5);
			Match(input,PROPERTYHEAD,Follow._PROPERTYHEAD_in_propertyContextHead232); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(71, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:18: ( SimpleName )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==SimpleName))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:19: SimpleName
					{
					DebugLocation(71, 19);
					SimpleName8=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead235); 
					DebugLocation(71, 30);
					 simpleNames.Add(SimpleName8.Text);

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(71, 70);
			PushFollow(Follow._type_in_propertyContextHead241);
			type9=type();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(71, 77);
			retval.Context =PropertyContextHead(simpleNames, VariableDeclaration.SELF, type9, out retval.Self, out retval.Property);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyContextHead", 6);
			LeaveRule("propertyContextHead", 6);
			LeaveRule_propertyContextHead();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextHead"); }
		return retval;

	}
	// $ANTLR end "propertyContextHead"


	partial void EnterRule_classifierContextDecl();
	partial void LeaveRule_classifierContextDecl();

	// $ANTLR start "classifierContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:74:1: classifierContextDecl returns [ClassifierConstraintBlock Decl] : ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) ;
	[GrammarRule("classifierContextDecl")]
	private ClassifierConstraintBlock classifierContextDecl()
	{
		EnterRule_classifierContextDecl();
		EnterRule("classifierContextDecl", 7);
		TraceIn("classifierContextDecl", 7);
		ClassifierConstraintBlock Decl = default(ClassifierConstraintBlock);

		InvariantWithMessage invOrDef10 = default(InvariantWithMessage);
		OCLAst.classifierContextHead_return classifierContextHead11 = default(OCLAst.classifierContextHead_return);

		List<InvariantWithMessage> invs=new List<InvariantWithMessage>(); 
		try { DebugEnterRule(GrammarFileName, "classifierContextDecl");
		DebugLocation(74, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:2: ( ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:4: ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* )
			{
			DebugLocation(78, 4);
			DebugLocation(78, 6);
			Match(input,CLASSIFIERCONDITION,Follow._CLASSIFIERCONDITION_in_classifierContextDecl271); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(78, 26);
			PushFollow(Follow._classifierContextHead_in_classifierContextDecl273);
			classifierContextHead11=classifierContextHead();
			PopFollow();

			DebugLocation(78, 48);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:48: ( invOrDef )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==DEF||LA7_0==INV))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:49: invOrDef
					{
					DebugLocation(78, 49);
					PushFollow(Follow._invOrDef_in_classifierContextDecl276);
					invOrDef10=invOrDef();
					PopFollow();

					DebugLocation(78, 58);
					invs.Add(invOrDef10);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			Match(input, TokenTypes.Up, null); 
			DebugLocation(78, 94);
			Decl = new ClassifierConstraintBlock((classifierContextHead11!=null?classifierContextHead11.Context:default(Classifier)),invs,(classifierContextHead11!=null?classifierContextHead11.Self:default(VariableDeclaration)));

			}

			EnvironmentStack.Pop();EnvironmentStack.Pop();
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classifierContextDecl", 7);
			LeaveRule("classifierContextDecl", 7);
			LeaveRule_classifierContextDecl();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextDecl"); }
		return Decl;

	}
	// $ANTLR end "classifierContextDecl"

	private sealed partial class classifierContextHead_return : TreeRuleReturnScope<CommonTree>
	{
		public Classifier Context;
		public VariableDeclaration Self;
		public classifierContextHead_return(OCLAst grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLAst grammar);
	}

	partial void EnterRule_classifierContextHead();
	partial void LeaveRule_classifierContextHead();

	// $ANTLR start "classifierContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:81:1: classifierContextHead returns [Classifier Context, VariableDeclaration Self] : ( ^( CLASSIFIERHEAD pathName ) | ^( CLASSIFIERHEAD pathName SimpleName ) );
	[GrammarRule("classifierContextHead")]
	private OCLAst.classifierContextHead_return classifierContextHead()
	{
		EnterRule_classifierContextHead();
		EnterRule("classifierContextHead", 8);
		TraceIn("classifierContextHead", 8);
		OCLAst.classifierContextHead_return retval = new OCLAst.classifierContextHead_return(this);
		retval.Start = (CommonTree)input.LT(1);

		CommonTree SimpleName14 = default(CommonTree);
		List<IToken> pathName12 = default(List<IToken>);
		List<IToken> pathName13 = default(List<IToken>);

		try { DebugEnterRule(GrammarFileName, "classifierContextHead");
		DebugLocation(81, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:83:2: ( ^( CLASSIFIERHEAD pathName ) | ^( CLASSIFIERHEAD pathName SimpleName ) )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			try
			{
				alt8 = dfa8.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:83:3: ^( CLASSIFIERHEAD pathName )
				{
				DebugLocation(83, 3);
				DebugLocation(83, 5);
				Match(input,CLASSIFIERHEAD,Follow._CLASSIFIERHEAD_in_classifierContextHead299); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(83, 20);
				PushFollow(Follow._pathName_in_classifierContextHead301);
				pathName12=pathName();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(83, 31);
				retval.Context =ClassifierContextHead(pathName12,VariableDeclaration.SELF,out retval.Self);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:84:3: ^( CLASSIFIERHEAD pathName SimpleName )
				{
				DebugLocation(84, 3);
				DebugLocation(84, 5);
				Match(input,CLASSIFIERHEAD,Follow._CLASSIFIERHEAD_in_classifierContextHead310); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(84, 20);
				PushFollow(Follow._pathName_in_classifierContextHead312);
				pathName13=pathName();
				PopFollow();

				DebugLocation(84, 29);
				SimpleName14=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_classifierContextHead314); 

				Match(input, TokenTypes.Up, null); 
				DebugLocation(84, 42);
				retval.Context =ClassifierContextHead(pathName13,SimpleName14.Text,out retval.Self);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classifierContextHead", 8);
			LeaveRule("classifierContextHead", 8);
			LeaveRule_classifierContextHead();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextHead"); }
		return retval;

	}
	// $ANTLR end "classifierContextHead"


	partial void EnterRule_initOrDerValue();
	partial void LeaveRule_initOrDerValue();

	// $ANTLR start "initOrDerValue"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:87:1: initOrDerValue returns [PropertyInitialization Initialization] : ( ^( INIT inv= oclExpression ) | ^( DERIVATE oclExpression ) );
	[GrammarRule("initOrDerValue")]
	private PropertyInitialization initOrDerValue()
	{
		EnterRule_initOrDerValue();
		EnterRule("initOrDerValue", 9);
		TraceIn("initOrDerValue", 9);
		PropertyInitialization Initialization = default(PropertyInitialization);

		OclExpression inv = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "initOrDerValue");
		DebugLocation(87, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:89:2: ( ^( INIT inv= oclExpression ) | ^( DERIVATE oclExpression ) )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==INIT))
			{
				alt9 = 1;
			}
			else if ((LA9_0==DERIVATE))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:89:3: ^( INIT inv= oclExpression )
				{
				DebugLocation(89, 3);
				DebugLocation(89, 5);
				Match(input,INIT,Follow._INIT_in_initOrDerValue333); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(89, 14);
				PushFollow(Follow._oclExpression_in_initOrDerValue339);
				inv=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(89, 31);
				Initialization =new PropertyInitialization(inv); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:90:3: ^( DERIVATE oclExpression )
				{
				DebugLocation(90, 3);
				DebugLocation(90, 5);
				Match(input,DERIVATE,Follow._DERIVATE_in_initOrDerValue347); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(90, 14);
				PushFollow(Follow._oclExpression_in_initOrDerValue349);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("initOrDerValue", 9);
			LeaveRule("initOrDerValue", 9);
			LeaveRule_initOrDerValue();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "initOrDerValue"); }
		return Initialization;

	}
	// $ANTLR end "initOrDerValue"


	partial void EnterRule_invOrDef();
	partial void LeaveRule_invOrDef();

	// $ANTLR start "invOrDef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:93:1: invOrDef returns [InvariantWithMessage Invariant] : ( ^( INV ( SimpleName )? inv= oclExpression ( MESSAGE msgExp= oclExpression )? ) | ^( DEF ( 'static' )? ( SimpleName )? defExpression ) );
	[GrammarRule("invOrDef")]
	private InvariantWithMessage invOrDef()
	{
		EnterRule_invOrDef();
		EnterRule("invOrDef", 10);
		TraceIn("invOrDef", 10);
		InvariantWithMessage Invariant = default(InvariantWithMessage);

		OclExpression inv = default(OclExpression);
		OclExpression msgExp = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "invOrDef");
		DebugLocation(93, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:95:2: ( ^( INV ( SimpleName )? inv= oclExpression ( MESSAGE msgExp= oclExpression )? ) | ^( DEF ( 'static' )? ( SimpleName )? defExpression ) )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==INV))
			{
				alt14 = 1;
			}
			else if ((LA14_0==DEF))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:95:3: ^( INV ( SimpleName )? inv= oclExpression ( MESSAGE msgExp= oclExpression )? )
				{
				DebugLocation(95, 3);
				DebugLocation(95, 5);
				Match(input,INV,Follow._INV_in_invOrDef365); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(95, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:95:9: ( SimpleName )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==SimpleName))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:95:9: SimpleName
					{
					DebugLocation(95, 9);
					Match(input,SimpleName,Follow._SimpleName_in_invOrDef367); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(95, 25);
				PushFollow(Follow._oclExpression_in_invOrDef374);
				inv=oclExpression();
				PopFollow();

				DebugLocation(96, 3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:96:3: ( MESSAGE msgExp= oclExpression )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==MESSAGE))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:96:4: MESSAGE msgExp= oclExpression
					{
					DebugLocation(96, 4);
					Match(input,MESSAGE,Follow._MESSAGE_in_invOrDef380); 
					DebugLocation(96, 19);
					PushFollow(Follow._oclExpression_in_invOrDef386);
					msgExp=oclExpression();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				Match(input, TokenTypes.Up, null); 
				DebugLocation(97, 6);
				Invariant =new InvariantWithMessage(inv,msgExp); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:98:4: ^( DEF ( 'static' )? ( SimpleName )? defExpression )
				{
				DebugLocation(98, 4);
				DebugLocation(98, 6);
				Match(input,DEF,Follow._DEF_in_invOrDef401); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(98, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:98:10: ( 'static' )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==123))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:98:10: 'static'
					{
					DebugLocation(98, 10);
					Match(input,123,Follow._123_in_invOrDef403); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(98, 20);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:98:20: ( SimpleName )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==SimpleName))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:98:20: SimpleName
					{
					DebugLocation(98, 20);
					Match(input,SimpleName,Follow._SimpleName_in_invOrDef406); 

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(98, 32);
				PushFollow(Follow._defExpression_in_invOrDef409);
				defExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(98, 47);
				Errors.AddError(new ErrorItem("Definition of new property/operation do not supported."));

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("invOrDef", 10);
			LeaveRule("invOrDef", 10);
			LeaveRule_invOrDef();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "invOrDef"); }
		return Invariant;

	}
	// $ANTLR end "invOrDef"


	partial void EnterRule_operationContextDecl();
	partial void LeaveRule_operationContextDecl();

	// $ANTLR start "operationContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:101:1: operationContextDecl : ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) ;
	[GrammarRule("operationContextDecl")]
	private void operationContextDecl()
	{
		EnterRule_operationContextDecl();
		EnterRule("operationContextDecl", 11);
		TraceIn("operationContextDecl", 11);
		try { DebugEnterRule(GrammarFileName, "operationContextDecl");
		DebugLocation(101, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:102:2: ( ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:102:3: ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* )
			{
			DebugLocation(102, 3);
			DebugLocation(102, 5);
			Match(input,OPERATIONCONDITION,Follow._OPERATIONCONDITION_in_operationContextDecl423); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(102, 24);
			PushFollow(Follow._operationContextHead_in_operationContextDecl425);
			operationContextHead();
			PopFollow();

			DebugLocation(102, 45);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:102:45: ( prePostOrBodyDecl )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==BODY||(LA15_0>=POST && LA15_0<=PRE)))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:102:45: prePostOrBodyDecl
					{
					DebugLocation(102, 45);
					PushFollow(Follow._prePostOrBodyDecl_in_operationContextDecl427);
					prePostOrBodyDecl();
					PopFollow();


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationContextDecl", 11);
			LeaveRule("operationContextDecl", 11);
			LeaveRule_operationContextDecl();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextDecl"); }
		return;

	}
	// $ANTLR end "operationContextDecl"


	partial void EnterRule_operationContextHead();
	partial void LeaveRule_operationContextHead();

	// $ANTLR start "operationContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:105:1: operationContextHead : ^( OPERATIONHEAD operation ) ;
	[GrammarRule("operationContextHead")]
	private void operationContextHead()
	{
		EnterRule_operationContextHead();
		EnterRule("operationContextHead", 12);
		TraceIn("operationContextHead", 12);
		try { DebugEnterRule(GrammarFileName, "operationContextHead");
		DebugLocation(105, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:106:2: ( ^( OPERATIONHEAD operation ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:106:3: ^( OPERATIONHEAD operation )
			{
			DebugLocation(106, 3);
			DebugLocation(106, 5);
			Match(input,OPERATIONHEAD,Follow._OPERATIONHEAD_in_operationContextHead440); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(106, 19);
			PushFollow(Follow._operation_in_operationContextHead442);
			operation();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationContextHead", 12);
			LeaveRule("operationContextHead", 12);
			LeaveRule_operationContextHead();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextHead"); }
		return;

	}
	// $ANTLR end "operationContextHead"


	partial void EnterRule_prePostOrBodyDecl();
	partial void LeaveRule_prePostOrBodyDecl();

	// $ANTLR start "prePostOrBodyDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:109:1: prePostOrBodyDecl : ( ^( PRE ( SimpleName )? oclExpression ) | ^( POST ( SimpleName )? oclExpression ) | ^( BODY ( SimpleName )? oclExpression ) );
	[GrammarRule("prePostOrBodyDecl")]
	private void prePostOrBodyDecl()
	{
		EnterRule_prePostOrBodyDecl();
		EnterRule("prePostOrBodyDecl", 13);
		TraceIn("prePostOrBodyDecl", 13);
		try { DebugEnterRule(GrammarFileName, "prePostOrBodyDecl");
		DebugLocation(109, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:110:2: ( ^( PRE ( SimpleName )? oclExpression ) | ^( POST ( SimpleName )? oclExpression ) | ^( BODY ( SimpleName )? oclExpression ) )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case PRE:
				{
				alt19 = 1;
				}
				break;
			case POST:
				{
				alt19 = 2;
				}
				break;
			case BODY:
				{
				alt19 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:110:3: ^( PRE ( SimpleName )? oclExpression )
				{
				DebugLocation(110, 3);
				DebugLocation(110, 5);
				Match(input,PRE,Follow._PRE_in_prePostOrBodyDecl455); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(110, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:110:9: ( SimpleName )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==SimpleName))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:110:9: SimpleName
					{
					DebugLocation(110, 9);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl457); 

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(110, 21);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl460);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:111:3: ^( POST ( SimpleName )? oclExpression )
				{
				DebugLocation(111, 3);
				DebugLocation(111, 5);
				Match(input,POST,Follow._POST_in_prePostOrBodyDecl466); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(111, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:111:10: ( SimpleName )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==SimpleName))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:111:10: SimpleName
					{
					DebugLocation(111, 10);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl468); 

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(111, 22);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl471);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:112:3: ^( BODY ( SimpleName )? oclExpression )
				{
				DebugLocation(112, 3);
				DebugLocation(112, 5);
				Match(input,BODY,Follow._BODY_in_prePostOrBodyDecl477); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(112, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:112:10: ( SimpleName )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==SimpleName))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:112:10: SimpleName
					{
					DebugLocation(112, 10);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl479); 

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(112, 22);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl482);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prePostOrBodyDecl", 13);
			LeaveRule("prePostOrBodyDecl", 13);
			LeaveRule_prePostOrBodyDecl();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "prePostOrBodyDecl"); }
		return;

	}
	// $ANTLR end "prePostOrBodyDecl"


	partial void EnterRule_operation();
	partial void LeaveRule_operation();

	// $ANTLR start "operation"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:115:1: operation : ^( OPERATION pathName ( parameters )? ( type )? ) ;
	[GrammarRule("operation")]
	private void operation()
	{
		EnterRule_operation();
		EnterRule("operation", 14);
		TraceIn("operation", 14);
		try { DebugEnterRule(GrammarFileName, "operation");
		DebugLocation(115, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:116:2: ( ^( OPERATION pathName ( parameters )? ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:116:3: ^( OPERATION pathName ( parameters )? ( type )? )
			{
			DebugLocation(116, 3);
			DebugLocation(116, 5);
			Match(input,OPERATION,Follow._OPERATION_in_operation494); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(116, 15);
			PushFollow(Follow._pathName_in_operation496);
			pathName();
			PopFollow();

			DebugLocation(116, 24);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:116:24: ( parameters )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==DECL))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:116:24: parameters
				{
				DebugLocation(116, 24);
				PushFollow(Follow._parameters_in_operation498);
				parameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(116, 36);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:116:36: ( type )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==COLLTYPE||LA21_0==PATH||LA21_0==83||(LA21_0>=85 && LA21_0<=89)||LA21_0==91||(LA21_0>=94 && LA21_0<=96)))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:116:36: type
				{
				DebugLocation(116, 36);
				PushFollow(Follow._type_in_operation501);
				type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operation", 14);
			LeaveRule("operation", 14);
			LeaveRule_operation();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "operation"); }
		return;

	}
	// $ANTLR end "operation"


	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();

	// $ANTLR start "parameters"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:119:1: parameters : variableDeclaration ( variableDeclaration )* ;
	[GrammarRule("parameters")]
	private void parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 15);
		TraceIn("parameters", 15);
		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(119, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:120:2: ( variableDeclaration ( variableDeclaration )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:120:3: variableDeclaration ( variableDeclaration )*
			{
			DebugLocation(120, 3);
			PushFollow(Follow._variableDeclaration_in_parameters513);
			variableDeclaration();
			PopFollow();

			DebugLocation(120, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:120:23: ( variableDeclaration )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==DECL))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:120:24: variableDeclaration
					{
					DebugLocation(120, 24);
					PushFollow(Follow._variableDeclaration_in_parameters516);
					variableDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameters", 15);
			LeaveRule("parameters", 15);
			LeaveRule_parameters();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return;

	}
	// $ANTLR end "parameters"


	partial void EnterRule_defExpression();
	partial void LeaveRule_defExpression();

	// $ANTLR start "defExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:123:1: defExpression : ( variableDeclaration | ^( DECL operation oclExpression ) );
	[GrammarRule("defExpression")]
	private void defExpression()
	{
		EnterRule_defExpression();
		EnterRule("defExpression", 16);
		TraceIn("defExpression", 16);
		try { DebugEnterRule(GrammarFileName, "defExpression");
		DebugLocation(123, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:124:2: ( variableDeclaration | ^( DECL operation oclExpression ) )
			int alt23=2;
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==DECL))
			{
				int LA23_1 = input.LA(2);

				if ((LA23_1==DOWN))
				{
					int LA23_2 = input.LA(3);

					if ((LA23_2==SimpleName))
					{
						alt23 = 1;
					}
					else if ((LA23_2==OPERATION))
					{
						alt23 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 23, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:124:4: variableDeclaration
				{
				DebugLocation(124, 4);
				PushFollow(Follow._variableDeclaration_in_defExpression529);
				variableDeclaration();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:125:4: ^( DECL operation oclExpression )
				{
				DebugLocation(125, 4);
				DebugLocation(125, 6);
				Match(input,DECL,Follow._DECL_in_defExpression535); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(125, 11);
				PushFollow(Follow._operation_in_defExpression537);
				operation();
				PopFollow();

				DebugLocation(125, 21);
				PushFollow(Follow._oclExpression_in_defExpression539);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defExpression", 16);
			LeaveRule("defExpression", 16);
			LeaveRule_defExpression();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "defExpression"); }
		return;

	}
	// $ANTLR end "defExpression"

	protected sealed partial class oclExpression_scope
	{
		public OclExpression RootExpr;

		public oclExpression_scope(OCLAst grammar) { OnCreated(grammar); }
		partial void OnCreated(OCLAst grammar);
	}
	partial void oclExpression_scopeInit( oclExpression_scope scope );
	partial void oclExpression_scopeAfter( oclExpression_scope scope );
	protected readonly Stack<oclExpression_scope> oclExpression_stack = new Stack<oclExpression_scope>();


	partial void EnterRule_oclExpression();
	partial void LeaveRule_oclExpression();

	// $ANTLR start "oclExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:131:1: public oclExpression returns [OclExpression Expr] : ( ^( INFIX e1= oclExpression e2= oclExpression ) | ^( UNARY e= oclExpression ) | ^( '.' e= oclExpression (res= propertyCall |res= operationCall ) ) | ^( '->' e= oclExpression ( itCall ) ) | ^( MESSAGE oclMessageExp ) | primaryExperession );
	[GrammarRule("oclExpression")]
	public OclExpression oclExpression()
	{
		EnterRule_oclExpression();
		EnterRule("oclExpression", 17);
		TraceIn("oclExpression", 17);
		oclExpression_stack.Push(new oclExpression_scope(this));oclExpression_scopeInit(oclExpression_stack.Peek());
		OclExpression Expr = default(OclExpression);

		CommonTree INFIX15 = default(CommonTree);
		CommonTree UNARY16 = default(CommonTree);
		OclExpression e1 = default(OclExpression);
		OclExpression e2 = default(OclExpression);
		OclExpression e = default(OclExpression);
		OclExpression res = default(OclExpression);
		OclExpression itCall17 = default(OclExpression);
		OclExpression primaryExperession18 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "oclExpression");
		DebugLocation(131, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:136:2: ( ^( INFIX e1= oclExpression e2= oclExpression ) | ^( UNARY e= oclExpression ) | ^( '.' e= oclExpression (res= propertyCall |res= operationCall ) ) | ^( '->' e= oclExpression ( itCall ) ) | ^( MESSAGE oclMessageExp ) | primaryExperession )
			int alt25=6;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case INFIX:
				{
				alt25 = 1;
				}
				break;
			case UNARY:
				{
				alt25 = 2;
				}
				break;
			case 69:
				{
				alt25 = 3;
				}
				break;
			case 68:
				{
				alt25 = 4;
				}
				break;
			case MESSAGE:
				{
				alt25 = 5;
				}
				break;
			case CALL:
			case CLASSLITERAL:
			case COLLECTIONLITERAL:
			case IF:
			case LET:
			case PRIMITIVELITERAL:
			case TUPLELITERAL:
			case TYPE:
				{
				alt25 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:136:3: ^( INFIX e1= oclExpression e2= oclExpression )
				{
				DebugLocation(136, 3);
				DebugLocation(136, 5);
				INFIX15=(CommonTree)Match(input,INFIX,Follow._INFIX_in_oclExpression565); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(136, 14);
				PushFollow(Follow._oclExpression_in_oclExpression570);
				e1=oclExpression();
				PopFollow();

				DebugLocation(136, 31);
				PushFollow(Follow._oclExpression_in_oclExpression574);
				e2=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(136, 47);
				Expr = InfixOperation(e1,INFIX15,e2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:137:3: ^( UNARY e= oclExpression )
				{
				DebugLocation(137, 3);
				DebugLocation(137, 5);
				UNARY16=(CommonTree)Match(input,UNARY,Follow._UNARY_in_oclExpression582); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(137, 13);
				PushFollow(Follow._oclExpression_in_oclExpression587);
				e=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(137, 30);
				Expr = UnaryOperation(UNARY16.Token,e);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:138:3: ^( '.' e= oclExpression (res= propertyCall |res= operationCall ) )
				{
				DebugLocation(138, 3);
				DebugLocation(138, 5);
				Match(input,69,Follow._69_in_oclExpression596); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(138, 10);
				PushFollow(Follow._oclExpression_in_oclExpression600);
				e=oclExpression();
				PopFollow();

				DebugLocation(138, 24);
				oclExpression_stack.Peek().RootExpr =  e;
				DebugLocation(138, 62);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:138:62: (res= propertyCall |res= operationCall )
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				try
				{
					alt24 = dfa24.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:138:63: res= propertyCall
					{
					DebugLocation(138, 66);
					PushFollow(Follow._propertyCall_in_oclExpression606);
					res=propertyCall();
					PopFollow();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:138:82: res= operationCall
					{
					DebugLocation(138, 85);
					PushFollow(Follow._operationCall_in_oclExpression612);
					res=operationCall();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 
				DebugLocation(138, 102);
				Expr =res;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:139:3: ^( '->' e= oclExpression ( itCall ) )
				{
				DebugLocation(139, 3);
				DebugLocation(139, 5);
				Match(input,68,Follow._68_in_oclExpression621); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(139, 11);
				PushFollow(Follow._oclExpression_in_oclExpression625);
				e=oclExpression();
				PopFollow();

				DebugLocation(139, 25);
				oclExpression_stack.Peek().RootExpr =  e;
				DebugLocation(139, 63);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:139:63: ( itCall )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:139:64: itCall
				{
				DebugLocation(139, 64);
				PushFollow(Follow._itCall_in_oclExpression629);
				itCall17=itCall();
				PopFollow();


				}


				Match(input, TokenTypes.Up, null); 
				DebugLocation(139, 73);
				Expr =itCall17;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:140:3: ^( MESSAGE oclMessageExp )
				{
				DebugLocation(140, 3);
				DebugLocation(140, 5);
				Match(input,MESSAGE,Follow._MESSAGE_in_oclExpression638); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(140, 13);
				PushFollow(Follow._oclMessageExp_in_oclExpression640);
				oclMessageExp();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:141:4: primaryExperession
				{
				DebugLocation(141, 4);
				PushFollow(Follow._primaryExperession_in_oclExpression646);
				primaryExperession18=primaryExperession();
				PopFollow();

				DebugLocation(141, 23);
				Expr = primaryExperession18; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclExpression", 17);
			LeaveRule("oclExpression", 17);
			LeaveRule_oclExpression();
			oclExpression_scopeAfter(oclExpression_stack.Peek());oclExpression_stack.Pop();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "oclExpression"); }
		return Expr;

	}
	// $ANTLR end "oclExpression"


	partial void EnterRule_primaryExperession();
	partial void LeaveRule_primaryExperession();

	// $ANTLR start "primaryExperession"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:145:1: primaryExperession returns [OclExpression Expr] : ( collectionLiteralExp | tupleLiteralExp | classLiteralExp | ^( PRIMITIVELITERAL primitiveLiteralExp ) | ^( TYPE type ) | ifExp | letExp | ^( CALL pathName isMarkedPre ) | ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre ) );
	[GrammarRule("primaryExperession")]
	private OclExpression primaryExperession()
	{
		EnterRule_primaryExperession();
		EnterRule("primaryExperession", 18);
		TraceIn("primaryExperession", 18);
		OclExpression Expr = default(OclExpression);

		CommonTree TYPE24 = default(CommonTree);
		List<OclExpression> args = default(List<OclExpression>);
		OclExpression collectionLiteralExp19 = default(OclExpression);
		TupleLiteralExp tupleLiteralExp20 = default(TupleLiteralExp);
		ClassLiteralExp classLiteralExp21 = default(ClassLiteralExp);
		LiteralExp primitiveLiteralExp22 = default(LiteralExp);
		Classifier type23 = default(Classifier);
		OclExpression ifExp25 = default(OclExpression);
		OclExpression letExp26 = default(OclExpression);
		List<IToken> pathName27 = default(List<IToken>);
		bool isMarkedPre28 = default(bool);
		List<IToken> pathName29 = default(List<IToken>);
		bool isMarkedPre30 = default(bool);

		try { DebugEnterRule(GrammarFileName, "primaryExperession");
		DebugLocation(145, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:147:2: ( collectionLiteralExp | tupleLiteralExp | classLiteralExp | ^( PRIMITIVELITERAL primitiveLiteralExp ) | ^( TYPE type ) | ifExp | letExp | ^( CALL pathName isMarkedPre ) | ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre ) )
			int alt26=9;
			try { DebugEnterDecision(26, false);
			try
			{
				alt26 = dfa26.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:152:3: collectionLiteralExp
				{
				DebugLocation(152, 3);
				PushFollow(Follow._collectionLiteralExp_in_primaryExperession679);
				collectionLiteralExp19=collectionLiteralExp();
				PopFollow();

				DebugLocation(152, 24);
				Expr = collectionLiteralExp19;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:154:3: tupleLiteralExp
				{
				DebugLocation(154, 3);
				PushFollow(Follow._tupleLiteralExp_in_primaryExperession690);
				tupleLiteralExp20=tupleLiteralExp();
				PopFollow();

				DebugLocation(154, 19);
				Expr = tupleLiteralExp20;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:156:3: classLiteralExp
				{
				DebugLocation(156, 3);
				PushFollow(Follow._classLiteralExp_in_primaryExperession701);
				classLiteralExp21=classLiteralExp();
				PopFollow();

				DebugLocation(156, 19);
				Expr = classLiteralExp21;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:158:3: ^( PRIMITIVELITERAL primitiveLiteralExp )
				{
				DebugLocation(158, 3);
				DebugLocation(158, 5);
				Match(input,PRIMITIVELITERAL,Follow._PRIMITIVELITERAL_in_primaryExperession713); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(158, 22);
				PushFollow(Follow._primitiveLiteralExp_in_primaryExperession715);
				primitiveLiteralExp22=primitiveLiteralExp();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(158, 43);
				Expr = primitiveLiteralExp22;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:161:3: ^( TYPE type )
				{
				DebugLocation(161, 3);
				DebugLocation(161, 5);
				TYPE24=(CommonTree)Match(input,TYPE,Follow._TYPE_in_primaryExperession729); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(161, 10);
				PushFollow(Follow._type_in_primaryExperession731);
				type23=type();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(161, 16);
				 Expr = new TypeExp(type23,TypesTable.Library.Type).SetCodeSource(new CodeSource(TYPE24));

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:162:3: ifExp
				{
				DebugLocation(162, 3);
				PushFollow(Follow._ifExp_in_primaryExperession738);
				ifExp25=ifExp();
				PopFollow();

				DebugLocation(162, 9);
				Expr = ifExp25;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:163:3: letExp
				{
				DebugLocation(163, 3);
				PushFollow(Follow._letExp_in_primaryExperession744);
				letExp26=letExp();
				PopFollow();

				DebugLocation(163, 10);
				Expr = letExp26;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:165:3: ^( CALL pathName isMarkedPre )
				{
				DebugLocation(165, 3);
				DebugLocation(165, 5);
				Match(input,CALL,Follow._CALL_in_primaryExperession753); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(165, 10);
				PushFollow(Follow._pathName_in_primaryExperession755);
				pathName27=pathName();
				PopFollow();

				DebugLocation(165, 19);
				PushFollow(Follow._isMarkedPre_in_primaryExperession757);
				isMarkedPre28=isMarkedPre();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(165, 32);
				Expr = ResolvePath(pathName27, isMarkedPre28);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:167:4: ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre )
				{
				DebugLocation(167, 4);
				DebugLocation(167, 6);
				Match(input,CALL,Follow._CALL_in_primaryExperession768); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(167, 11);
				PushFollow(Follow._pathName_in_primaryExperession770);
				pathName29=pathName();
				PopFollow();

				DebugLocation(167, 20);
				DebugLocation(167, 22);
				Match(input,ARGS,Follow._ARGS_in_primaryExperession773); 

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(167, 32);
					PushFollow(Follow._arguments_in_primaryExperession778);
					args=arguments();
					PopFollow();


					Match(input, TokenTypes.Up, null); 
				}
				DebugLocation(167, 45);
				PushFollow(Follow._isMarkedPre_in_primaryExperession782);
				isMarkedPre30=isMarkedPre();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(168, 3);
				Expr = ResolveImplicitOperation(pathName29,isMarkedPre30,args);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExperession", 18);
			LeaveRule("primaryExperession", 18);
			LeaveRule_primaryExperession();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExperession"); }
		return Expr;

	}
	// $ANTLR end "primaryExperession"


	partial void EnterRule_propertyCall();
	partial void LeaveRule_propertyCall();

	// $ANTLR start "propertyCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:172:1: propertyCall returns [OclExpression Expr] : ^( CALL pathName isMarkedPre ) ;
	[GrammarRule("propertyCall")]
	private OclExpression propertyCall()
	{
		EnterRule_propertyCall();
		EnterRule("propertyCall", 19);
		TraceIn("propertyCall", 19);
		OclExpression Expr = default(OclExpression);

		List<IToken> pathName31 = default(List<IToken>);
		bool isMarkedPre32 = default(bool);

		try { DebugEnterRule(GrammarFileName, "propertyCall");
		DebugLocation(172, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:174:2: ( ^( CALL pathName isMarkedPre ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:174:5: ^( CALL pathName isMarkedPre )
			{
			DebugLocation(174, 5);
			DebugLocation(174, 7);
			Match(input,CALL,Follow._CALL_in_propertyCall807); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(174, 12);
			PushFollow(Follow._pathName_in_propertyCall809);
			pathName31=pathName();
			PopFollow();

			DebugLocation(174, 21);
			PushFollow(Follow._isMarkedPre_in_propertyCall811);
			isMarkedPre32=isMarkedPre();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(175, 3);
			Expr = ProcessPropertyCall(oclExpression_stack.Peek().RootExpr,pathName31,isMarkedPre32);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyCall", 19);
			LeaveRule("propertyCall", 19);
			LeaveRule_propertyCall();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCall"); }
		return Expr;

	}
	// $ANTLR end "propertyCall"


	partial void EnterRule_operationCall();
	partial void LeaveRule_operationCall();

	// $ANTLR start "operationCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:179:1: operationCall returns [OclExpression Expr] : ^( CALL pathName ( ^( ARGS args= arguments ) | ARGS ) pre= isMarkedPre ) ;
	[GrammarRule("operationCall")]
	private OclExpression operationCall()
	{
		EnterRule_operationCall();
		EnterRule("operationCall", 20);
		TraceIn("operationCall", 20);
		OclExpression Expr = default(OclExpression);

		List<OclExpression> args = default(List<OclExpression>);
		bool pre = default(bool);
		List<IToken> pathName33 = default(List<IToken>);

		try { DebugEnterRule(GrammarFileName, "operationCall");
		DebugLocation(179, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:181:2: ( ^( CALL pathName ( ^( ARGS args= arguments ) | ARGS ) pre= isMarkedPre ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:181:4: ^( CALL pathName ( ^( ARGS args= arguments ) | ARGS ) pre= isMarkedPre )
			{
			DebugLocation(181, 4);
			DebugLocation(181, 6);
			Match(input,CALL,Follow._CALL_in_operationCall835); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(181, 11);
			PushFollow(Follow._pathName_in_operationCall837);
			pathName33=pathName();
			PopFollow();

			DebugLocation(181, 20);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:181:20: ( ^( ARGS args= arguments ) | ARGS )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==ARGS))
			{
				int LA27_1 = input.LA(2);

				if ((LA27_1==DOWN))
				{
					alt27 = 1;
				}
				else if ((LA27_1==UP||LA27_1==121))
				{
					alt27 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:181:21: ^( ARGS args= arguments )
				{
				DebugLocation(181, 21);
				DebugLocation(181, 23);
				Match(input,ARGS,Follow._ARGS_in_operationCall841); 

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(181, 33);
					PushFollow(Follow._arguments_in_operationCall847);
					args=arguments();
					PopFollow();


					Match(input, TokenTypes.Up, null); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:181:46: ARGS
				{
				DebugLocation(181, 46);
				Match(input,ARGS,Follow._ARGS_in_operationCall850); 

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(181, 56);
			PushFollow(Follow._isMarkedPre_in_operationCall856);
			pre=isMarkedPre();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(182, 3);
			Expr = ProcessOperationCall(oclExpression_stack.Peek().RootExpr,pathName33,pre,args);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationCall", 20);
			LeaveRule("operationCall", 20);
			LeaveRule_operationCall();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "operationCall"); }
		return Expr;

	}
	// $ANTLR end "operationCall"

	protected sealed partial class itCall_scope
	{
		public int PushedVar;

		public itCall_scope(OCLAst grammar) { OnCreated(grammar); }
		partial void OnCreated(OCLAst grammar);
	}
	partial void itCall_scopeInit( itCall_scope scope );
	partial void itCall_scopeAfter( itCall_scope scope );
	protected readonly Stack<itCall_scope> itCall_stack = new Stack<itCall_scope>();


	partial void EnterRule_itCall();
	partial void LeaveRule_itCall();

	// $ANTLR start "itCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:186:1: itCall returns [OclExpression Expr] : ( ^( CALL iteratorCall ) | iterateCall );
	[GrammarRule("itCall")]
	private OclExpression itCall()
	{
		EnterRule_itCall();
		EnterRule("itCall", 21);
		TraceIn("itCall", 21);
		itCall_stack.Push(new itCall_scope(this));itCall_scopeInit(itCall_stack.Peek());
		OclExpression Expr = default(OclExpression);

		OclExpression iteratorCall34 = default(OclExpression);
		OclExpression iterateCall35 = default(OclExpression);


				itCall_stack.Peek().PushedVar =  0;
			
		try { DebugEnterRule(GrammarFileName, "itCall");
		DebugLocation(186, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:199:2: ( ^( CALL iteratorCall ) | iterateCall )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==CALL))
			{
				alt28 = 1;
			}
			else if ((LA28_0==ITERATE))
			{
				alt28 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:199:4: ^( CALL iteratorCall )
				{
				DebugLocation(199, 4);
				DebugLocation(199, 6);
				Match(input,CALL,Follow._CALL_in_itCall894); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(199, 11);
				PushFollow(Follow._iteratorCall_in_itCall896);
				iteratorCall34=iteratorCall();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(199, 25);
				Expr = iteratorCall34;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:200:4: iterateCall
				{
				DebugLocation(200, 4);
				PushFollow(Follow._iterateCall_in_itCall904);
				iterateCall35=iterateCall();
				PopFollow();

				DebugLocation(200, 16);
				Expr = iterateCall35;

				}
				break;

			}

					for(int i=0;i<itCall_stack.Peek().PushedVar;i++){
						EnvironmentStack.Pop();
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("itCall", 21);
			LeaveRule("itCall", 21);
			LeaveRule_itCall();
			itCall_scopeAfter(itCall_stack.Peek());itCall_stack.Pop();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "itCall"); }
		return Expr;

	}
	// $ANTLR end "itCall"


	partial void EnterRule_iteratorCall();
	partial void LeaveRule_iteratorCall();

	// $ANTLR start "iteratorCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:204:1: iteratorCall returns [OclExpression Expr] : ( pathName ^( ARGS ^( VARDECL typedefs ) args= arguments ) | pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS ) );
	[GrammarRule("iteratorCall")]
	private OclExpression iteratorCall()
	{
		EnterRule_iteratorCall();
		EnterRule("iteratorCall", 22);
		TraceIn("iteratorCall", 22);
		OclExpression Expr = default(OclExpression);

		List<OclExpression> args = default(List<OclExpression>);
		List<IToken> pathName36 = default(List<IToken>);
		List<VariableDeclaration> typedefs37 = default(List<VariableDeclaration>);
		List<IToken> pathName38 = default(List<IToken>);
		VariableDeclaration implicitVarDecl39 = default(VariableDeclaration);

		try { DebugEnterRule(GrammarFileName, "iteratorCall");
		DebugLocation(204, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:206:2: ( pathName ^( ARGS ^( VARDECL typedefs ) args= arguments ) | pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS ) )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			try
			{
				alt31 = dfa31.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:206:4: pathName ^( ARGS ^( VARDECL typedefs ) args= arguments )
				{
				DebugLocation(206, 4);
				PushFollow(Follow._pathName_in_iteratorCall922);
				pathName36=pathName();
				PopFollow();

				DebugLocation(206, 13);
				DebugLocation(206, 15);
				Match(input,ARGS,Follow._ARGS_in_iteratorCall925); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(206, 20);
				DebugLocation(206, 22);
				Match(input,VARDECL,Follow._VARDECL_in_iteratorCall928); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(206, 30);
				PushFollow(Follow._typedefs_in_iteratorCall930);
				typedefs37=typedefs();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(206, 45);
				PushFollow(Follow._arguments_in_iteratorCall937);
				args=arguments();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(206, 59);

						Expr = ProcessIteratorCall(oclExpression_stack.Peek().RootExpr,pathName36,typedefs37,args);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:208:4: pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS )
				{
				DebugLocation(208, 4);
				PushFollow(Follow._pathName_in_iteratorCall946);
				pathName38=pathName();
				PopFollow();

				DebugLocation(208, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:208:13: ( ({...}? => implicitVarDecl ) |)
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==ARGS))
				{
					int LA29_1 = input.LA(2);

					if (((IsIteratorOperation(oclExpression_stack.Peek().RootExpr,pathName38))))
					{
						alt29 = 1;
					}
					else if ((true))
					{
						alt29 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 29, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:210:4: ({...}? => implicitVarDecl )
					{
					DebugLocation(210, 4);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:210:4: ({...}? => implicitVarDecl )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:210:5: {...}? => implicitVarDecl
					{
					DebugLocation(210, 5);
					if (!((IsIteratorOperation(oclExpression_stack.Peek().RootExpr,pathName38))))
					{
						throw new FailedPredicateException(input, "iteratorCall", "IsIteratorOperation($oclExpression::RootExpr,$pathName.Path)");
					}
					DebugLocation(210, 72);
					PushFollow(Follow._implicitVarDecl_in_iteratorCall962);
					implicitVarDecl39=implicitVarDecl();
					PopFollow();


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:211:3: 
					{
					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(212, 3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:212:3: ( ^( ARGS args= arguments ) | ARGS )
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==ARGS))
				{
					int LA30_1 = input.LA(2);

					if ((LA30_1==DOWN))
					{
						alt30 = 1;
					}
					else if ((LA30_1==UP))
					{
						alt30 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 30, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:212:4: ^( ARGS args= arguments )
					{
					DebugLocation(212, 4);
					DebugLocation(212, 6);
					Match(input,ARGS,Follow._ARGS_in_iteratorCall978); 

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); 
						DebugLocation(212, 17);
						PushFollow(Follow._arguments_in_iteratorCall985);
						args=arguments();
						PopFollow();


						Match(input, TokenTypes.Up, null); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:212:30: ARGS
					{
					DebugLocation(212, 30);
					Match(input,ARGS,Follow._ARGS_in_iteratorCall988); 

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(213, 3);
				 
							if(IsIteratorOperation(oclExpression_stack.Peek().RootExpr,pathName38)){
								var decls = new List<VariableDeclaration>();
								decls.Add(implicitVarDecl39);
								Expr = ProcessIteratorCall(oclExpression_stack.Peek().RootExpr,pathName38,decls,args);
							} else {
								Expr = ProcessCollectionOperationCall(oclExpression_stack.Peek().RootExpr,pathName38,args);
							}
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("iteratorCall", 22);
			LeaveRule("iteratorCall", 22);
			LeaveRule_iteratorCall();
		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "iteratorCall"); }
		return Expr;

	}
	// $ANTLR end "iteratorCall"


	partial void EnterRule_iterateCall();
	partial void LeaveRule_iterateCall();

	// $ANTLR start "iterateCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:224:1: iterateCall returns [OclExpression Expr] : ^(it= ITERATE (iterator= typedef |iterator= implicitVarDecl ) ^( ACC accName= SimpleName (accType= type )? accExpr= oclExpression ) expr= oclExpression ) ;
	[GrammarRule("iterateCall")]
	private OclExpression iterateCall()
	{
		EnterRule_iterateCall();
		EnterRule("iterateCall", 23);
		TraceIn("iterateCall", 23);
		OclExpression Expr = default(OclExpression);

		CommonTree it = default(CommonTree);
		CommonTree accName = default(CommonTree);
		VariableDeclaration iterator = default(VariableDeclaration);
		Classifier accType = default(Classifier);
		OclExpression accExpr = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "iterateCall");
		DebugLocation(224, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:226:2: ( ^(it= ITERATE (iterator= typedef |iterator= implicitVarDecl ) ^( ACC accName= SimpleName (accType= type )? accExpr= oclExpression ) expr= oclExpression ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:226:4: ^(it= ITERATE (iterator= typedef |iterator= implicitVarDecl ) ^( ACC accName= SimpleName (accType= type )? accExpr= oclExpression ) expr= oclExpression )
			{
			DebugLocation(226, 4);
			DebugLocation(226, 8);
			it=(CommonTree)Match(input,ITERATE,Follow._ITERATE_in_iterateCall1012); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(227, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:227:4: (iterator= typedef |iterator= implicitVarDecl )
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==DECL))
			{
				alt32 = 1;
			}
			else if (((LA32_0>=ACC && LA32_0<=ARGS)))
			{
				alt32 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:227:5: iterator= typedef
				{
				DebugLocation(227, 13);
				PushFollow(Follow._typedef_in_iterateCall1021);
				iterator=typedef();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:227:24: iterator= implicitVarDecl
				{
				DebugLocation(227, 32);
				PushFollow(Follow._implicitVarDecl_in_iterateCall1027);
				iterator=implicitVarDecl();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(228, 4);
			DebugLocation(228, 6);
			Match(input,ACC,Follow._ACC_in_iterateCall1034); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(228, 18);
			accName=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_iterateCall1040); 
			DebugLocation(228, 31);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:228:31: (accType= type )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==COLLTYPE||LA33_0==PATH||LA33_0==83||(LA33_0>=85 && LA33_0<=89)||LA33_0==91||(LA33_0>=94 && LA33_0<=96)))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:228:32: accType= type
				{
				DebugLocation(228, 40);
				PushFollow(Follow._type_in_iterateCall1047);
				accType=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(228, 57);
			PushFollow(Follow._oclExpression_in_iterateCall1055);
			accExpr=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(228, 74);
			 var acc = ProcessAccDef(accName.Token,accType,accExpr,ref itCall_stack.Peek().PushedVar);
			DebugLocation(229, 9);
			PushFollow(Follow._oclExpression_in_iterateCall1067);
			expr=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(231, 3);
			 Expr = ProcessIterate(oclExpression_stack.Peek().RootExpr,it.Token,iterator,acc,expr);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("iterateCall", 23);
			LeaveRule("iterateCall", 23);
			LeaveRule_iterateCall();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "iterateCall"); }
		return Expr;

	}
	// $ANTLR end "iterateCall"


	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:234:1: arguments returns [List<OclExpression> Args = new List<OclExpression>()] : (e= oclExpression )* ;
	[GrammarRule("arguments")]
	private List<OclExpression> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 24);
		TraceIn("arguments", 24);
		List<OclExpression> Args =  new List<OclExpression>();

		OclExpression e = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(234, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:236:2: ( (e= oclExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:236:4: (e= oclExpression )*
			{
			DebugLocation(236, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:236:4: (e= oclExpression )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==CALL||(LA34_0>=CLASSLITERAL && LA34_0<=COLLECTIONLITERAL)||LA34_0==IF||LA34_0==INFIX||LA34_0==LET||LA34_0==MESSAGE||LA34_0==PRIMITIVELITERAL||(LA34_0>=TUPLELITERAL && LA34_0<=UNARY)||(LA34_0>=68 && LA34_0<=69)))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:236:5: e= oclExpression
					{
					DebugLocation(236, 7);
					PushFollow(Follow._oclExpression_in_arguments1097);
					e=oclExpression();
					PopFollow();

					DebugLocation(236, 23);
					Args.Add(e);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 24);
			LeaveRule("arguments", 24);
			LeaveRule_arguments();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return Args;

	}
	// $ANTLR end "arguments"


	partial void EnterRule_typedefs();
	partial void LeaveRule_typedefs();

	// $ANTLR start "typedefs"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:253:1: typedefs returns [List<VariableDeclaration> Decls = new List<VariableDeclaration>()] : ( typedef )+ ;
	[GrammarRule("typedefs")]
	private List<VariableDeclaration> typedefs()
	{
		EnterRule_typedefs();
		EnterRule("typedefs", 25);
		TraceIn("typedefs", 25);
		List<VariableDeclaration> Decls =  new List<VariableDeclaration>();

		VariableDeclaration typedef40 = default(VariableDeclaration);

		try { DebugEnterRule(GrammarFileName, "typedefs");
		DebugLocation(253, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:255:2: ( ( typedef )+ )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:255:4: ( typedef )+
			{
			DebugLocation(255, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:255:4: ( typedef )+
			int cnt35=0;
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==DECL))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:255:5: typedef
					{
					DebugLocation(255, 5);
					PushFollow(Follow._typedef_in_typedefs1145);
					typedef40=typedef();
					PopFollow();

					DebugLocation(255, 12);
					Decls.Add(typedef40);

					}
					break;

				default:
					if (cnt35 >= 1)
						goto loop35;

					EarlyExitException eee35 = new EarlyExitException( 35, input );
					DebugRecognitionException(eee35);
					throw eee35;
				}
				cnt35++;
			}
			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typedefs", 25);
			LeaveRule("typedefs", 25);
			LeaveRule_typedefs();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "typedefs"); }
		return Decls;

	}
	// $ANTLR end "typedefs"


	partial void EnterRule_typedef();
	partial void LeaveRule_typedef();

	// $ANTLR start "typedef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:258:1: typedef returns [VariableDeclaration Decl] : ^( DECL SimpleName ( type )? ) ;
	[GrammarRule("typedef")]
	private VariableDeclaration typedef()
	{
		EnterRule_typedef();
		EnterRule("typedef", 26);
		TraceIn("typedef", 26);
		VariableDeclaration Decl = default(VariableDeclaration);

		CommonTree SimpleName41 = default(CommonTree);
		Classifier type42 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "typedef");
		DebugLocation(258, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:260:2: ( ^( DECL SimpleName ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:260:4: ^( DECL SimpleName ( type )? )
			{
			DebugLocation(260, 4);
			DebugLocation(260, 6);
			Match(input,DECL,Follow._DECL_in_typedef1164); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(260, 11);
			SimpleName41=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_typedef1166); 
			DebugLocation(260, 22);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:260:22: ( type )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==COLLTYPE||LA36_0==PATH||LA36_0==83||(LA36_0>=85 && LA36_0<=89)||LA36_0==91||(LA36_0>=94 && LA36_0<=96)))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:260:22: type
				{
				DebugLocation(260, 22);
				PushFollow(Follow._type_in_typedef1168);
				type42=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			Match(input, TokenTypes.Up, null); 
			DebugLocation(261, 4);
			Decl = ProcessVarDef(oclExpression_stack.Peek().RootExpr,SimpleName41.Token,type42,ref itCall_stack.Peek().PushedVar);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typedef", 26);
			LeaveRule("typedef", 26);
			LeaveRule_typedef();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "typedef"); }
		return Decl;

	}
	// $ANTLR end "typedef"


	partial void EnterRule_implicitVarDecl();
	partial void LeaveRule_implicitVarDecl();

	// $ANTLR start "implicitVarDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:264:1: implicitVarDecl returns [VariableDeclaration Decl] :;
	[GrammarRule("implicitVarDecl")]
	private VariableDeclaration implicitVarDecl()
	{
		EnterRule_implicitVarDecl();
		EnterRule("implicitVarDecl", 27);
		TraceIn("implicitVarDecl", 27);
		VariableDeclaration Decl = default(VariableDeclaration);

		try { DebugEnterRule(GrammarFileName, "implicitVarDecl");
		DebugLocation(264, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:266:2: ()
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:266:4: 
			{
			DebugLocation(266, 4);
			Decl = ProcessImplicitVarDef(oclExpression_stack.Peek().RootExpr, ref itCall_stack.Peek().PushedVar); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implicitVarDecl", 27);
			LeaveRule("implicitVarDecl", 27);
			LeaveRule_implicitVarDecl();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "implicitVarDecl"); }
		return Decl;

	}
	// $ANTLR end "implicitVarDecl"


	partial void EnterRule_pathName();
	partial void LeaveRule_pathName();

	// $ANTLR start "pathName"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:271:1: pathName returns [List<IToken> Path = new List<IToken>()] : ^( PATH ( SimpleName )+ ) ;
	[GrammarRule("pathName")]
	private List<IToken> pathName()
	{
		EnterRule_pathName();
		EnterRule("pathName", 28);
		TraceIn("pathName", 28);
		List<IToken> Path =  new List<IToken>();

		CommonTree SimpleName43 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "pathName");
		DebugLocation(271, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:273:2: ( ^( PATH ( SimpleName )+ ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:274:4: ^( PATH ( SimpleName )+ )
			{
			DebugLocation(274, 4);
			DebugLocation(274, 6);
			Match(input,PATH,Follow._PATH_in_pathName1217); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(274, 11);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:274:11: ( SimpleName )+
			int cnt37=0;
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==SimpleName))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:274:12: SimpleName
					{
					DebugLocation(274, 12);
					SimpleName43=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_pathName1220); 
					DebugLocation(274, 23);
					Path.Add(SimpleName43.Token);

					}
					break;

				default:
					if (cnt37 >= 1)
						goto loop37;

					EarlyExitException eee37 = new EarlyExitException( 37, input );
					DebugRecognitionException(eee37);
					throw eee37;
				}
				cnt37++;
			}
			loop37:
				;

			} finally { DebugExitSubRule(37); }


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pathName", 28);
			LeaveRule("pathName", 28);
			LeaveRule_pathName();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "pathName"); }
		return Path;

	}
	// $ANTLR end "pathName"


	partial void EnterRule_collectionLiteralExp();
	partial void LeaveRule_collectionLiteralExp();

	// $ANTLR start "collectionLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:278:1: collectionLiteralExp returns [OclExpression Expr] : ( ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) );
	[GrammarRule("collectionLiteralExp")]
	private OclExpression collectionLiteralExp()
	{
		EnterRule_collectionLiteralExp();
		EnterRule("collectionLiteralExp", 29);
		TraceIn("collectionLiteralExp", 29);
		OclExpression Expr = default(OclExpression);

		OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier44 = default(OCLAst.collectionTypeIdentifier_return);
		List<CollectionLiteralPart> collectionLiteralParts45 = default(List<CollectionLiteralPart>);
		OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier46 = default(OCLAst.collectionTypeIdentifier_return);
		Classifier type47 = default(Classifier);
		List<CollectionLiteralPart> collectionLiteralParts48 = default(List<CollectionLiteralPart>);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralExp");
		DebugLocation(278, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:280:2: ( ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:281:3: ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts )
				{
				DebugLocation(281, 3);
				DebugLocation(281, 5);
				Match(input,COLLECTIONLITERAL,Follow._COLLECTIONLITERAL_in_collectionLiteralExp1247); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(281, 23);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp1249);
				collectionTypeIdentifier44=collectionTypeIdentifier();
				PopFollow();

				DebugLocation(281, 48);
				PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1251);
				collectionLiteralParts45=collectionLiteralParts();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(282, 3);
				Expr = CollectionLiteralExp((collectionTypeIdentifier44!=null?collectionTypeIdentifier44.Kind:default(CollectionKind)),(collectionTypeIdentifier44!=null?collectionTypeIdentifier44.Tree:default(CommonTree)),collectionLiteralParts45);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:285:3: ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts )
				{
				DebugLocation(285, 3);
				DebugLocation(285, 5);
				Match(input,COLLECTIONLITERAL,Follow._COLLECTIONLITERAL_in_collectionLiteralExp1266); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(285, 23);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp1268);
				collectionTypeIdentifier46=collectionTypeIdentifier();
				PopFollow();

				DebugLocation(285, 48);
				PushFollow(Follow._type_in_collectionLiteralExp1270);
				type47=type();
				PopFollow();

				DebugLocation(285, 53);
				PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1272);
				collectionLiteralParts48=collectionLiteralParts();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(286, 3);
				Expr = CollectionLiteralExp((collectionTypeIdentifier46!=null?collectionTypeIdentifier46.Kind:default(CollectionKind)),(collectionTypeIdentifier46!=null?collectionTypeIdentifier46.Tree:default(CommonTree)),type47,collectionLiteralParts48);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralExp", 29);
			LeaveRule("collectionLiteralExp", 29);
			LeaveRule_collectionLiteralExp();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExp"); }
		return Expr;

	}
	// $ANTLR end "collectionLiteralExp"

	private sealed partial class collectionTypeIdentifier_return : TreeRuleReturnScope<CommonTree>
	{
		public CollectionKind Kind;
		public CommonTree Tree;
		public collectionTypeIdentifier_return(OCLAst grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLAst grammar);
	}

	partial void EnterRule_collectionTypeIdentifier();
	partial void LeaveRule_collectionTypeIdentifier();

	// $ANTLR start "collectionTypeIdentifier"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:292:1: collectionTypeIdentifier returns [CollectionKind Kind,CommonTree Tree] : ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' );
	[GrammarRule("collectionTypeIdentifier")]
	private OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier()
	{
		EnterRule_collectionTypeIdentifier();
		EnterRule("collectionTypeIdentifier", 30);
		TraceIn("collectionTypeIdentifier", 30);
		OCLAst.collectionTypeIdentifier_return retval = new OCLAst.collectionTypeIdentifier_return(this);
		retval.Start = (CommonTree)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "collectionTypeIdentifier");
		DebugLocation(292, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:297:2: ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' )
			int alt39=5;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 93:
				{
				alt39 = 1;
				}
				break;
			case 82:
				{
				alt39 = 2;
				}
				break;
			case 92:
				{
				alt39 = 3;
				}
				break;
			case 84:
				{
				alt39 = 4;
				}
				break;
			case 90:
				{
				alt39 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:297:3: 'Set'
				{
				DebugLocation(297, 3);
				Match(input,93,Follow._93_in_collectionTypeIdentifier1302); 
				DebugLocation(297, 9);
				retval.Kind = CollectionKind.Set;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:298:3: 'Bag'
				{
				DebugLocation(298, 3);
				Match(input,82,Follow._82_in_collectionTypeIdentifier1308); 
				DebugLocation(298, 9);
				retval.Kind = CollectionKind.Bag;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:299:3: 'Sequence'
				{
				DebugLocation(299, 3);
				Match(input,92,Follow._92_in_collectionTypeIdentifier1314); 
				DebugLocation(299, 15);
				retval.Kind = CollectionKind.Sequence;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:300:3: 'Collection'
				{
				DebugLocation(300, 3);
				Match(input,84,Follow._84_in_collectionTypeIdentifier1321); 
				DebugLocation(300, 16);
				retval.Kind = CollectionKind.Collection;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:301:3: 'OrderedSet'
				{
				DebugLocation(301, 3);
				Match(input,90,Follow._90_in_collectionTypeIdentifier1327); 
				DebugLocation(301, 16);
				retval.Kind = CollectionKind.OrderedSet;

				}
				break;

			}

					retval.Tree = retval.Start;
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionTypeIdentifier", 30);
			LeaveRule("collectionTypeIdentifier", 30);
			LeaveRule_collectionTypeIdentifier();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionTypeIdentifier"); }
		return retval;

	}
	// $ANTLR end "collectionTypeIdentifier"


	partial void EnterRule_collectionLiteralParts();
	partial void LeaveRule_collectionLiteralParts();

	// $ANTLR start "collectionLiteralParts"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:304:1: collectionLiteralParts returns [List<CollectionLiteralPart> Parts = new List<CollectionLiteralPart>();] : ( collectionLiteralPart )* ;
	[GrammarRule("collectionLiteralParts")]
	private List<CollectionLiteralPart> collectionLiteralParts()
	{
		EnterRule_collectionLiteralParts();
		EnterRule("collectionLiteralParts", 31);
		TraceIn("collectionLiteralParts", 31);
		List<CollectionLiteralPart> Parts =  new List<CollectionLiteralPart>();;

		CollectionLiteralPart collectionLiteralPart49 = default(CollectionLiteralPart);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralParts");
		DebugLocation(304, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:306:2: ( ( collectionLiteralPart )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:306:4: ( collectionLiteralPart )*
			{
			DebugLocation(306, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:306:4: ( collectionLiteralPart )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if (((LA40_0>=COLLPART && LA40_0<=COLLPARTRANGE)))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:306:5: collectionLiteralPart
					{
					DebugLocation(306, 5);
					PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts1346);
					collectionLiteralPart49=collectionLiteralPart();
					PopFollow();

					DebugLocation(306, 27);
					Parts.Add(collectionLiteralPart49);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralParts", 31);
			LeaveRule("collectionLiteralParts", 31);
			LeaveRule_collectionLiteralParts();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralParts"); }
		return Parts;

	}
	// $ANTLR end "collectionLiteralParts"


	partial void EnterRule_collectionLiteralPart();
	partial void LeaveRule_collectionLiteralPart();

	// $ANTLR start "collectionLiteralPart"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:309:1: collectionLiteralPart returns [ CollectionLiteralPart Item] : ( ^( COLLPARTRANGE e1= oclExpression e2= oclExpression ) | ^( COLLPART oclExpression ) );
	[GrammarRule("collectionLiteralPart")]
	private CollectionLiteralPart collectionLiteralPart()
	{
		EnterRule_collectionLiteralPart();
		EnterRule("collectionLiteralPart", 32);
		TraceIn("collectionLiteralPart", 32);
		CollectionLiteralPart Item = default(CollectionLiteralPart);

		OclExpression e1 = default(OclExpression);
		OclExpression e2 = default(OclExpression);
		OclExpression oclExpression50 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralPart");
		DebugLocation(309, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:311:2: ( ^( COLLPARTRANGE e1= oclExpression e2= oclExpression ) | ^( COLLPART oclExpression ) )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==COLLPARTRANGE))
			{
				alt41 = 1;
			}
			else if ((LA41_0==COLLPART))
			{
				alt41 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:312:2: ^( COLLPARTRANGE e1= oclExpression e2= oclExpression )
				{
				DebugLocation(312, 2);
				DebugLocation(312, 4);
				Match(input,COLLPARTRANGE,Follow._COLLPARTRANGE_in_collectionLiteralPart1371); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(312, 20);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1375);
				e1=oclExpression();
				PopFollow();

				DebugLocation(312, 37);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1379);
				e2=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(312, 53);
				Item =new AST.CollectionRange(e1,e2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:313:3: ^( COLLPART oclExpression )
				{
				DebugLocation(313, 3);
				DebugLocation(313, 5);
				Match(input,COLLPART,Follow._COLLPART_in_collectionLiteralPart1387); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(313, 14);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1389);
				oclExpression50=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(313, 34);
				Item =new AST.CollectionItem(oclExpression50);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralPart", 32);
			LeaveRule("collectionLiteralPart", 32);
			LeaveRule_collectionLiteralPart();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralPart"); }
		return Item;

	}
	// $ANTLR end "collectionLiteralPart"


	partial void EnterRule_primitiveLiteralExp();
	partial void LeaveRule_primitiveLiteralExp();

	// $ANTLR start "primitiveLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:317:1: primitiveLiteralExp returns [LiteralExp Literal] : ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp |tok= 'true' |tok= 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp );
	[GrammarRule("primitiveLiteralExp")]
	private LiteralExp primitiveLiteralExp()
	{
		EnterRule_primitiveLiteralExp();
		EnterRule("primitiveLiteralExp", 33);
		TraceIn("primitiveLiteralExp", 33);
		LiteralExp Literal = default(LiteralExp);

		CommonTree tok = default(CommonTree);
		CommonTree IntegerLiteralExp51 = default(CommonTree);
		CommonTree RealLiteralExp52 = default(CommonTree);
		CommonTree StringLiteralExp53 = default(CommonTree);
		CommonTree UnlimitedNaturalLiteralExp54 = default(CommonTree);
		CommonTree NullLiteralExp55 = default(CommonTree);
		CommonTree InvalidLiteralExp56 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "primitiveLiteralExp");
		DebugLocation(317, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:319:2: ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp |tok= 'true' |tok= 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp )
			int alt42=8;
			try { DebugEnterDecision(42, false);
			switch (input.LA(1))
			{
			case IntegerLiteralExp:
				{
				alt42 = 1;
				}
				break;
			case RealLiteralExp:
				{
				alt42 = 2;
				}
				break;
			case StringLiteralExp:
				{
				alt42 = 3;
				}
				break;
			case 125:
				{
				alt42 = 4;
				}
				break;
			case 108:
				{
				alt42 = 5;
				}
				break;
			case UnlimitedNaturalLiteralExp:
				{
				alt42 = 6;
				}
				break;
			case NullLiteralExp:
				{
				alt42 = 7;
				}
				break;
			case InvalidLiteralExp:
				{
				alt42 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:319:4: IntegerLiteralExp
				{
				DebugLocation(319, 4);
				IntegerLiteralExp51=(CommonTree)Match(input,IntegerLiteralExp,Follow._IntegerLiteralExp_in_primitiveLiteralExp1415); 
				DebugLocation(319, 25);
				Literal = CreateIntegerLiteral(IntegerLiteralExp51);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:320:4: RealLiteralExp
				{
				DebugLocation(320, 4);
				RealLiteralExp52=(CommonTree)Match(input,RealLiteralExp,Follow._RealLiteralExp_in_primitiveLiteralExp1425); 
				DebugLocation(320, 22);
				Literal = CreateRealLiteral(RealLiteralExp52);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:321:4: StringLiteralExp
				{
				DebugLocation(321, 4);
				StringLiteralExp53=(CommonTree)Match(input,StringLiteralExp,Follow._StringLiteralExp_in_primitiveLiteralExp1435); 
				DebugLocation(321, 24);
				Literal = CreateStringLiteral(StringLiteralExp53);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:322:4: tok= 'true'
				{
				DebugLocation(322, 8);
				tok=(CommonTree)Match(input,125,Follow._125_in_primitiveLiteralExp1449); 
				DebugLocation(322, 21);
				Literal = CreateBooleanLiteral(true,tok);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:323:4: tok= 'false'
				{
				DebugLocation(323, 8);
				tok=(CommonTree)Match(input,108,Follow._108_in_primitiveLiteralExp1464); 
				DebugLocation(323, 22);
				Literal = CreateBooleanLiteral(false,tok);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:324:4: UnlimitedNaturalLiteralExp
				{
				DebugLocation(324, 4);
				UnlimitedNaturalLiteralExp54=(CommonTree)Match(input,UnlimitedNaturalLiteralExp,Follow._UnlimitedNaturalLiteralExp_in_primitiveLiteralExp1475); 
				DebugLocation(324, 31);
				Literal = CreateUnlimitedNaturalLiteral(UnlimitedNaturalLiteralExp54);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:325:4: NullLiteralExp
				{
				DebugLocation(325, 4);
				NullLiteralExp55=(CommonTree)Match(input,NullLiteralExp,Follow._NullLiteralExp_in_primitiveLiteralExp1482); 
				DebugLocation(325, 22);
				Literal = CreateNullLiteral(NullLiteralExp55);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:326:4: InvalidLiteralExp
				{
				DebugLocation(326, 4);
				InvalidLiteralExp56=(CommonTree)Match(input,InvalidLiteralExp,Follow._InvalidLiteralExp_in_primitiveLiteralExp1492); 
				DebugLocation(326, 25);
				Literal = CreateInvalidLiteral(InvalidLiteralExp56);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveLiteralExp", 33);
			LeaveRule("primitiveLiteralExp", 33);
			LeaveRule_primitiveLiteralExp();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveLiteralExp"); }
		return Literal;

	}
	// $ANTLR end "primitiveLiteralExp"


	partial void EnterRule_tupleLiteralExp();
	partial void LeaveRule_tupleLiteralExp();

	// $ANTLR start "tupleLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:329:1: tupleLiteralExp returns [TupleLiteralExp Literal] : ^( TUPLELITERAL variableDeclarationList ) ;
	[GrammarRule("tupleLiteralExp")]
	private TupleLiteralExp tupleLiteralExp()
	{
		EnterRule_tupleLiteralExp();
		EnterRule("tupleLiteralExp", 34);
		TraceIn("tupleLiteralExp", 34);
		TupleLiteralExp Literal = default(TupleLiteralExp);

		CommonTree TUPLELITERAL57 = default(CommonTree);
		List<VariableDeclarationBag> variableDeclarationList58 = default(List<VariableDeclarationBag>);

		try { DebugEnterRule(GrammarFileName, "tupleLiteralExp");
		DebugLocation(329, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:331:2: ( ^( TUPLELITERAL variableDeclarationList ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:331:5: ^( TUPLELITERAL variableDeclarationList )
			{
			DebugLocation(331, 5);
			DebugLocation(331, 7);
			TUPLELITERAL57=(CommonTree)Match(input,TUPLELITERAL,Follow._TUPLELITERAL_in_tupleLiteralExp1516); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(331, 22);
				PushFollow(Follow._variableDeclarationList_in_tupleLiteralExp1520);
				variableDeclarationList58=variableDeclarationList();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
			}
			DebugLocation(331, 48);
			Literal = CreateTupleLiteral(TUPLELITERAL57.Token,variableDeclarationList58);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleLiteralExp", 34);
			LeaveRule("tupleLiteralExp", 34);
			LeaveRule_tupleLiteralExp();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleLiteralExp"); }
		return Literal;

	}
	// $ANTLR end "tupleLiteralExp"


	partial void EnterRule_classLiteralExp();
	partial void LeaveRule_classLiteralExp();

	// $ANTLR start "classLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:334:1: classLiteralExp returns [ClassLiteralExp Literal] : ^( CLASSLITERAL variableDeclarationList pathName ) ;
	[GrammarRule("classLiteralExp")]
	private ClassLiteralExp classLiteralExp()
	{
		EnterRule_classLiteralExp();
		EnterRule("classLiteralExp", 35);
		TraceIn("classLiteralExp", 35);
		ClassLiteralExp Literal = default(ClassLiteralExp);

		CommonTree CLASSLITERAL59 = default(CommonTree);
		List<VariableDeclarationBag> variableDeclarationList60 = default(List<VariableDeclarationBag>);
		List<IToken> pathName61 = default(List<IToken>);

		try { DebugEnterRule(GrammarFileName, "classLiteralExp");
		DebugLocation(334, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:336:2: ( ^( CLASSLITERAL variableDeclarationList pathName ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:336:5: ^( CLASSLITERAL variableDeclarationList pathName )
			{
			DebugLocation(336, 5);
			DebugLocation(336, 7);
			CLASSLITERAL59=(CommonTree)Match(input,CLASSLITERAL,Follow._CLASSLITERAL_in_classLiteralExp1543); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(336, 22);
				PushFollow(Follow._variableDeclarationList_in_classLiteralExp1547);
				variableDeclarationList60=variableDeclarationList();
				PopFollow();

				DebugLocation(336, 46);
				PushFollow(Follow._pathName_in_classLiteralExp1549);
				pathName61=pathName();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
			}
			DebugLocation(336, 56);
			Literal = CreateClassLiteral(CLASSLITERAL59.Token,variableDeclarationList60, pathName61);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classLiteralExp", 35);
			LeaveRule("classLiteralExp", 35);
			LeaveRule_classLiteralExp();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "classLiteralExp"); }
		return Literal;

	}
	// $ANTLR end "classLiteralExp"


	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:339:1: variableDeclaration returns [VariableDeclarationBag Declaration] : ^( DECL SimpleName ( type )? ( oclExpression )? ) ;
	[GrammarRule("variableDeclaration")]
	private VariableDeclarationBag variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 36);
		TraceIn("variableDeclaration", 36);
		VariableDeclarationBag Declaration = default(VariableDeclarationBag);

		CommonTree SimpleName62 = default(CommonTree);
		Classifier type63 = default(Classifier);
		OclExpression oclExpression64 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(339, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:341:2: ( ^( DECL SimpleName ( type )? ( oclExpression )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:341:4: ^( DECL SimpleName ( type )? ( oclExpression )? )
			{
			DebugLocation(341, 4);
			DebugLocation(341, 6);
			Match(input,DECL,Follow._DECL_in_variableDeclaration1569); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(341, 11);
			SimpleName62=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration1571); 
			DebugLocation(341, 22);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:341:22: ( type )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==COLLTYPE||LA43_0==PATH||LA43_0==83||(LA43_0>=85 && LA43_0<=89)||LA43_0==91||(LA43_0>=94 && LA43_0<=96)))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:341:22: type
				{
				DebugLocation(341, 22);
				PushFollow(Follow._type_in_variableDeclaration1573);
				type63=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(341, 28);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:341:28: ( oclExpression )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==CALL||(LA44_0>=CLASSLITERAL && LA44_0<=COLLECTIONLITERAL)||LA44_0==IF||LA44_0==INFIX||LA44_0==LET||LA44_0==MESSAGE||LA44_0==PRIMITIVELITERAL||(LA44_0>=TUPLELITERAL && LA44_0<=UNARY)||(LA44_0>=68 && LA44_0<=69)))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:341:28: oclExpression
				{
				DebugLocation(341, 28);
				PushFollow(Follow._oclExpression_in_variableDeclaration1576);
				oclExpression64=oclExpression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(44); }


			Match(input, TokenTypes.Up, null); 
			DebugLocation(341, 44);
			Declaration = new VariableDeclarationBag(SimpleName62.Text,type63,oclExpression64);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 36);
			LeaveRule("variableDeclaration", 36);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return Declaration;

	}
	// $ANTLR end "variableDeclaration"


	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:344:1: type returns [Classifier Type] : ( pathName | collectionType | tupleType | primitiveType | oclType );
	[GrammarRule("type")]
	private Classifier type()
	{
		EnterRule_type();
		EnterRule("type", 37);
		TraceIn("type", 37);
		Classifier Type = default(Classifier);

		List<IToken> pathName65 = default(List<IToken>);
		CollectionType collectionType66 = default(CollectionType);
		TupleType tupleType67 = default(TupleType);
		Classifier primitiveType68 = default(Classifier);
		Classifier oclType69 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(344, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:346:2: ( pathName | collectionType | tupleType | primitiveType | oclType )
			int alt45=5;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case PATH:
				{
				alt45 = 1;
				}
				break;
			case COLLTYPE:
				{
				alt45 = 2;
				}
				break;
			case 95:
				{
				alt45 = 3;
				}
				break;
			case 83:
			case 85:
			case 91:
			case 94:
			case 96:
				{
				alt45 = 4;
				}
				break;
			case 86:
			case 87:
			case 88:
			case 89:
				{
				alt45 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:346:4: pathName
				{
				DebugLocation(346, 4);
				PushFollow(Follow._pathName_in_type1596);
				pathName65=pathName();
				PopFollow();

				DebugLocation(346, 15);
				Type = ResolveTypePathName(pathName65);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:347:4: collectionType
				{
				DebugLocation(347, 4);
				PushFollow(Follow._collectionType_in_type1605);
				collectionType66=collectionType();
				PopFollow();

				DebugLocation(347, 19);
				Type = collectionType66;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:348:4: tupleType
				{
				DebugLocation(348, 4);
				PushFollow(Follow._tupleType_in_type1613);
				tupleType67=tupleType();
				PopFollow();

				DebugLocation(348, 15);
				Type = tupleType67;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:349:4: primitiveType
				{
				DebugLocation(349, 4);
				PushFollow(Follow._primitiveType_in_type1622);
				primitiveType68=primitiveType();
				PopFollow();

				DebugLocation(349, 18);
				Type = primitiveType68;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:350:4: oclType
				{
				DebugLocation(350, 4);
				PushFollow(Follow._oclType_in_type1630);
				oclType69=oclType();
				PopFollow();

				DebugLocation(350, 13);
				Type = oclType69;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 37);
			LeaveRule("type", 37);
			LeaveRule_type();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return Type;

	}
	// $ANTLR end "type"


	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();

	// $ANTLR start "primitiveType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:353:1: primitiveType returns [Classifier Type] : ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' );
	[GrammarRule("primitiveType")]
	private Classifier primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 38);
		TraceIn("primitiveType", 38);
		Classifier Type = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(353, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:355:2: ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' )
			int alt46=5;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 83:
				{
				alt46 = 1;
				}
				break;
			case 85:
				{
				alt46 = 2;
				}
				break;
			case 91:
				{
				alt46 = 3;
				}
				break;
			case 94:
				{
				alt46 = 4;
				}
				break;
			case 96:
				{
				alt46 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:355:4: 'Boolean'
				{
				DebugLocation(355, 4);
				Match(input,83,Follow._83_in_primitiveType1652); 
				DebugLocation(355, 17);
				Type = TypesTable.Library.Boolean;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:356:4: 'Integer'
				{
				DebugLocation(356, 4);
				Match(input,85,Follow._85_in_primitiveType1664); 
				DebugLocation(356, 17);
				Type = TypesTable.Library.Integer;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:357:4: 'Real'
				{
				DebugLocation(357, 4);
				Match(input,91,Follow._91_in_primitiveType1674); 
				DebugLocation(357, 14);
				Type = TypesTable.Library.Real;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:358:4: 'String'
				{
				DebugLocation(358, 4);
				Match(input,94,Follow._94_in_primitiveType1684); 
				DebugLocation(358, 16);
				Type = TypesTable.Library.String;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:359:4: 'UnlimitedNatural'
				{
				DebugLocation(359, 4);
				Match(input,96,Follow._96_in_primitiveType1694); 
				DebugLocation(359, 23);
				Type = TypesTable.Library.UnlimitedNatural;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 38);
			LeaveRule("primitiveType", 38);
			LeaveRule_primitiveType();
		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return Type;

	}
	// $ANTLR end "primitiveType"


	partial void EnterRule_oclType();
	partial void LeaveRule_oclType();

	// $ANTLR start "oclType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:362:1: oclType returns [Classifier Type] : ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' );
	[GrammarRule("oclType")]
	private Classifier oclType()
	{
		EnterRule_oclType();
		EnterRule("oclType", 39);
		TraceIn("oclType", 39);
		Classifier Type = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "oclType");
		DebugLocation(362, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:364:2: ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' )
			int alt47=4;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case 86:
				{
				alt47 = 1;
				}
				break;
			case 87:
				{
				alt47 = 2;
				}
				break;
			case 88:
				{
				alt47 = 3;
				}
				break;
			case 89:
				{
				alt47 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:364:4: 'OclAny'
				{
				DebugLocation(364, 4);
				Match(input,86,Follow._86_in_oclType1714); 
				DebugLocation(364, 14);
				Type = TypesTable.Library.Any;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:365:4: 'OclInvalid'
				{
				DebugLocation(365, 4);
				Match(input,87,Follow._87_in_oclType1724); 
				DebugLocation(365, 17);
				Type = TypesTable.Library.Invalid;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:366:4: 'OclMessage'
				{
				DebugLocation(366, 4);
				Match(input,88,Follow._88_in_oclType1733); 
				DebugLocation(366, 17);
				Type = TypesTable.Library.Message; throw new System.NotSupportedException();

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:367:4: 'OclVoid'
				{
				DebugLocation(367, 4);
				Match(input,89,Follow._89_in_oclType1742); 
				DebugLocation(367, 15);
				Type = TypesTable.Library.Void;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclType", 39);
			LeaveRule("oclType", 39);
			LeaveRule_oclType();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "oclType"); }
		return Type;

	}
	// $ANTLR end "oclType"


	partial void EnterRule_collectionType();
	partial void LeaveRule_collectionType();

	// $ANTLR start "collectionType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:370:1: collectionType returns [CollectionType Type] : ^( COLLTYPE collectionTypeIdentifier type ) ;
	[GrammarRule("collectionType")]
	private CollectionType collectionType()
	{
		EnterRule_collectionType();
		EnterRule("collectionType", 40);
		TraceIn("collectionType", 40);
		CollectionType Type = default(CollectionType);

		OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier70 = default(OCLAst.collectionTypeIdentifier_return);
		Classifier type71 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "collectionType");
		DebugLocation(370, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:372:2: ( ^( COLLTYPE collectionTypeIdentifier type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:372:4: ^( COLLTYPE collectionTypeIdentifier type )
			{
			DebugLocation(372, 4);
			DebugLocation(372, 7);
			Match(input,COLLTYPE,Follow._COLLTYPE_in_collectionType1765); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(372, 17);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionType1768);
			collectionTypeIdentifier70=collectionTypeIdentifier();
			PopFollow();

			DebugLocation(372, 42);
			PushFollow(Follow._type_in_collectionType1770);
			type71=type();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(372, 48);
			Type = CreateCollectionType((collectionTypeIdentifier70!=null?collectionTypeIdentifier70.Kind:default(CollectionKind)),type71);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionType", 40);
			LeaveRule("collectionType", 40);
			LeaveRule_collectionType();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionType"); }
		return Type;

	}
	// $ANTLR end "collectionType"


	partial void EnterRule_tupleType();
	partial void LeaveRule_tupleType();

	// $ANTLR start "tupleType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:375:1: tupleType returns [TupleType Type] : ^(tuple= 'Tuple' variableDeclarationList ) ;
	[GrammarRule("tupleType")]
	private TupleType tupleType()
	{
		EnterRule_tupleType();
		EnterRule("tupleType", 41);
		TraceIn("tupleType", 41);
		TupleType Type = default(TupleType);

		CommonTree tuple = default(CommonTree);
		List<VariableDeclarationBag> variableDeclarationList72 = default(List<VariableDeclarationBag>);

		try { DebugEnterRule(GrammarFileName, "tupleType");
		DebugLocation(375, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:377:2: ( ^(tuple= 'Tuple' variableDeclarationList ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:377:4: ^(tuple= 'Tuple' variableDeclarationList )
			{
			DebugLocation(377, 4);
			DebugLocation(377, 12);
			tuple=(CommonTree)Match(input,95,Follow._95_in_tupleType1795); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(377, 22);
				PushFollow(Follow._variableDeclarationList_in_tupleType1798);
				variableDeclarationList72=variableDeclarationList();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
			}
			DebugLocation(377, 48);
			Type =CreateTupleType(tuple.Token,variableDeclarationList72);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleType", 41);
			LeaveRule("tupleType", 41);
			LeaveRule_tupleType();
		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleType"); }
		return Type;

	}
	// $ANTLR end "tupleType"


	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:381:1: variableDeclarationList returns [List<VariableDeclarationBag> Declarations =new List<VariableDeclarationBag>()] : ( variableDeclaration )* ;
	[GrammarRule("variableDeclarationList")]
	private List<VariableDeclarationBag> variableDeclarationList()
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 42);
		TraceIn("variableDeclarationList", 42);
		List<VariableDeclarationBag> Declarations = new List<VariableDeclarationBag>();

		VariableDeclarationBag variableDeclaration73 = default(VariableDeclarationBag);

		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(381, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:383:2: ( ( variableDeclaration )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:383:4: ( variableDeclaration )*
			{
			DebugLocation(383, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:383:4: ( variableDeclaration )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==DECL))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:383:6: variableDeclaration
					{
					DebugLocation(383, 6);
					PushFollow(Follow._variableDeclaration_in_variableDeclarationList1821);
					variableDeclaration73=variableDeclaration();
					PopFollow();

					DebugLocation(383, 26);
					Declarations.Add(variableDeclaration73);

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationList", 42);
			LeaveRule("variableDeclarationList", 42);
			LeaveRule_variableDeclarationList();
		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return Declarations;

	}
	// $ANTLR end "variableDeclarationList"


	partial void EnterRule_isMarkedPre();
	partial void LeaveRule_isMarkedPre();

	// $ANTLR start "isMarkedPre"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:385:1: isMarkedPre returns [bool IsPre = false] : ( 'pre' |);
	[GrammarRule("isMarkedPre")]
	private bool isMarkedPre()
	{
		EnterRule_isMarkedPre();
		EnterRule("isMarkedPre", 43);
		TraceIn("isMarkedPre", 43);
		bool IsPre =  false;

		try { DebugEnterRule(GrammarFileName, "isMarkedPre");
		DebugLocation(385, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:387:2: ( 'pre' |)
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==121))
			{
				alt49 = 1;
			}
			else if ((LA49_0==UP))
			{
				alt49 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:387:4: 'pre'
				{
				DebugLocation(387, 4);
				Match(input,121,Follow._121_in_isMarkedPre1842); 
				DebugLocation(387, 10);
				IsPre = true;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:388:4: 
				{
				DebugLocation(388, 4);
				IsPre = false;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("isMarkedPre", 43);
			LeaveRule("isMarkedPre", 43);
			LeaveRule_isMarkedPre();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "isMarkedPre"); }
		return IsPre;

	}
	// $ANTLR end "isMarkedPre"


	partial void EnterRule_letExp();
	partial void LeaveRule_letExp();

	// $ANTLR start "letExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:393:1: letExp returns [OclExpression Expr] : ^( LET d= variableDeclaration expr= oclExpression ) ;
	[GrammarRule("letExp")]
	private OclExpression letExp()
	{
		EnterRule_letExp();
		EnterRule("letExp", 44);
		TraceIn("letExp", 44);
		OclExpression Expr = default(OclExpression);

		CommonTree LET74 = default(CommonTree);
		VariableDeclarationBag d = default(VariableDeclarationBag);
		OclExpression expr = default(OclExpression);


				VariableDeclaration decl= null;
			
		try { DebugEnterRule(GrammarFileName, "letExp");
		DebugLocation(393, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:403:2: ( ^( LET d= variableDeclaration expr= oclExpression ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:403:4: ^( LET d= variableDeclaration expr= oclExpression )
			{
			DebugLocation(403, 4);
			DebugLocation(403, 6);
			LET74=(CommonTree)Match(input,LET,Follow._LET_in_letExp1879); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(403, 12);
			PushFollow(Follow._variableDeclaration_in_letExp1885);
			d=variableDeclaration();
			PopFollow();

			DebugLocation(403, 34);
			decl=LetDecl(LET74.Token,d);
			DebugLocation(404, 8);
			PushFollow(Follow._oclExpression_in_letExp1895);
			expr=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(404, 25);
			Expr = CreateLet(LET74.Token,decl,expr);

			}


					if(decl != null){
						EnvironmentStack.Pop();
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("letExp", 44);
			LeaveRule("letExp", 44);
			LeaveRule_letExp();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "letExp"); }
		return Expr;

	}
	// $ANTLR end "letExp"


	partial void EnterRule_ifExp();
	partial void LeaveRule_ifExp();

	// $ANTLR start "ifExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:407:1: ifExp returns [OclExpression Expr] : ^( IF c= oclExpression t= oclExpression f= oclExpression ) ;
	[GrammarRule("ifExp")]
	private OclExpression ifExp()
	{
		EnterRule_ifExp();
		EnterRule("ifExp", 45);
		TraceIn("ifExp", 45);
		OclExpression Expr = default(OclExpression);

		CommonTree IF75 = default(CommonTree);
		OclExpression c = default(OclExpression);
		OclExpression t = default(OclExpression);
		OclExpression f = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "ifExp");
		DebugLocation(407, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:409:2: ( ^( IF c= oclExpression t= oclExpression f= oclExpression ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:409:4: ^( IF c= oclExpression t= oclExpression f= oclExpression )
			{
			DebugLocation(409, 4);
			DebugLocation(409, 6);
			IF75=(CommonTree)Match(input,IF,Follow._IF_in_ifExp1915); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(409, 10);
			PushFollow(Follow._oclExpression_in_ifExp1919);
			c=oclExpression();
			PopFollow();

			DebugLocation(409, 26);
			PushFollow(Follow._oclExpression_in_ifExp1923);
			t=oclExpression();
			PopFollow();

			DebugLocation(409, 42);
			PushFollow(Follow._oclExpression_in_ifExp1927);
			f=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(409, 58);
			Expr = CreateIf(IF75.Token,c,t,f);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifExp", 45);
			LeaveRule("ifExp", 45);
			LeaveRule_ifExp();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "ifExp"); }
		return Expr;

	}
	// $ANTLR end "ifExp"


	partial void EnterRule_oclMessageExp();
	partial void LeaveRule_oclMessageExp();

	// $ANTLR start "oclMessageExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:412:1: oclMessageExp : ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' );
	[GrammarRule("oclMessageExp")]
	private void oclMessageExp()
	{
		EnterRule_oclMessageExp();
		EnterRule("oclMessageExp", 46);
		TraceIn("oclMessageExp", 46);
		try { DebugEnterRule(GrammarFileName, "oclMessageExp");
		DebugLocation(412, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:413:2: ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==100))
			{
				alt52 = 1;
			}
			else if ((LA52_0==99))
			{
				alt52 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:413:4: '^^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(413, 4);
				Match(input,100,Follow._100_in_oclMessageExp1941); 
				DebugLocation(413, 9);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1943); 
				DebugLocation(413, 20);
				Match(input,63,Follow._63_in_oclMessageExp1945); 
				DebugLocation(413, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:413:24: ( oclMessageArguments )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==CALL||(LA50_0>=CLASSLITERAL && LA50_0<=COLLECTIONLITERAL)||LA50_0==IF||LA50_0==INFIX||LA50_0==LET||LA50_0==MESSAGE||LA50_0==PRIMITIVELITERAL||(LA50_0>=TUPLELITERAL && LA50_0<=UNARY)||(LA50_0>=68 && LA50_0<=69)||LA50_0==80))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:413:24: oclMessageArguments
					{
					DebugLocation(413, 24);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1947);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(413, 45);
				Match(input,64,Follow._64_in_oclMessageExp1950); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:414:4: '^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(414, 4);
				Match(input,99,Follow._99_in_oclMessageExp1955); 
				DebugLocation(414, 8);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1957); 
				DebugLocation(414, 19);
				Match(input,63,Follow._63_in_oclMessageExp1959); 
				DebugLocation(414, 23);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:414:23: ( oclMessageArguments )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==CALL||(LA51_0>=CLASSLITERAL && LA51_0<=COLLECTIONLITERAL)||LA51_0==IF||LA51_0==INFIX||LA51_0==LET||LA51_0==MESSAGE||LA51_0==PRIMITIVELITERAL||(LA51_0>=TUPLELITERAL && LA51_0<=UNARY)||(LA51_0>=68 && LA51_0<=69)||LA51_0==80))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:414:23: oclMessageArguments
					{
					DebugLocation(414, 23);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1961);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(51); }

				DebugLocation(414, 44);
				Match(input,64,Follow._64_in_oclMessageExp1964); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageExp", 46);
			LeaveRule("oclMessageExp", 46);
			LeaveRule_oclMessageExp();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageExp"); }
		return;

	}
	// $ANTLR end "oclMessageExp"


	partial void EnterRule_oclMessageArguments();
	partial void LeaveRule_oclMessageArguments();

	// $ANTLR start "oclMessageArguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:416:1: oclMessageArguments : oclMessageArg ( ',' oclMessageArguments )? ;
	[GrammarRule("oclMessageArguments")]
	private void oclMessageArguments()
	{
		EnterRule_oclMessageArguments();
		EnterRule("oclMessageArguments", 47);
		TraceIn("oclMessageArguments", 47);
		try { DebugEnterRule(GrammarFileName, "oclMessageArguments");
		DebugLocation(416, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:417:2: ( oclMessageArg ( ',' oclMessageArguments )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:417:4: oclMessageArg ( ',' oclMessageArguments )?
			{
			DebugLocation(417, 4);
			PushFollow(Follow._oclMessageArg_in_oclMessageArguments1974);
			oclMessageArg();
			PopFollow();

			DebugLocation(417, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:417:18: ( ',' oclMessageArguments )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==66))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:417:20: ',' oclMessageArguments
				{
				DebugLocation(417, 20);
				Match(input,66,Follow._66_in_oclMessageArguments1978); 
				DebugLocation(417, 24);
				PushFollow(Follow._oclMessageArguments_in_oclMessageArguments1980);
				oclMessageArguments();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArguments", 47);
			LeaveRule("oclMessageArguments", 47);
			LeaveRule_oclMessageArguments();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArguments"); }
		return;

	}
	// $ANTLR end "oclMessageArguments"


	partial void EnterRule_oclMessageArg();
	partial void LeaveRule_oclMessageArg();

	// $ANTLR start "oclMessageArg"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:420:1: oclMessageArg : ( '?' ( ':' type )? | oclExpression );
	[GrammarRule("oclMessageArg")]
	private void oclMessageArg()
	{
		EnterRule_oclMessageArg();
		EnterRule("oclMessageArg", 48);
		TraceIn("oclMessageArg", 48);
		try { DebugEnterRule(GrammarFileName, "oclMessageArg");
		DebugLocation(420, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:421:2: ( '?' ( ':' type )? | oclExpression )
			int alt55=2;
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==80))
			{
				alt55 = 1;
			}
			else if ((LA55_0==CALL||(LA55_0>=CLASSLITERAL && LA55_0<=COLLECTIONLITERAL)||LA55_0==IF||LA55_0==INFIX||LA55_0==LET||LA55_0==MESSAGE||LA55_0==PRIMITIVELITERAL||(LA55_0>=TUPLELITERAL && LA55_0<=UNARY)||(LA55_0>=68 && LA55_0<=69)))
			{
				alt55 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:421:4: '?' ( ':' type )?
				{
				DebugLocation(421, 4);
				Match(input,80,Follow._80_in_oclMessageArg1995); 
				DebugLocation(421, 8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:421:8: ( ':' type )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==71))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:421:9: ':' type
					{
					DebugLocation(421, 9);
					Match(input,71,Follow._71_in_oclMessageArg1998); 
					DebugLocation(421, 13);
					PushFollow(Follow._type_in_oclMessageArg2000);
					type();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:422:4: oclExpression
				{
				DebugLocation(422, 4);
				PushFollow(Follow._oclExpression_in_oclMessageArg2007);
				oclExpression();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArg", 48);
			LeaveRule("oclMessageArg", 48);
			LeaveRule_oclMessageArg();
		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArg"); }
		return;

	}
	// $ANTLR end "oclMessageArg"


	partial void EnterRule_inToken();
	partial void LeaveRule_inToken();

	// $ANTLR start "inToken"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:428:1: inToken : ( 'implies' | 'xor' | 'or' | 'and' | '=' | '<>' | '<' | '<=' | '>' | '>=' | '+' | '-' | '*' | '/' );
	[GrammarRule("inToken")]
	private void inToken()
	{
		EnterRule_inToken();
		EnterRule("inToken", 49);
		TraceIn("inToken", 49);
		try { DebugEnterRule(GrammarFileName, "inToken");
		DebugLocation(428, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:429:2: ( 'implies' | 'xor' | 'or' | 'and' | '=' | '<>' | '<' | '<=' | '>' | '>=' | '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:
			{
			DebugLocation(429, 2);
			if (input.LA(1)==UnlimitedNaturalLiteralExp||input.LA(1)==65||input.LA(1)==67||input.LA(1)==70||(input.LA(1)>=74 && input.LA(1)<=79)||input.LA(1)==101||input.LA(1)==110||input.LA(1)==119||input.LA(1)==126)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inToken", 49);
			LeaveRule("inToken", 49);
			LeaveRule_inToken();
		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "inToken"); }
		return;

	}
	// $ANTLR end "inToken"


	partial void EnterRule_unToken();
	partial void LeaveRule_unToken();

	// $ANTLR start "unToken"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:445:1: unToken : ( 'not' | '-' );
	[GrammarRule("unToken")]
	private void unToken()
	{
		EnterRule_unToken();
		EnterRule("unToken", 50);
		TraceIn("unToken", 50);
		try { DebugEnterRule(GrammarFileName, "unToken");
		DebugLocation(445, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:446:2: ( 'not' | '-' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:
			{
			DebugLocation(446, 2);
			if (input.LA(1)==67||input.LA(1)==118)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unToken", 50);
			LeaveRule("unToken", 50);
			LeaveRule_unToken();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "unToken"); }
		return;

	}
	// $ANTLR end "unToken"
	#endregion Rules


	#region DFA
	private DFA8 dfa8;
	private DFA24 dfa24;
	private DFA26 dfa26;
	private DFA31 dfa31;
	private DFA38 dfa38;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8( this );
		dfa24 = new DFA24( this );
		dfa26 = new DFA26( this );
		dfa31 = new DFA31( this );
		dfa38 = new DFA38( this );
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x9\xFFFF";
		private const string DFA8_eofS =
			"\x9\xFFFF";
		private const string DFA8_minS =
			"\x1\xA\x1\x2\x1\x2E\x1\x2\x1\x35\x2\x3\x2\xFFFF";
		private const string DFA8_maxS =
			"\x1\xA\x1\x2\x1\x2E\x1\x2\x3\x35\x2\xFFFF";
		private const string DFA8_acceptS =
			"\x7\xFFFF\x1\x1\x1\x2";
		private const string DFA8_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x3",
				"\x1\x4",
				"\x1\x5",
				"\x1\x6\x31\xFFFF\x1\x5",
				"\x1\x7\x31\xFFFF\x1\x8",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "81:1: classifierContextHead returns [Classifier Context, VariableDeclaration Self] : ( ^( CLASSIFIERHEAD pathName ) | ^( CLASSIFIERHEAD pathName SimpleName ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\x9\xFFFF";
		private const string DFA24_eofS =
			"\x9\xFFFF";
		private const string DFA24_minS =
			"\x1\x7\x1\x2\x1\x2E\x1\x2\x1\x35\x2\x3\x2\xFFFF";
		private const string DFA24_maxS =
			"\x1\x7\x1\x2\x1\x2E\x1\x2\x2\x35\x1\x79\x2\xFFFF";
		private const string DFA24_acceptS =
			"\x7\xFFFF\x1\x1\x1\x2";
		private const string DFA24_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x3",
				"\x1\x4",
				"\x1\x5",
				"\x1\x6\x31\xFFFF\x1\x5",
				"\x1\x7\x1\xFFFF\x1\x8\x73\xFFFF\x1\x7",
				"",
				""
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "138:62: (res= propertyCall |res= operationCall )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\x10\xFFFF";
		private const string DFA26_eofS =
			"\x10\xFFFF";
		private const string DFA26_minS =
			"\x1\x7\x7\xFFFF\x1\x2\x1\x2E\x1\x2\x1\x35\x2\x3\x2\xFFFF";
		private const string DFA26_maxS =
			"\x1\x39\x7\xFFFF\x1\x2\x1\x2E\x1\x2\x2\x35\x1\x79\x2\xFFFF";
		private const string DFA26_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x6\xFFFF\x1\x8\x1"+
			"\x9";
		private const string DFA26_specialS =
			"\x10\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x8\x3\xFFFF\x1\x3\x1\x1\xE\xFFFF\x1\x6\x7\xFFFF\x1\x7\xD\xFFFF\x1"+
				"\x4\x6\xFFFF\x1\x2\x1\x5",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x9",
				"\x1\xA",
				"\x1\xB",
				"\x1\xC",
				"\x1\xD\x31\xFFFF\x1\xC",
				"\x1\xE\x1\xFFFF\x1\xF\x73\xFFFF\x1\xE",
				"",
				""
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "145:1: primaryExperession returns [OclExpression Expr] : ( collectionLiteralExp | tupleLiteralExp | classLiteralExp | ^( PRIMITIVELITERAL primitiveLiteralExp ) | ^( TYPE type ) | ifExp | letExp | ^( CALL pathName isMarkedPre ) | ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA31 : DFA
	{
		private const string DFA31_eotS =
			"\x9\xFFFF";
		private const string DFA31_eofS =
			"\x9\xFFFF";
		private const string DFA31_minS =
			"\x1\x2E\x1\x2\x1\x35\x1\x3\x1\x5\x1\x2\x1\x3\x2\xFFFF";
		private const string DFA31_maxS =
			"\x1\x2E\x1\x2\x2\x35\x1\x5\x1\x3\x1\x45\x2\xFFFF";
		private const string DFA31_acceptS =
			"\x7\xFFFF\x1\x2\x1\x1";
		private const string DFA31_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA31_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x3",
				"\x1\x4\x31\xFFFF\x1\x3",
				"\x1\x5",
				"\x1\x6\x1\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x3\xFFFF\x2\x7\xE\xFFFF\x1\x7\x1\xFFFF\x1\x7\x5"+
				"\xFFFF\x1\x7\x1\xFFFF\x1\x7\xB\xFFFF\x1\x7\x6\xFFFF\x3\x7\x1\xFFFF\x1"+
				"\x8\x7\xFFFF\x2\x7",
				"",
				""
			};

		private static readonly short[] DFA31_eot = DFA.UnpackEncodedString(DFA31_eotS);
		private static readonly short[] DFA31_eof = DFA.UnpackEncodedString(DFA31_eofS);
		private static readonly char[] DFA31_min = DFA.UnpackEncodedStringToUnsignedChars(DFA31_minS);
		private static readonly char[] DFA31_max = DFA.UnpackEncodedStringToUnsignedChars(DFA31_maxS);
		private static readonly short[] DFA31_accept = DFA.UnpackEncodedString(DFA31_acceptS);
		private static readonly short[] DFA31_special = DFA.UnpackEncodedString(DFA31_specialS);
		private static readonly short[][] DFA31_transition;

		static DFA31()
		{
			int numStates = DFA31_transitionS.Length;
			DFA31_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA31_transition[i] = DFA.UnpackEncodedString(DFA31_transitionS[i]);
			}
		}

		public DFA31( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 31;
			this.eot = DFA31_eot;
			this.eof = DFA31_eof;
			this.min = DFA31_min;
			this.max = DFA31_max;
			this.accept = DFA31_accept;
			this.special = DFA31_special;
			this.transition = DFA31_transition;
		}

		public override string Description { get { return "204:1: iteratorCall returns [OclExpression Expr] : ( pathName ^( ARGS ^( VARDECL typedefs ) args= arguments ) | pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\xA\xFFFF";
		private const string DFA38_eofS =
			"\xA\xFFFF";
		private const string DFA38_minS =
			"\x1\xC\x1\x2\x1\x52\x5\x3\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\xC\x1\x2\x1\x5D\x5\x60\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x8\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x4\x1\xFFFF\x1\x6\x5\xFFFF\x1\x7\x1\xFFFF\x1\x5\x1\x3",
				"\x1\x8\xA\xFFFF\x2\x8\x1\x9\x1D\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\xA\xFFFF\x2\x8\x1\x9\x1D\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\xA\xFFFF\x2\x8\x1\x9\x1D\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\xA\xFFFF\x2\x8\x1\x9\x1D\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\xA\xFFFF\x2\x8\x1\x9\x1D\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "278:1: collectionLiteralExp returns [OclExpression Expr] : ( ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _EVOLUTIONHEAD_in_evolutionDeclarationList77 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_evolutionDeclarationList79 = new BitSet(new ulong[]{0x4100000000208UL});
		public static readonly BitSet _contextDeclarationE_in_evolutionDeclarationList83 = new BitSet(new ulong[]{0x4100000000208UL});
		public static readonly BitSet _CONDITION_in_contextDeclarationList118 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _contextDeclaration_in_contextDeclarationList120 = new BitSet(new ulong[]{0x4100000000208UL});
		public static readonly BitSet _propertyContextDecl_in_contextDeclaration133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextDecl_in_contextDeclaration141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextDecl_in_contextDeclaration147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyContextDecl_in_contextDeclarationE157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextDecl_in_contextDeclarationE165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextDecl_in_contextDeclarationE171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROPERTYCONDITION_in_propertyContextDecl196 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyContextHead_in_propertyContextDecl198 = new BitSet(new ulong[]{0x40200008UL});
		public static readonly BitSet _initOrDerValue_in_propertyContextDecl201 = new BitSet(new ulong[]{0x40200008UL});
		public static readonly BitSet _PROPERTYHEAD_in_propertyContextHead232 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead235 = new BitSet(new ulong[]{0x20400000010000UL,0x1CBE80000UL});
		public static readonly BitSet _type_in_propertyContextHead241 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASSIFIERCONDITION_in_classifierContextDecl271 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _classifierContextHead_in_classifierContextDecl273 = new BitSet(new ulong[]{0x80100008UL});
		public static readonly BitSet _invOrDef_in_classifierContextDecl276 = new BitSet(new ulong[]{0x80100008UL});
		public static readonly BitSet _CLASSIFIERHEAD_in_classifierContextHead299 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_classifierContextHead301 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASSIFIERHEAD_in_classifierContextHead310 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_classifierContextHead312 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _SimpleName_in_classifierContextHead314 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INIT_in_initOrDerValue333 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue339 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DERIVATE_in_initOrDerValue347 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue349 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INV_in_invOrDef365 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_invOrDef367 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_invOrDef374 = new BitSet(new ulong[]{0x2000000008UL});
		public static readonly BitSet _MESSAGE_in_invOrDef380 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_invOrDef386 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DEF_in_invOrDef401 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _123_in_invOrDef403 = new BitSet(new ulong[]{0x20000000080000UL});
		public static readonly BitSet _SimpleName_in_invOrDef406 = new BitSet(new ulong[]{0x20000000080000UL});
		public static readonly BitSet _defExpression_in_invOrDef409 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OPERATIONCONDITION_in_operationContextDecl423 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _operationContextHead_in_operationContextDecl425 = new BitSet(new ulong[]{0x1800000000048UL});
		public static readonly BitSet _prePostOrBodyDecl_in_operationContextDecl427 = new BitSet(new ulong[]{0x1800000000048UL});
		public static readonly BitSet _OPERATIONHEAD_in_operationContextHead440 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _operation_in_operationContextHead442 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_in_prePostOrBodyDecl455 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl457 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl460 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_in_prePostOrBodyDecl466 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl468 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl471 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BODY_in_prePostOrBodyDecl477 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl479 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl482 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OPERATION_in_operation494 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_operation496 = new BitSet(new ulong[]{0x400000090008UL,0x1CBE80000UL});
		public static readonly BitSet _parameters_in_operation498 = new BitSet(new ulong[]{0x400000010008UL,0x1CBE80000UL});
		public static readonly BitSet _type_in_operation501 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _variableDeclaration_in_parameters513 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _variableDeclaration_in_parameters516 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _variableDeclaration_in_defExpression529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECL_in_defExpression535 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _operation_in_defExpression537 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_defExpression539 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INFIX_in_oclExpression565 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression570 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_oclExpression574 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_in_oclExpression582 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression587 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _69_in_oclExpression596 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression600 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _propertyCall_in_oclExpression606 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _operationCall_in_oclExpression612 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _68_in_oclExpression621 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression625 = new BitSet(new ulong[]{0x100000080UL});
		public static readonly BitSet _itCall_in_oclExpression629 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MESSAGE_in_oclExpression638 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclMessageExp_in_oclExpression640 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primaryExperession_in_oclExpression646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralExp_in_primaryExperession679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleLiteralExp_in_primaryExperession690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classLiteralExp_in_primaryExperession701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIMITIVELITERAL_in_primaryExperession713 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveLiteralExp_in_primaryExperession715 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TYPE_in_primaryExperession729 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_primaryExperession731 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ifExp_in_primaryExperession738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _letExp_in_primaryExperession744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CALL_in_primaryExperession753 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_primaryExperession755 = new BitSet(new ulong[]{0x8UL,0x200000000000000UL});
		public static readonly BitSet _isMarkedPre_in_primaryExperession757 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_primaryExperession768 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_primaryExperession770 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_primaryExperession773 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arguments_in_primaryExperession778 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _isMarkedPre_in_primaryExperession782 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_propertyCall807 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_propertyCall809 = new BitSet(new ulong[]{0x8UL,0x200000000000000UL});
		public static readonly BitSet _isMarkedPre_in_propertyCall811 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_operationCall835 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_operationCall837 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_operationCall841 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arguments_in_operationCall847 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARGS_in_operationCall850 = new BitSet(new ulong[]{0x8UL,0x200000000000000UL});
		public static readonly BitSet _isMarkedPre_in_operationCall856 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_itCall894 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _iteratorCall_in_itCall896 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _iterateCall_in_itCall904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_iteratorCall922 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_iteratorCall925 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _VARDECL_in_iteratorCall928 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _typedefs_in_iteratorCall930 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arguments_in_iteratorCall937 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _pathName_in_iteratorCall946 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _implicitVarDecl_in_iteratorCall962 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_iteratorCall978 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arguments_in_iteratorCall985 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARGS_in_iteratorCall988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ITERATE_in_iterateCall1012 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _typedef_in_iterateCall1021 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _implicitVarDecl_in_iterateCall1027 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACC_in_iterateCall1034 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_iterateCall1040 = new BitSet(new ulong[]{0x702402828011880UL,0x1CBE80030UL});
		public static readonly BitSet _type_in_iterateCall1047 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_iterateCall1055 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _oclExpression_in_iterateCall1067 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _oclExpression_in_arguments1097 = new BitSet(new ulong[]{0x702002828001882UL,0x30UL});
		public static readonly BitSet _typedef_in_typedefs1145 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _DECL_in_typedef1164 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_typedef1166 = new BitSet(new ulong[]{0x400000010008UL,0x1CBE80000UL});
		public static readonly BitSet _type_in_typedef1168 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PATH_in_pathName1217 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_pathName1220 = new BitSet(new ulong[]{0x20000000000008UL});
		public static readonly BitSet _COLLECTIONLITERAL_in_collectionLiteralExp1247 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp1249 = new BitSet(new ulong[]{0xC008UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1251 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _COLLECTIONLITERAL_in_collectionLiteralExp1266 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp1268 = new BitSet(new ulong[]{0x400000010000UL,0x1CBE80000UL});
		public static readonly BitSet _type_in_collectionLiteralExp1270 = new BitSet(new ulong[]{0xC008UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1272 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _93_in_collectionTypeIdentifier1302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_collectionTypeIdentifier1308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_collectionTypeIdentifier1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_collectionTypeIdentifier1321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_collectionTypeIdentifier1327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts1346 = new BitSet(new ulong[]{0xC002UL});
		public static readonly BitSet _COLLPARTRANGE_in_collectionLiteralPart1371 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1375 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1379 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _COLLPART_in_collectionLiteralPart1387 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1389 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IntegerLiteralExp_in_primitiveLiteralExp1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealLiteralExp_in_primitiveLiteralExp1425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteralExp_in_primitiveLiteralExp1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_primitiveLiteralExp1449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_primitiveLiteralExp1464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnlimitedNaturalLiteralExp_in_primitiveLiteralExp1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NullLiteralExp_in_primitiveLiteralExp1482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _InvalidLiteralExp_in_primitiveLiteralExp1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TUPLELITERAL_in_tupleLiteralExp1516 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarationList_in_tupleLiteralExp1520 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASSLITERAL_in_classLiteralExp1543 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarationList_in_classLiteralExp1547 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _pathName_in_classLiteralExp1549 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DECL_in_variableDeclaration1569 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration1571 = new BitSet(new ulong[]{0x702402828011888UL,0x1CBE80030UL});
		public static readonly BitSet _type_in_variableDeclaration1573 = new BitSet(new ulong[]{0x702002828001888UL,0x30UL});
		public static readonly BitSet _oclExpression_in_variableDeclaration1576 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _pathName_in_type1596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_type1605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_type1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_type1622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_type1630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_primitiveType1652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_primitiveType1664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_primitiveType1674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_primitiveType1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_primitiveType1694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_oclType1714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_oclType1724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_oclType1733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_oclType1742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLLTYPE_in_collectionType1765 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionType1768 = new BitSet(new ulong[]{0x400000010000UL,0x1CBE80000UL});
		public static readonly BitSet _type_in_collectionType1770 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _95_in_tupleType1795 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarationList_in_tupleType1798 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList1821 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _121_in_isMarkedPre1842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LET_in_letExp1879 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclaration_in_letExp1885 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_letExp1895 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IF_in_ifExp1915 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_ifExp1919 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_ifExp1923 = new BitSet(new ulong[]{0x702002828001880UL,0x30UL});
		public static readonly BitSet _oclExpression_in_ifExp1927 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _100_in_oclMessageExp1941 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1943 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_oclMessageExp1945 = new BitSet(new ulong[]{0x702002828001880UL,0x10031UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1947 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_oclMessageExp1950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_oclMessageExp1955 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1957 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_oclMessageExp1959 = new BitSet(new ulong[]{0x702002828001880UL,0x10031UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1961 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_oclMessageExp1964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclMessageArg_in_oclMessageArguments1974 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_oclMessageArguments1978 = new BitSet(new ulong[]{0x702002828001880UL,0x10030UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageArguments1980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_oclMessageArg1995 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_oclMessageArg1998 = new BitSet(new ulong[]{0x400000010000UL,0x1CBE80000UL});
		public static readonly BitSet _type_in_oclMessageArg2000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_oclMessageArg2007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_inToken2020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_unToken2096 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace Exolutio.Model.OCL.Compiler
