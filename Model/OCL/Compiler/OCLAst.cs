//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3 2012-03-28 21:33:10

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using Exolutio.Model.OCL.AST;
using Exolutio.Model.OCL.Types;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLAst : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACC", "ARGS", "BODY", "CALL", "CALLARGS", "CLASSIFIERCONDITION", "CLASSIFIERHEAD", "COLLECTIONLITERAL", "COLLECTIONTYPE", "COLLPART", "COLLPARTRANGE", "COLLTYPE", "CONDITION", "Char", "DECL", "DEF", "DERIVATE", "DoubleDot", "EscapeSequence", "ExponentPart", "Hex", "IF", "INDEX", "INFIX", "INIT", "INV", "ITERATE", "IntegerLiteralExp", "InvalidLiteralExp", "LET", "LINE_COMMENT", "MESSAGE", "NESTED_ML_COMMENT", "NameChar", "NameStartChar", "NullLiteralExp", "Num", "OPERATION", "OPERATIONCONDITION", "OPERATIONHEAD", "PATH", "POST", "PRE", "PRIMITIVELITERAL", "PROPERTYCONDITION", "PROPERTYHEAD", "RealLiteralExp", "SimpleName", "StringChar", "StringLiteralExp", "TUPLELITERAL", "TYPE", "UNARY", "UnlimitedNaturalLiteralExp", "VARDECL", "WS", "WhiteSpaceChar", "'('", "')'", "'+'", "','", "'-'", "'->'", "'.'", "'/'", "':'", "'::'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'?'", "'@'", "'Bag'", "'Boolean'", "'Collection'", "'Integer'", "'OclAny'", "'OclInvalid'", "'OclMessage'", "'OclVoid'", "'OrderedSet'", "'Real'", "'Sequence'", "'Set'", "'String'", "'Tuple'", "'UnlimitedNatural'", "'['", "']'", "'^'", "'^^'", "'and'", "'body'", "'context'", "'def'", "'derivate'", "'else'", "'endif'", "'false'", "'if'", "'implies'", "'in'", "'init'", "'inv'", "'iterate'", "'let'", "'message'", "'not'", "'or'", "'post'", "'pre'", "'static'", "'then'", "'true'", "'xor'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int ACC=4;
	public const int ARGS=5;
	public const int BODY=6;
	public const int CALL=7;
	public const int CALLARGS=8;
	public const int CLASSIFIERCONDITION=9;
	public const int CLASSIFIERHEAD=10;
	public const int COLLECTIONLITERAL=11;
	public const int COLLECTIONTYPE=12;
	public const int COLLPART=13;
	public const int COLLPARTRANGE=14;
	public const int COLLTYPE=15;
	public const int CONDITION=16;
	public const int Char=17;
	public const int DECL=18;
	public const int DEF=19;
	public const int DERIVATE=20;
	public const int DoubleDot=21;
	public const int EscapeSequence=22;
	public const int ExponentPart=23;
	public const int Hex=24;
	public const int IF=25;
	public const int INDEX=26;
	public const int INFIX=27;
	public const int INIT=28;
	public const int INV=29;
	public const int ITERATE=30;
	public const int IntegerLiteralExp=31;
	public const int InvalidLiteralExp=32;
	public const int LET=33;
	public const int LINE_COMMENT=34;
	public const int MESSAGE=35;
	public const int NESTED_ML_COMMENT=36;
	public const int NameChar=37;
	public const int NameStartChar=38;
	public const int NullLiteralExp=39;
	public const int Num=40;
	public const int OPERATION=41;
	public const int OPERATIONCONDITION=42;
	public const int OPERATIONHEAD=43;
	public const int PATH=44;
	public const int POST=45;
	public const int PRE=46;
	public const int PRIMITIVELITERAL=47;
	public const int PROPERTYCONDITION=48;
	public const int PROPERTYHEAD=49;
	public const int RealLiteralExp=50;
	public const int SimpleName=51;
	public const int StringChar=52;
	public const int StringLiteralExp=53;
	public const int TUPLELITERAL=54;
	public const int TYPE=55;
	public const int UNARY=56;
	public const int UnlimitedNaturalLiteralExp=57;
	public const int VARDECL=58;
	public const int WS=59;
	public const int WhiteSpaceChar=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;

	// delegates
	// delegators

	public OCLAst( ITreeNodeStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public OCLAst(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
		

	public override string[] TokenNames { get { return OCLAst.tokenNames; } }
	public override string GrammarFileName { get { return "..\\..\\Model\\OCL\\Grammar\\OCLAst.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	protected sealed partial class contextDeclarationList_scope
	{
		public Constraints Conts;

		public contextDeclarationList_scope(OCLAst grammar) { OnCreated(grammar); }
		partial void OnCreated(OCLAst grammar);
	}
	partial void contextDeclarationList_scopeInit( contextDeclarationList_scope scope );
	partial void contextDeclarationList_scopeAfter( contextDeclarationList_scope scope );
	protected readonly Stack<contextDeclarationList_scope> contextDeclarationList_stack = new Stack<contextDeclarationList_scope>();


	partial void EnterRule_contextDeclarationList();
	partial void LeaveRule_contextDeclarationList();

	// $ANTLR start "contextDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:19:1: public contextDeclarationList returns [Constraints Constraints] : ^( CONDITION ( contextDeclaration )* ) ;
	[GrammarRule("contextDeclarationList")]
	public Constraints contextDeclarationList()
	{
		EnterRule_contextDeclarationList();
		EnterRule("contextDeclarationList", 1);
		TraceIn("contextDeclarationList", 1);
		contextDeclarationList_stack.Push(new contextDeclarationList_scope(this));contextDeclarationList_scopeInit(contextDeclarationList_stack.Peek());
		Constraints Constraints = default(Constraints);

		contextDeclarationList_stack.Peek().Conts =  new Constraints();
		try { DebugEnterRule(GrammarFileName, "contextDeclarationList");
		DebugLocation(19, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:26:2: ( ^( CONDITION ( contextDeclaration )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:26:4: ^( CONDITION ( contextDeclaration )* )
			{
			DebugLocation(26, 4);
			DebugLocation(26, 6);
			Match(input,CONDITION,Follow._CONDITION_in_contextDeclarationList76); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(26, 16);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:26:16: ( contextDeclaration )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==CLASSIFIERCONDITION||LA1_0==OPERATIONCONDITION||LA1_0==PROPERTYCONDITION))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:26:16: contextDeclaration
						{
						DebugLocation(26, 16);
						PushFollow(Follow._contextDeclaration_in_contextDeclarationList78);
						contextDeclaration();
						PopFollow();


						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}

			}

			Constraints = contextDeclarationList_stack.Peek().Conts;
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contextDeclarationList", 1);
			LeaveRule("contextDeclarationList", 1);
			LeaveRule_contextDeclarationList();
			contextDeclarationList_scopeAfter(contextDeclarationList_stack.Peek());contextDeclarationList_stack.Pop();
		}
		DebugLocation(27, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclarationList"); }
		return Constraints;

	}
	// $ANTLR end "contextDeclarationList"


	partial void EnterRule_contextDeclaration();
	partial void LeaveRule_contextDeclaration();

	// $ANTLR start "contextDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:29:1: contextDeclaration : ( propertyContextDecl | classifierContextDecl | operationContextDecl );
	[GrammarRule("contextDeclaration")]
	private void contextDeclaration()
	{
		EnterRule_contextDeclaration();
		EnterRule("contextDeclaration", 2);
		TraceIn("contextDeclaration", 2);
		ClassifierConstraint classifierContextDecl1 = default(ClassifierConstraint);

		try { DebugEnterRule(GrammarFileName, "contextDeclaration");
		DebugLocation(29, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:30:2: ( propertyContextDecl | classifierContextDecl | operationContextDecl )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case PROPERTYCONDITION:
				{
				alt2 = 1;
				}
				break;
			case CLASSIFIERCONDITION:
				{
				alt2 = 2;
				}
				break;
			case OPERATIONCONDITION:
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:30:3: propertyContextDecl
				{
				DebugLocation(30, 3);
				PushFollow(Follow._propertyContextDecl_in_contextDeclaration91);
				propertyContextDecl();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:31:3: classifierContextDecl
				{
				DebugLocation(31, 3);
				PushFollow(Follow._classifierContextDecl_in_contextDeclaration95);
				classifierContextDecl1=classifierContextDecl();
				PopFollow();

				DebugLocation(31, 25);
				contextDeclarationList_stack.Peek().Conts.Classifiers.Add(classifierContextDecl1);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:32:3: operationContextDecl
				{
				DebugLocation(32, 3);
				PushFollow(Follow._operationContextDecl_in_contextDeclaration101);
				operationContextDecl();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contextDeclaration", 2);
			LeaveRule("contextDeclaration", 2);
			LeaveRule_contextDeclaration();
		}
		DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclaration"); }
		return;

	}
	// $ANTLR end "contextDeclaration"


	partial void EnterRule_propertyContextDecl();
	partial void LeaveRule_propertyContextDecl();

	// $ANTLR start "propertyContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:35:1: propertyContextDecl : ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) ;
	[GrammarRule("propertyContextDecl")]
	private void propertyContextDecl()
	{
		EnterRule_propertyContextDecl();
		EnterRule("propertyContextDecl", 3);
		TraceIn("propertyContextDecl", 3);
		try { DebugEnterRule(GrammarFileName, "propertyContextDecl");
		DebugLocation(35, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:36:2: ( ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:36:3: ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* )
			{
			DebugLocation(36, 3);
			DebugLocation(36, 5);
			Match(input,PROPERTYCONDITION,Follow._PROPERTYCONDITION_in_propertyContextDecl112); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(36, 23);
			PushFollow(Follow._propertyContextHead_in_propertyContextDecl114);
			propertyContextHead();
			PopFollow();

			DebugLocation(36, 43);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:36:43: ( initOrDerValue )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==DERIVATE||LA3_0==INIT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:36:43: initOrDerValue
					{
					DebugLocation(36, 43);
					PushFollow(Follow._initOrDerValue_in_propertyContextDecl116);
					initOrDerValue();
					PopFollow();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyContextDecl", 3);
			LeaveRule("propertyContextDecl", 3);
			LeaveRule_propertyContextDecl();
		}
		DebugLocation(37, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextDecl"); }
		return;

	}
	// $ANTLR end "propertyContextDecl"


	partial void EnterRule_propertyContextHead();
	partial void LeaveRule_propertyContextHead();

	// $ANTLR start "propertyContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:39:1: propertyContextHead : ^( PROPERTYHEAD ( SimpleName )+ type ) ;
	[GrammarRule("propertyContextHead")]
	private void propertyContextHead()
	{
		EnterRule_propertyContextHead();
		EnterRule("propertyContextHead", 4);
		TraceIn("propertyContextHead", 4);
		try { DebugEnterRule(GrammarFileName, "propertyContextHead");
		DebugLocation(39, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:2: ( ^( PROPERTYHEAD ( SimpleName )+ type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:3: ^( PROPERTYHEAD ( SimpleName )+ type )
			{
			DebugLocation(40, 3);
			DebugLocation(40, 5);
			Match(input,PROPERTYHEAD,Follow._PROPERTYHEAD_in_propertyContextHead129); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(40, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:18: ( SimpleName )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==SimpleName))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:40:18: SimpleName
					{
					DebugLocation(40, 18);
					Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead131); 

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(40, 30);
			PushFollow(Follow._type_in_propertyContextHead134);
			type();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyContextHead", 4);
			LeaveRule("propertyContextHead", 4);
			LeaveRule_propertyContextHead();
		}
		DebugLocation(41, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextHead"); }
		return;

	}
	// $ANTLR end "propertyContextHead"


	partial void EnterRule_operationContextDecl();
	partial void LeaveRule_operationContextDecl();

	// $ANTLR start "operationContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:43:1: operationContextDecl : ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) ;
	[GrammarRule("operationContextDecl")]
	private void operationContextDecl()
	{
		EnterRule_operationContextDecl();
		EnterRule("operationContextDecl", 5);
		TraceIn("operationContextDecl", 5);
		try { DebugEnterRule(GrammarFileName, "operationContextDecl");
		DebugLocation(43, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:44:2: ( ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:44:3: ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* )
			{
			DebugLocation(44, 3);
			DebugLocation(44, 5);
			Match(input,OPERATIONCONDITION,Follow._OPERATIONCONDITION_in_operationContextDecl146); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(44, 24);
			PushFollow(Follow._operationContextHead_in_operationContextDecl148);
			operationContextHead();
			PopFollow();

			DebugLocation(44, 45);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:44:45: ( prePostOrBodyDecl )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==BODY||(LA5_0>=POST && LA5_0<=PRE)))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:44:45: prePostOrBodyDecl
					{
					DebugLocation(44, 45);
					PushFollow(Follow._prePostOrBodyDecl_in_operationContextDecl150);
					prePostOrBodyDecl();
					PopFollow();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationContextDecl", 5);
			LeaveRule("operationContextDecl", 5);
			LeaveRule_operationContextDecl();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextDecl"); }
		return;

	}
	// $ANTLR end "operationContextDecl"


	partial void EnterRule_operationContextHead();
	partial void LeaveRule_operationContextHead();

	// $ANTLR start "operationContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:47:1: operationContextHead : ^( OPERATIONHEAD operation ) ;
	[GrammarRule("operationContextHead")]
	private void operationContextHead()
	{
		EnterRule_operationContextHead();
		EnterRule("operationContextHead", 6);
		TraceIn("operationContextHead", 6);
		try { DebugEnterRule(GrammarFileName, "operationContextHead");
		DebugLocation(47, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:48:2: ( ^( OPERATIONHEAD operation ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:48:3: ^( OPERATIONHEAD operation )
			{
			DebugLocation(48, 3);
			DebugLocation(48, 5);
			Match(input,OPERATIONHEAD,Follow._OPERATIONHEAD_in_operationContextHead163); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(48, 19);
			PushFollow(Follow._operation_in_operationContextHead165);
			operation();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationContextHead", 6);
			LeaveRule("operationContextHead", 6);
			LeaveRule_operationContextHead();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextHead"); }
		return;

	}
	// $ANTLR end "operationContextHead"


	partial void EnterRule_classifierContextDecl();
	partial void LeaveRule_classifierContextDecl();

	// $ANTLR start "classifierContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:51:1: classifierContextDecl returns [ClassifierConstraint Decl] : ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) ;
	[GrammarRule("classifierContextDecl")]
	private ClassifierConstraint classifierContextDecl()
	{
		EnterRule_classifierContextDecl();
		EnterRule("classifierContextDecl", 7);
		TraceIn("classifierContextDecl", 7);
		ClassifierConstraint Decl = default(ClassifierConstraint);

		InvariantWithMessage invOrDef2 = default(InvariantWithMessage);
		OCLAst.classifierContextHead_return classifierContextHead3 = default(OCLAst.classifierContextHead_return);

		List<InvariantWithMessage> invs=new List<InvariantWithMessage>(); 
		try { DebugEnterRule(GrammarFileName, "classifierContextDecl");
		DebugLocation(51, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:55:2: ( ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:55:4: ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* )
			{
			DebugLocation(55, 4);
			DebugLocation(55, 6);
			Match(input,CLASSIFIERCONDITION,Follow._CLASSIFIERCONDITION_in_classifierContextDecl192); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(55, 26);
			PushFollow(Follow._classifierContextHead_in_classifierContextDecl194);
			classifierContextHead3=classifierContextHead();
			PopFollow();

			DebugLocation(55, 48);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:55:48: ( invOrDef )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==DEF||LA6_0==INV))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:55:49: invOrDef
					{
					DebugLocation(55, 49);
					PushFollow(Follow._invOrDef_in_classifierContextDecl197);
					invOrDef2=invOrDef();
					PopFollow();

					DebugLocation(55, 58);
					invs.Add(invOrDef2);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			Match(input, TokenTypes.Up, null); 
			DebugLocation(55, 95);
			Decl = new ClassifierConstraint((classifierContextHead3!=null?classifierContextHead3.Context:default(Classifier)),invs,(classifierContextHead3!=null?classifierContextHead3.Self:default(VariableDeclaration)));

			}

			EnvironmentStack.Pop();EnvironmentStack.Pop();
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classifierContextDecl", 7);
			LeaveRule("classifierContextDecl", 7);
			LeaveRule_classifierContextDecl();
		}
		DebugLocation(56, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextDecl"); }
		return Decl;

	}
	// $ANTLR end "classifierContextDecl"

	private sealed partial class classifierContextHead_return : TreeRuleReturnScope<CommonTree>
	{
		public Classifier Context;
		public VariableDeclaration Self;
		public classifierContextHead_return(OCLAst grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLAst grammar);
	}

	partial void EnterRule_classifierContextHead();
	partial void LeaveRule_classifierContextHead();

	// $ANTLR start "classifierContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:58:1: classifierContextHead returns [Classifier Context, VariableDeclaration Self] : ( ^( CLASSIFIERHEAD pathName ) | ^( CLASSIFIERHEAD pathName SimpleName ) );
	[GrammarRule("classifierContextHead")]
	private OCLAst.classifierContextHead_return classifierContextHead()
	{
		EnterRule_classifierContextHead();
		EnterRule("classifierContextHead", 8);
		TraceIn("classifierContextHead", 8);
		OCLAst.classifierContextHead_return retval = new OCLAst.classifierContextHead_return(this);
		retval.Start = (CommonTree)input.LT(1);

		CommonTree SimpleName6 = default(CommonTree);
		List<IToken> pathName4 = default(List<IToken>);
		List<IToken> pathName5 = default(List<IToken>);

		try { DebugEnterRule(GrammarFileName, "classifierContextHead");
		DebugLocation(58, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:60:2: ( ^( CLASSIFIERHEAD pathName ) | ^( CLASSIFIERHEAD pathName SimpleName ) )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			try
			{
				alt7 = dfa7.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:60:3: ^( CLASSIFIERHEAD pathName )
				{
				DebugLocation(60, 3);
				DebugLocation(60, 5);
				Match(input,CLASSIFIERHEAD,Follow._CLASSIFIERHEAD_in_classifierContextHead220); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(60, 20);
				PushFollow(Follow._pathName_in_classifierContextHead222);
				pathName4=pathName();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(60, 31);
				retval.Context =ClassifierContextHead(pathName4,VariableDeclaration.SELF,out retval.Self);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:61:3: ^( CLASSIFIERHEAD pathName SimpleName )
				{
				DebugLocation(61, 3);
				DebugLocation(61, 5);
				Match(input,CLASSIFIERHEAD,Follow._CLASSIFIERHEAD_in_classifierContextHead231); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 20);
				PushFollow(Follow._pathName_in_classifierContextHead233);
				pathName5=pathName();
				PopFollow();

				DebugLocation(61, 29);
				SimpleName6=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_classifierContextHead235); 

				Match(input, TokenTypes.Up, null); 
				DebugLocation(61, 42);
				retval.Context =ClassifierContextHead(pathName5,SimpleName6.Text,out retval.Self);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classifierContextHead", 8);
			LeaveRule("classifierContextHead", 8);
			LeaveRule_classifierContextHead();
		}
		DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextHead"); }
		return retval;

	}
	// $ANTLR end "classifierContextHead"


	partial void EnterRule_initOrDerValue();
	partial void LeaveRule_initOrDerValue();

	// $ANTLR start "initOrDerValue"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:64:1: initOrDerValue : ( ^( INIT oclExpression ) | ^( DERIVATE oclExpression ) );
	[GrammarRule("initOrDerValue")]
	private void initOrDerValue()
	{
		EnterRule_initOrDerValue();
		EnterRule("initOrDerValue", 9);
		TraceIn("initOrDerValue", 9);
		try { DebugEnterRule(GrammarFileName, "initOrDerValue");
		DebugLocation(64, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:65:2: ( ^( INIT oclExpression ) | ^( DERIVATE oclExpression ) )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==INIT))
			{
				alt8 = 1;
			}
			else if ((LA8_0==DERIVATE))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:65:3: ^( INIT oclExpression )
				{
				DebugLocation(65, 3);
				DebugLocation(65, 5);
				Match(input,INIT,Follow._INIT_in_initOrDerValue250); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(65, 10);
				PushFollow(Follow._oclExpression_in_initOrDerValue252);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:66:3: ^( DERIVATE oclExpression )
				{
				DebugLocation(66, 3);
				DebugLocation(66, 5);
				Match(input,DERIVATE,Follow._DERIVATE_in_initOrDerValue258); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(66, 14);
				PushFollow(Follow._oclExpression_in_initOrDerValue260);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("initOrDerValue", 9);
			LeaveRule("initOrDerValue", 9);
			LeaveRule_initOrDerValue();
		}
		DebugLocation(67, 1);
		} finally { DebugExitRule(GrammarFileName, "initOrDerValue"); }
		return;

	}
	// $ANTLR end "initOrDerValue"


	partial void EnterRule_invOrDef();
	partial void LeaveRule_invOrDef();

	// $ANTLR start "invOrDef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:69:1: invOrDef returns [InvariantWithMessage Constraint] : ( ^( INV ( SimpleName )? inv= oclExpression ( MESSAGE msgExp= oclExpression )? ) | ^( DEF ( 'static' )? ( SimpleName )? defExpression ) );
	[GrammarRule("invOrDef")]
	private InvariantWithMessage invOrDef()
	{
		EnterRule_invOrDef();
		EnterRule("invOrDef", 10);
		TraceIn("invOrDef", 10);
		InvariantWithMessage Constraint = default(InvariantWithMessage);

		OclExpression inv = default(OclExpression);
		OclExpression msgExp = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "invOrDef");
		DebugLocation(69, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:2: ( ^( INV ( SimpleName )? inv= oclExpression ( MESSAGE msgExp= oclExpression )? ) | ^( DEF ( 'static' )? ( SimpleName )? defExpression ) )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==INV))
			{
				alt13 = 1;
			}
			else if ((LA13_0==DEF))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:3: ^( INV ( SimpleName )? inv= oclExpression ( MESSAGE msgExp= oclExpression )? )
				{
				DebugLocation(71, 3);
				DebugLocation(71, 5);
				Match(input,INV,Follow._INV_in_invOrDef276); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(71, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:9: ( SimpleName )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==SimpleName))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:71:9: SimpleName
					{
					DebugLocation(71, 9);
					Match(input,SimpleName,Follow._SimpleName_in_invOrDef278); 

					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(71, 25);
				PushFollow(Follow._oclExpression_in_invOrDef285);
				inv=oclExpression();
				PopFollow();

				DebugLocation(72, 3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:72:3: ( MESSAGE msgExp= oclExpression )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==MESSAGE))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:72:4: MESSAGE msgExp= oclExpression
					{
					DebugLocation(72, 4);
					Match(input,MESSAGE,Follow._MESSAGE_in_invOrDef291); 
					DebugLocation(72, 19);
					PushFollow(Follow._oclExpression_in_invOrDef297);
					msgExp=oclExpression();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); 
				DebugLocation(73, 6);
				Constraint =new InvariantWithMessage(inv,msgExp); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:74:4: ^( DEF ( 'static' )? ( SimpleName )? defExpression )
				{
				DebugLocation(74, 4);
				DebugLocation(74, 6);
				Match(input,DEF,Follow._DEF_in_invOrDef312); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(74, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:74:10: ( 'static' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==119))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:74:10: 'static'
					{
					DebugLocation(74, 10);
					Match(input,119,Follow._119_in_invOrDef314); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(74, 20);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:74:20: ( SimpleName )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==SimpleName))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:74:20: SimpleName
					{
					DebugLocation(74, 20);
					Match(input,SimpleName,Follow._SimpleName_in_invOrDef317); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(74, 32);
				PushFollow(Follow._defExpression_in_invOrDef320);
				defExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(74, 47);
				Errors.AddError(new ErrorItem("Definition of new property/operation do not supported."));

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("invOrDef", 10);
			LeaveRule("invOrDef", 10);
			LeaveRule_invOrDef();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "invOrDef"); }
		return Constraint;

	}
	// $ANTLR end "invOrDef"


	partial void EnterRule_prePostOrBodyDecl();
	partial void LeaveRule_prePostOrBodyDecl();

	// $ANTLR start "prePostOrBodyDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:77:1: prePostOrBodyDecl : ( ^( PRE ( SimpleName )? oclExpression ) | ^( POST ( SimpleName )? oclExpression ) | ^( BODY ( SimpleName )? oclExpression ) );
	[GrammarRule("prePostOrBodyDecl")]
	private void prePostOrBodyDecl()
	{
		EnterRule_prePostOrBodyDecl();
		EnterRule("prePostOrBodyDecl", 11);
		TraceIn("prePostOrBodyDecl", 11);
		try { DebugEnterRule(GrammarFileName, "prePostOrBodyDecl");
		DebugLocation(77, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:2: ( ^( PRE ( SimpleName )? oclExpression ) | ^( POST ( SimpleName )? oclExpression ) | ^( BODY ( SimpleName )? oclExpression ) )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case PRE:
				{
				alt17 = 1;
				}
				break;
			case POST:
				{
				alt17 = 2;
				}
				break;
			case BODY:
				{
				alt17 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:3: ^( PRE ( SimpleName )? oclExpression )
				{
				DebugLocation(78, 3);
				DebugLocation(78, 5);
				Match(input,PRE,Follow._PRE_in_prePostOrBodyDecl334); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(78, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:9: ( SimpleName )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==SimpleName))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:78:9: SimpleName
					{
					DebugLocation(78, 9);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl336); 

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(78, 21);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl339);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:79:3: ^( POST ( SimpleName )? oclExpression )
				{
				DebugLocation(79, 3);
				DebugLocation(79, 5);
				Match(input,POST,Follow._POST_in_prePostOrBodyDecl345); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(79, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:79:10: ( SimpleName )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==SimpleName))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:79:10: SimpleName
					{
					DebugLocation(79, 10);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl347); 

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(79, 22);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl350);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:80:3: ^( BODY ( SimpleName )? oclExpression )
				{
				DebugLocation(80, 3);
				DebugLocation(80, 5);
				Match(input,BODY,Follow._BODY_in_prePostOrBodyDecl356); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(80, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:80:10: ( SimpleName )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==SimpleName))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:80:10: SimpleName
					{
					DebugLocation(80, 10);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl358); 

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(80, 22);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl361);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prePostOrBodyDecl", 11);
			LeaveRule("prePostOrBodyDecl", 11);
			LeaveRule_prePostOrBodyDecl();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "prePostOrBodyDecl"); }
		return;

	}
	// $ANTLR end "prePostOrBodyDecl"


	partial void EnterRule_operation();
	partial void LeaveRule_operation();

	// $ANTLR start "operation"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:84:1: operation : ^( OPERATION pathName ( parameters )? ( type )? ) ;
	[GrammarRule("operation")]
	private void operation()
	{
		EnterRule_operation();
		EnterRule("operation", 12);
		TraceIn("operation", 12);
		try { DebugEnterRule(GrammarFileName, "operation");
		DebugLocation(84, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:85:2: ( ^( OPERATION pathName ( parameters )? ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:85:3: ^( OPERATION pathName ( parameters )? ( type )? )
			{
			DebugLocation(85, 3);
			DebugLocation(85, 5);
			Match(input,OPERATION,Follow._OPERATION_in_operation374); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(85, 15);
			PushFollow(Follow._pathName_in_operation376);
			pathName();
			PopFollow();

			DebugLocation(85, 24);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:85:24: ( parameters )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==DECL))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:85:24: parameters
				{
				DebugLocation(85, 24);
				PushFollow(Follow._parameters_in_operation378);
				parameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(85, 36);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:85:36: ( type )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==COLLTYPE||LA19_0==PATH||LA19_0==81||(LA19_0>=83 && LA19_0<=87)||LA19_0==89||(LA19_0>=92 && LA19_0<=94)))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:85:36: type
				{
				DebugLocation(85, 36);
				PushFollow(Follow._type_in_operation381);
				type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operation", 12);
			LeaveRule("operation", 12);
			LeaveRule_operation();
		}
		DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "operation"); }
		return;

	}
	// $ANTLR end "operation"


	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();

	// $ANTLR start "parameters"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:88:1: parameters : variableDeclaration ( variableDeclaration )* ;
	[GrammarRule("parameters")]
	private void parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 13);
		TraceIn("parameters", 13);
		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(88, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:89:2: ( variableDeclaration ( variableDeclaration )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:89:3: variableDeclaration ( variableDeclaration )*
			{
			DebugLocation(89, 3);
			PushFollow(Follow._variableDeclaration_in_parameters393);
			variableDeclaration();
			PopFollow();

			DebugLocation(89, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:89:23: ( variableDeclaration )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==DECL))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:89:24: variableDeclaration
					{
					DebugLocation(89, 24);
					PushFollow(Follow._variableDeclaration_in_parameters396);
					variableDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameters", 13);
			LeaveRule("parameters", 13);
			LeaveRule_parameters();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return;

	}
	// $ANTLR end "parameters"


	partial void EnterRule_defExpression();
	partial void LeaveRule_defExpression();

	// $ANTLR start "defExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:92:1: defExpression : ( variableDeclaration | ^( DECL operation oclExpression ) );
	[GrammarRule("defExpression")]
	private void defExpression()
	{
		EnterRule_defExpression();
		EnterRule("defExpression", 14);
		TraceIn("defExpression", 14);
		try { DebugEnterRule(GrammarFileName, "defExpression");
		DebugLocation(92, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:93:2: ( variableDeclaration | ^( DECL operation oclExpression ) )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==DECL))
			{
				int LA21_1 = input.LA(2);

				if ((LA21_1==DOWN))
				{
					int LA21_2 = input.LA(3);

					if ((LA21_2==SimpleName))
					{
						alt21 = 1;
					}
					else if ((LA21_2==OPERATION))
					{
						alt21 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 21, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:93:4: variableDeclaration
				{
				DebugLocation(93, 4);
				PushFollow(Follow._variableDeclaration_in_defExpression409);
				variableDeclaration();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:94:4: ^( DECL operation oclExpression )
				{
				DebugLocation(94, 4);
				DebugLocation(94, 6);
				Match(input,DECL,Follow._DECL_in_defExpression415); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(94, 11);
				PushFollow(Follow._operation_in_defExpression417);
				operation();
				PopFollow();

				DebugLocation(94, 21);
				PushFollow(Follow._oclExpression_in_defExpression419);
				oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defExpression", 14);
			LeaveRule("defExpression", 14);
			LeaveRule_defExpression();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "defExpression"); }
		return;

	}
	// $ANTLR end "defExpression"

	protected sealed partial class oclExpression_scope
	{
		public OclExpression RootExpr;

		public oclExpression_scope(OCLAst grammar) { OnCreated(grammar); }
		partial void OnCreated(OCLAst grammar);
	}
	partial void oclExpression_scopeInit( oclExpression_scope scope );
	partial void oclExpression_scopeAfter( oclExpression_scope scope );
	protected readonly Stack<oclExpression_scope> oclExpression_stack = new Stack<oclExpression_scope>();


	partial void EnterRule_oclExpression();
	partial void LeaveRule_oclExpression();

	// $ANTLR start "oclExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:100:1: public oclExpression returns [OclExpression Expr] : ( ^( INFIX e1= oclExpression e2= oclExpression ) | ^( UNARY e= oclExpression ) | ^( '.' e= oclExpression (res= propertyCall |res= operationCall ) ) | ^( '->' e= oclExpression ( itCall ) ) | ^( MESSAGE oclMessageExp ) | primaryExperession );
	[GrammarRule("oclExpression")]
	public OclExpression oclExpression()
	{
		EnterRule_oclExpression();
		EnterRule("oclExpression", 15);
		TraceIn("oclExpression", 15);
		oclExpression_stack.Push(new oclExpression_scope(this));oclExpression_scopeInit(oclExpression_stack.Peek());
		OclExpression Expr = default(OclExpression);

		CommonTree INFIX7 = default(CommonTree);
		CommonTree UNARY8 = default(CommonTree);
		OclExpression e1 = default(OclExpression);
		OclExpression e2 = default(OclExpression);
		OclExpression e = default(OclExpression);
		OclExpression res = default(OclExpression);
		OclExpression itCall9 = default(OclExpression);
		OclExpression primaryExperession10 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "oclExpression");
		DebugLocation(100, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:105:2: ( ^( INFIX e1= oclExpression e2= oclExpression ) | ^( UNARY e= oclExpression ) | ^( '.' e= oclExpression (res= propertyCall |res= operationCall ) ) | ^( '->' e= oclExpression ( itCall ) ) | ^( MESSAGE oclMessageExp ) | primaryExperession )
			int alt23=6;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case INFIX:
				{
				alt23 = 1;
				}
				break;
			case UNARY:
				{
				alt23 = 2;
				}
				break;
			case 67:
				{
				alt23 = 3;
				}
				break;
			case 66:
				{
				alt23 = 4;
				}
				break;
			case MESSAGE:
				{
				alt23 = 5;
				}
				break;
			case CALL:
			case COLLECTIONLITERAL:
			case IF:
			case LET:
			case PRIMITIVELITERAL:
			case TUPLELITERAL:
			case TYPE:
				{
				alt23 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:105:3: ^( INFIX e1= oclExpression e2= oclExpression )
				{
				DebugLocation(105, 3);
				DebugLocation(105, 5);
				INFIX7=(CommonTree)Match(input,INFIX,Follow._INFIX_in_oclExpression445); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(105, 14);
				PushFollow(Follow._oclExpression_in_oclExpression450);
				e1=oclExpression();
				PopFollow();

				DebugLocation(105, 31);
				PushFollow(Follow._oclExpression_in_oclExpression454);
				e2=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(105, 47);
				Expr = InfixOperation(e1,INFIX7,e2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:106:3: ^( UNARY e= oclExpression )
				{
				DebugLocation(106, 3);
				DebugLocation(106, 5);
				UNARY8=(CommonTree)Match(input,UNARY,Follow._UNARY_in_oclExpression462); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(106, 13);
				PushFollow(Follow._oclExpression_in_oclExpression467);
				e=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(106, 30);
				Expr = UnaryOperation(UNARY8.Token,e);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:107:3: ^( '.' e= oclExpression (res= propertyCall |res= operationCall ) )
				{
				DebugLocation(107, 3);
				DebugLocation(107, 5);
				Match(input,67,Follow._67_in_oclExpression476); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(107, 10);
				PushFollow(Follow._oclExpression_in_oclExpression480);
				e=oclExpression();
				PopFollow();

				DebugLocation(107, 24);
				oclExpression_stack.Peek().RootExpr =  e;
				DebugLocation(107, 62);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:107:62: (res= propertyCall |res= operationCall )
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				try
				{
					alt22 = dfa22.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:107:63: res= propertyCall
					{
					DebugLocation(107, 66);
					PushFollow(Follow._propertyCall_in_oclExpression486);
					res=propertyCall();
					PopFollow();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:107:82: res= operationCall
					{
					DebugLocation(107, 85);
					PushFollow(Follow._operationCall_in_oclExpression492);
					res=operationCall();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				Match(input, TokenTypes.Up, null); 
				DebugLocation(107, 102);
				Expr =res;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:108:3: ^( '->' e= oclExpression ( itCall ) )
				{
				DebugLocation(108, 3);
				DebugLocation(108, 5);
				Match(input,66,Follow._66_in_oclExpression501); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(108, 11);
				PushFollow(Follow._oclExpression_in_oclExpression505);
				e=oclExpression();
				PopFollow();

				DebugLocation(108, 25);
				oclExpression_stack.Peek().RootExpr =  e;
				DebugLocation(108, 63);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:108:63: ( itCall )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:108:64: itCall
				{
				DebugLocation(108, 64);
				PushFollow(Follow._itCall_in_oclExpression509);
				itCall9=itCall();
				PopFollow();


				}


				Match(input, TokenTypes.Up, null); 
				DebugLocation(108, 73);
				Expr =itCall9;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:109:3: ^( MESSAGE oclMessageExp )
				{
				DebugLocation(109, 3);
				DebugLocation(109, 5);
				Match(input,MESSAGE,Follow._MESSAGE_in_oclExpression518); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(109, 13);
				PushFollow(Follow._oclMessageExp_in_oclExpression520);
				oclMessageExp();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:110:4: primaryExperession
				{
				DebugLocation(110, 4);
				PushFollow(Follow._primaryExperession_in_oclExpression526);
				primaryExperession10=primaryExperession();
				PopFollow();

				DebugLocation(110, 23);
				Expr = primaryExperession10; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclExpression", 15);
			LeaveRule("oclExpression", 15);
			LeaveRule_oclExpression();
			oclExpression_scopeAfter(oclExpression_stack.Peek());oclExpression_stack.Pop();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "oclExpression"); }
		return Expr;

	}
	// $ANTLR end "oclExpression"


	partial void EnterRule_primaryExperession();
	partial void LeaveRule_primaryExperession();

	// $ANTLR start "primaryExperession"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:114:1: primaryExperession returns [OclExpression Expr] : ( collectionLiteralExp | tupleLiteralExp | ^( PRIMITIVELITERAL primitiveLiteralExp ) | ^( TYPE type ) | ifExp | letExp | ^( CALL pathName isMarkedPre ) | ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre ) );
	[GrammarRule("primaryExperession")]
	private OclExpression primaryExperession()
	{
		EnterRule_primaryExperession();
		EnterRule("primaryExperession", 16);
		TraceIn("primaryExperession", 16);
		OclExpression Expr = default(OclExpression);

		CommonTree TYPE15 = default(CommonTree);
		List<OclExpression> args = default(List<OclExpression>);
		OclExpression collectionLiteralExp11 = default(OclExpression);
		TupleLiteralExp tupleLiteralExp12 = default(TupleLiteralExp);
		LiteralExp primitiveLiteralExp13 = default(LiteralExp);
		Classifier type14 = default(Classifier);
		OclExpression ifExp16 = default(OclExpression);
		OclExpression letExp17 = default(OclExpression);
		List<IToken> pathName18 = default(List<IToken>);
		bool isMarkedPre19 = default(bool);
		List<IToken> pathName20 = default(List<IToken>);
		bool isMarkedPre21 = default(bool);

		try { DebugEnterRule(GrammarFileName, "primaryExperession");
		DebugLocation(114, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:116:2: ( collectionLiteralExp | tupleLiteralExp | ^( PRIMITIVELITERAL primitiveLiteralExp ) | ^( TYPE type ) | ifExp | letExp | ^( CALL pathName isMarkedPre ) | ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre ) )
			int alt24=8;
			try { DebugEnterDecision(24, false);
			try
			{
				alt24 = dfa24.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:121:3: collectionLiteralExp
				{
				DebugLocation(121, 3);
				PushFollow(Follow._collectionLiteralExp_in_primaryExperession559);
				collectionLiteralExp11=collectionLiteralExp();
				PopFollow();

				DebugLocation(121, 24);
				Expr = collectionLiteralExp11;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:123:3: tupleLiteralExp
				{
				DebugLocation(123, 3);
				PushFollow(Follow._tupleLiteralExp_in_primaryExperession570);
				tupleLiteralExp12=tupleLiteralExp();
				PopFollow();

				DebugLocation(123, 19);
				Expr = tupleLiteralExp12;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:125:3: ^( PRIMITIVELITERAL primitiveLiteralExp )
				{
				DebugLocation(125, 3);
				DebugLocation(125, 5);
				Match(input,PRIMITIVELITERAL,Follow._PRIMITIVELITERAL_in_primaryExperession582); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(125, 22);
				PushFollow(Follow._primitiveLiteralExp_in_primaryExperession584);
				primitiveLiteralExp13=primitiveLiteralExp();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(125, 43);
				Expr = primitiveLiteralExp13;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:128:3: ^( TYPE type )
				{
				DebugLocation(128, 3);
				DebugLocation(128, 5);
				TYPE15=(CommonTree)Match(input,TYPE,Follow._TYPE_in_primaryExperession598); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(128, 10);
				PushFollow(Follow._type_in_primaryExperession600);
				type14=type();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(128, 16);
				 Expr = new TypeExp(type14,TypesTable.Library.Type).SetCodeSource(new CodeSource(TYPE15));

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:129:3: ifExp
				{
				DebugLocation(129, 3);
				PushFollow(Follow._ifExp_in_primaryExperession607);
				ifExp16=ifExp();
				PopFollow();

				DebugLocation(129, 9);
				Expr = ifExp16;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:130:3: letExp
				{
				DebugLocation(130, 3);
				PushFollow(Follow._letExp_in_primaryExperession613);
				letExp17=letExp();
				PopFollow();

				DebugLocation(130, 10);
				Expr = letExp17;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:132:3: ^( CALL pathName isMarkedPre )
				{
				DebugLocation(132, 3);
				DebugLocation(132, 5);
				Match(input,CALL,Follow._CALL_in_primaryExperession622); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(132, 10);
				PushFollow(Follow._pathName_in_primaryExperession624);
				pathName18=pathName();
				PopFollow();

				DebugLocation(132, 19);
				PushFollow(Follow._isMarkedPre_in_primaryExperession626);
				isMarkedPre19=isMarkedPre();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(132, 32);
				Expr = ResolvePath(pathName18, isMarkedPre19);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:134:4: ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre )
				{
				DebugLocation(134, 4);
				DebugLocation(134, 6);
				Match(input,CALL,Follow._CALL_in_primaryExperession637); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(134, 11);
				PushFollow(Follow._pathName_in_primaryExperession639);
				pathName20=pathName();
				PopFollow();

				DebugLocation(134, 20);
				DebugLocation(134, 22);
				Match(input,ARGS,Follow._ARGS_in_primaryExperession642); 

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(134, 32);
					PushFollow(Follow._arguments_in_primaryExperession647);
					args=arguments();
					PopFollow();


					Match(input, TokenTypes.Up, null); 
				}
				DebugLocation(134, 45);
				PushFollow(Follow._isMarkedPre_in_primaryExperession651);
				isMarkedPre21=isMarkedPre();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(135, 3);
				Expr = ResolveImplicitOperation(pathName20,isMarkedPre21,args);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExperession", 16);
			LeaveRule("primaryExperession", 16);
			LeaveRule_primaryExperession();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExperession"); }
		return Expr;

	}
	// $ANTLR end "primaryExperession"


	partial void EnterRule_propertyCall();
	partial void LeaveRule_propertyCall();

	// $ANTLR start "propertyCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:139:1: propertyCall returns [OclExpression Expr] : ^( CALL pathName isMarkedPre ) ;
	[GrammarRule("propertyCall")]
	private OclExpression propertyCall()
	{
		EnterRule_propertyCall();
		EnterRule("propertyCall", 17);
		TraceIn("propertyCall", 17);
		OclExpression Expr = default(OclExpression);

		List<IToken> pathName22 = default(List<IToken>);
		bool isMarkedPre23 = default(bool);

		try { DebugEnterRule(GrammarFileName, "propertyCall");
		DebugLocation(139, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:141:2: ( ^( CALL pathName isMarkedPre ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:141:5: ^( CALL pathName isMarkedPre )
			{
			DebugLocation(141, 5);
			DebugLocation(141, 7);
			Match(input,CALL,Follow._CALL_in_propertyCall676); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(141, 12);
			PushFollow(Follow._pathName_in_propertyCall678);
			pathName22=pathName();
			PopFollow();

			DebugLocation(141, 21);
			PushFollow(Follow._isMarkedPre_in_propertyCall680);
			isMarkedPre23=isMarkedPre();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(142, 3);
			Expr = ProcessPropertyCall(oclExpression_stack.Peek().RootExpr,pathName22,isMarkedPre23);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyCall", 17);
			LeaveRule("propertyCall", 17);
			LeaveRule_propertyCall();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCall"); }
		return Expr;

	}
	// $ANTLR end "propertyCall"


	partial void EnterRule_operationCall();
	partial void LeaveRule_operationCall();

	// $ANTLR start "operationCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:146:1: operationCall returns [OclExpression Expr] : ^( CALL pathName ( ^( ARGS args= arguments ) | ARGS ) pre= isMarkedPre ) ;
	[GrammarRule("operationCall")]
	private OclExpression operationCall()
	{
		EnterRule_operationCall();
		EnterRule("operationCall", 18);
		TraceIn("operationCall", 18);
		OclExpression Expr = default(OclExpression);

		List<OclExpression> args = default(List<OclExpression>);
		bool pre = default(bool);
		List<IToken> pathName24 = default(List<IToken>);

		try { DebugEnterRule(GrammarFileName, "operationCall");
		DebugLocation(146, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:148:2: ( ^( CALL pathName ( ^( ARGS args= arguments ) | ARGS ) pre= isMarkedPre ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:148:4: ^( CALL pathName ( ^( ARGS args= arguments ) | ARGS ) pre= isMarkedPre )
			{
			DebugLocation(148, 4);
			DebugLocation(148, 6);
			Match(input,CALL,Follow._CALL_in_operationCall704); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(148, 11);
			PushFollow(Follow._pathName_in_operationCall706);
			pathName24=pathName();
			PopFollow();

			DebugLocation(148, 20);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:148:20: ( ^( ARGS args= arguments ) | ARGS )
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==ARGS))
			{
				int LA25_1 = input.LA(2);

				if ((LA25_1==DOWN))
				{
					alt25 = 1;
				}
				else if ((LA25_1==UP||LA25_1==118))
				{
					alt25 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:148:21: ^( ARGS args= arguments )
				{
				DebugLocation(148, 21);
				DebugLocation(148, 23);
				Match(input,ARGS,Follow._ARGS_in_operationCall710); 

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(148, 33);
					PushFollow(Follow._arguments_in_operationCall716);
					args=arguments();
					PopFollow();


					Match(input, TokenTypes.Up, null); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:148:46: ARGS
				{
				DebugLocation(148, 46);
				Match(input,ARGS,Follow._ARGS_in_operationCall719); 

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(148, 56);
			PushFollow(Follow._isMarkedPre_in_operationCall725);
			pre=isMarkedPre();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(149, 3);
			Expr = ProcessOperationCall(oclExpression_stack.Peek().RootExpr,pathName24,pre,args);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationCall", 18);
			LeaveRule("operationCall", 18);
			LeaveRule_operationCall();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "operationCall"); }
		return Expr;

	}
	// $ANTLR end "operationCall"

	protected sealed partial class itCall_scope
	{
		public int PushedVar;

		public itCall_scope(OCLAst grammar) { OnCreated(grammar); }
		partial void OnCreated(OCLAst grammar);
	}
	partial void itCall_scopeInit( itCall_scope scope );
	partial void itCall_scopeAfter( itCall_scope scope );
	protected readonly Stack<itCall_scope> itCall_stack = new Stack<itCall_scope>();


	partial void EnterRule_itCall();
	partial void LeaveRule_itCall();

	// $ANTLR start "itCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:153:1: itCall returns [OclExpression Expr] : ( ^( CALL iteratorCall ) | iterateCall );
	[GrammarRule("itCall")]
	private OclExpression itCall()
	{
		EnterRule_itCall();
		EnterRule("itCall", 19);
		TraceIn("itCall", 19);
		itCall_stack.Push(new itCall_scope(this));itCall_scopeInit(itCall_stack.Peek());
		OclExpression Expr = default(OclExpression);

		OclExpression iteratorCall25 = default(OclExpression);
		OclExpression iterateCall26 = default(OclExpression);


				itCall_stack.Peek().PushedVar =  0;
			
		try { DebugEnterRule(GrammarFileName, "itCall");
		DebugLocation(153, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:166:2: ( ^( CALL iteratorCall ) | iterateCall )
			int alt26=2;
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==CALL))
			{
				alt26 = 1;
			}
			else if ((LA26_0==ITERATE))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:166:4: ^( CALL iteratorCall )
				{
				DebugLocation(166, 4);
				DebugLocation(166, 6);
				Match(input,CALL,Follow._CALL_in_itCall763); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(166, 11);
				PushFollow(Follow._iteratorCall_in_itCall765);
				iteratorCall25=iteratorCall();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(166, 25);
				Expr = iteratorCall25;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:167:4: iterateCall
				{
				DebugLocation(167, 4);
				PushFollow(Follow._iterateCall_in_itCall773);
				iterateCall26=iterateCall();
				PopFollow();

				DebugLocation(167, 16);
				Expr = iterateCall26;

				}
				break;

			}

					for(int i=0;i<itCall_stack.Peek().PushedVar;i++){
						EnvironmentStack.Pop();
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("itCall", 19);
			LeaveRule("itCall", 19);
			LeaveRule_itCall();
			itCall_scopeAfter(itCall_stack.Peek());itCall_stack.Pop();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "itCall"); }
		return Expr;

	}
	// $ANTLR end "itCall"


	partial void EnterRule_iteratorCall();
	partial void LeaveRule_iteratorCall();

	// $ANTLR start "iteratorCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:171:1: iteratorCall returns [OclExpression Expr] : ( pathName ^( ARGS ^( VARDECL typedefs ) args= arguments ) | pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS ) );
	[GrammarRule("iteratorCall")]
	private OclExpression iteratorCall()
	{
		EnterRule_iteratorCall();
		EnterRule("iteratorCall", 20);
		TraceIn("iteratorCall", 20);
		OclExpression Expr = default(OclExpression);

		List<OclExpression> args = default(List<OclExpression>);
		List<IToken> pathName27 = default(List<IToken>);
		List<VariableDeclaration> typedefs28 = default(List<VariableDeclaration>);
		List<IToken> pathName29 = default(List<IToken>);
		VariableDeclaration implicitVarDecl30 = default(VariableDeclaration);

		try { DebugEnterRule(GrammarFileName, "iteratorCall");
		DebugLocation(171, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:173:2: ( pathName ^( ARGS ^( VARDECL typedefs ) args= arguments ) | pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS ) )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:173:4: pathName ^( ARGS ^( VARDECL typedefs ) args= arguments )
				{
				DebugLocation(173, 4);
				PushFollow(Follow._pathName_in_iteratorCall791);
				pathName27=pathName();
				PopFollow();

				DebugLocation(173, 13);
				DebugLocation(173, 15);
				Match(input,ARGS,Follow._ARGS_in_iteratorCall794); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(173, 20);
				DebugLocation(173, 22);
				Match(input,VARDECL,Follow._VARDECL_in_iteratorCall797); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(173, 30);
				PushFollow(Follow._typedefs_in_iteratorCall799);
				typedefs28=typedefs();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(173, 45);
				PushFollow(Follow._arguments_in_iteratorCall806);
				args=arguments();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(173, 59);

						Expr = ProcessIteratorCall(oclExpression_stack.Peek().RootExpr,pathName27,typedefs28,args);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:175:4: pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS )
				{
				DebugLocation(175, 4);
				PushFollow(Follow._pathName_in_iteratorCall815);
				pathName29=pathName();
				PopFollow();

				DebugLocation(175, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:175:13: ( ({...}? => implicitVarDecl ) |)
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==ARGS))
				{
					int LA27_1 = input.LA(2);

					if (((IsIteratorOperation(oclExpression_stack.Peek().RootExpr,pathName29))))
					{
						alt27 = 1;
					}
					else if ((true))
					{
						alt27 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:177:4: ({...}? => implicitVarDecl )
					{
					DebugLocation(177, 4);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:177:4: ({...}? => implicitVarDecl )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:177:5: {...}? => implicitVarDecl
					{
					DebugLocation(177, 5);
					if (!((IsIteratorOperation(oclExpression_stack.Peek().RootExpr,pathName29))))
					{
						throw new FailedPredicateException(input, "iteratorCall", "IsIteratorOperation($oclExpression::RootExpr,$pathName.Path)");
					}
					DebugLocation(177, 72);
					PushFollow(Follow._implicitVarDecl_in_iteratorCall831);
					implicitVarDecl30=implicitVarDecl();
					PopFollow();


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:178:3: 
					{
					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(179, 3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:179:3: ( ^( ARGS args= arguments ) | ARGS )
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==ARGS))
				{
					int LA28_1 = input.LA(2);

					if ((LA28_1==DOWN))
					{
						alt28 = 1;
					}
					else if ((LA28_1==UP))
					{
						alt28 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:179:4: ^( ARGS args= arguments )
					{
					DebugLocation(179, 4);
					DebugLocation(179, 6);
					Match(input,ARGS,Follow._ARGS_in_iteratorCall847); 

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); 
						DebugLocation(179, 17);
						PushFollow(Follow._arguments_in_iteratorCall854);
						args=arguments();
						PopFollow();


						Match(input, TokenTypes.Up, null); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:179:30: ARGS
					{
					DebugLocation(179, 30);
					Match(input,ARGS,Follow._ARGS_in_iteratorCall857); 

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(180, 3);
				 
							if(IsIteratorOperation(oclExpression_stack.Peek().RootExpr,pathName29)){
								var decls = new List<VariableDeclaration>();
								decls.Add(implicitVarDecl30);
								Expr = ProcessIteratorCall(oclExpression_stack.Peek().RootExpr,pathName29,decls,args);
							} else {
								Expr = ProcessCollectionOperationCall(oclExpression_stack.Peek().RootExpr,pathName29,args);
							}
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("iteratorCall", 20);
			LeaveRule("iteratorCall", 20);
			LeaveRule_iteratorCall();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "iteratorCall"); }
		return Expr;

	}
	// $ANTLR end "iteratorCall"


	partial void EnterRule_iterateCall();
	partial void LeaveRule_iterateCall();

	// $ANTLR start "iterateCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:191:1: iterateCall returns [OclExpression Expr] : ^(it= ITERATE (iterator= typedef |iterator= implicitVarDecl ) ^( ACC accName= SimpleName (accType= type )? accExpr= oclExpression ) expr= oclExpression ) ;
	[GrammarRule("iterateCall")]
	private OclExpression iterateCall()
	{
		EnterRule_iterateCall();
		EnterRule("iterateCall", 21);
		TraceIn("iterateCall", 21);
		OclExpression Expr = default(OclExpression);

		CommonTree it = default(CommonTree);
		CommonTree accName = default(CommonTree);
		VariableDeclaration iterator = default(VariableDeclaration);
		Classifier accType = default(Classifier);
		OclExpression accExpr = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "iterateCall");
		DebugLocation(191, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:193:2: ( ^(it= ITERATE (iterator= typedef |iterator= implicitVarDecl ) ^( ACC accName= SimpleName (accType= type )? accExpr= oclExpression ) expr= oclExpression ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:193:4: ^(it= ITERATE (iterator= typedef |iterator= implicitVarDecl ) ^( ACC accName= SimpleName (accType= type )? accExpr= oclExpression ) expr= oclExpression )
			{
			DebugLocation(193, 4);
			DebugLocation(193, 8);
			it=(CommonTree)Match(input,ITERATE,Follow._ITERATE_in_iterateCall881); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(194, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:194:4: (iterator= typedef |iterator= implicitVarDecl )
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==DECL))
			{
				alt30 = 1;
			}
			else if (((LA30_0>=ACC && LA30_0<=ARGS)))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:194:5: iterator= typedef
				{
				DebugLocation(194, 13);
				PushFollow(Follow._typedef_in_iterateCall890);
				iterator=typedef();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:194:24: iterator= implicitVarDecl
				{
				DebugLocation(194, 32);
				PushFollow(Follow._implicitVarDecl_in_iterateCall896);
				iterator=implicitVarDecl();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(195, 4);
			DebugLocation(195, 6);
			Match(input,ACC,Follow._ACC_in_iterateCall903); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(195, 18);
			accName=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_iterateCall909); 
			DebugLocation(195, 31);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:195:31: (accType= type )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==COLLTYPE||LA31_0==PATH||LA31_0==81||(LA31_0>=83 && LA31_0<=87)||LA31_0==89||(LA31_0>=92 && LA31_0<=94)))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:195:32: accType= type
				{
				DebugLocation(195, 40);
				PushFollow(Follow._type_in_iterateCall916);
				accType=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(195, 57);
			PushFollow(Follow._oclExpression_in_iterateCall924);
			accExpr=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(195, 74);
			 var acc = ProcessAccDef(accName.Token,accType,accExpr,ref itCall_stack.Peek().PushedVar);
			DebugLocation(196, 9);
			PushFollow(Follow._oclExpression_in_iterateCall936);
			expr=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(198, 3);
			 Expr = ProcessIterate(oclExpression_stack.Peek().RootExpr,it.Token,iterator,acc,expr);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("iterateCall", 21);
			LeaveRule("iterateCall", 21);
			LeaveRule_iterateCall();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "iterateCall"); }
		return Expr;

	}
	// $ANTLR end "iterateCall"


	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:201:1: arguments returns [List<OclExpression> Args = new List<OclExpression>()] : (e= oclExpression )* ;
	[GrammarRule("arguments")]
	private List<OclExpression> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 22);
		TraceIn("arguments", 22);
		List<OclExpression> Args =  new List<OclExpression>();

		OclExpression e = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(201, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:203:2: ( (e= oclExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:203:4: (e= oclExpression )*
			{
			DebugLocation(203, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:203:4: (e= oclExpression )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==CALL||LA32_0==COLLECTIONLITERAL||LA32_0==IF||LA32_0==INFIX||LA32_0==LET||LA32_0==MESSAGE||LA32_0==PRIMITIVELITERAL||(LA32_0>=TUPLELITERAL && LA32_0<=UNARY)||(LA32_0>=66 && LA32_0<=67)))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:203:5: e= oclExpression
					{
					DebugLocation(203, 7);
					PushFollow(Follow._oclExpression_in_arguments966);
					e=oclExpression();
					PopFollow();

					DebugLocation(203, 23);
					Args.Add(e);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 22);
			LeaveRule("arguments", 22);
			LeaveRule_arguments();
		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return Args;

	}
	// $ANTLR end "arguments"


	partial void EnterRule_typedefs();
	partial void LeaveRule_typedefs();

	// $ANTLR start "typedefs"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:220:1: typedefs returns [List<VariableDeclaration> Decls = new List<VariableDeclaration>()] : ( typedef )+ ;
	[GrammarRule("typedefs")]
	private List<VariableDeclaration> typedefs()
	{
		EnterRule_typedefs();
		EnterRule("typedefs", 23);
		TraceIn("typedefs", 23);
		List<VariableDeclaration> Decls =  new List<VariableDeclaration>();

		VariableDeclaration typedef31 = default(VariableDeclaration);

		try { DebugEnterRule(GrammarFileName, "typedefs");
		DebugLocation(220, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:222:2: ( ( typedef )+ )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:222:4: ( typedef )+
			{
			DebugLocation(222, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:222:4: ( typedef )+
			int cnt33=0;
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==DECL))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:222:5: typedef
					{
					DebugLocation(222, 5);
					PushFollow(Follow._typedef_in_typedefs1014);
					typedef31=typedef();
					PopFollow();

					DebugLocation(222, 12);
					Decls.Add(typedef31);

					}
					break;

				default:
					if (cnt33 >= 1)
						goto loop33;

					EarlyExitException eee33 = new EarlyExitException( 33, input );
					DebugRecognitionException(eee33);
					throw eee33;
				}
				cnt33++;
			}
			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typedefs", 23);
			LeaveRule("typedefs", 23);
			LeaveRule_typedefs();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "typedefs"); }
		return Decls;

	}
	// $ANTLR end "typedefs"


	partial void EnterRule_typedef();
	partial void LeaveRule_typedef();

	// $ANTLR start "typedef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:225:1: typedef returns [VariableDeclaration Decl] : ^( DECL SimpleName ( type )? ) ;
	[GrammarRule("typedef")]
	private VariableDeclaration typedef()
	{
		EnterRule_typedef();
		EnterRule("typedef", 24);
		TraceIn("typedef", 24);
		VariableDeclaration Decl = default(VariableDeclaration);

		CommonTree SimpleName32 = default(CommonTree);
		Classifier type33 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "typedef");
		DebugLocation(225, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:227:2: ( ^( DECL SimpleName ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:227:4: ^( DECL SimpleName ( type )? )
			{
			DebugLocation(227, 4);
			DebugLocation(227, 6);
			Match(input,DECL,Follow._DECL_in_typedef1033); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(227, 11);
			SimpleName32=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_typedef1035); 
			DebugLocation(227, 22);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:227:22: ( type )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==COLLTYPE||LA34_0==PATH||LA34_0==81||(LA34_0>=83 && LA34_0<=87)||LA34_0==89||(LA34_0>=92 && LA34_0<=94)))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:227:22: type
				{
				DebugLocation(227, 22);
				PushFollow(Follow._type_in_typedef1037);
				type33=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			Match(input, TokenTypes.Up, null); 
			DebugLocation(228, 4);
			Decl = ProcessVarDef(oclExpression_stack.Peek().RootExpr,SimpleName32.Token,type33,ref itCall_stack.Peek().PushedVar);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typedef", 24);
			LeaveRule("typedef", 24);
			LeaveRule_typedef();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "typedef"); }
		return Decl;

	}
	// $ANTLR end "typedef"


	partial void EnterRule_implicitVarDecl();
	partial void LeaveRule_implicitVarDecl();

	// $ANTLR start "implicitVarDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:231:1: implicitVarDecl returns [VariableDeclaration Decl] :;
	[GrammarRule("implicitVarDecl")]
	private VariableDeclaration implicitVarDecl()
	{
		EnterRule_implicitVarDecl();
		EnterRule("implicitVarDecl", 25);
		TraceIn("implicitVarDecl", 25);
		VariableDeclaration Decl = default(VariableDeclaration);

		try { DebugEnterRule(GrammarFileName, "implicitVarDecl");
		DebugLocation(231, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:233:2: ()
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:233:4: 
			{
			DebugLocation(233, 4);
			Decl = ProcessImplicitVarDef(oclExpression_stack.Peek().RootExpr, ref itCall_stack.Peek().PushedVar); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implicitVarDecl", 25);
			LeaveRule("implicitVarDecl", 25);
			LeaveRule_implicitVarDecl();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "implicitVarDecl"); }
		return Decl;

	}
	// $ANTLR end "implicitVarDecl"


	partial void EnterRule_pathName();
	partial void LeaveRule_pathName();

	// $ANTLR start "pathName"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:238:1: pathName returns [List<IToken> Path = new List<IToken>()] : ^( PATH ( SimpleName )+ ) ;
	[GrammarRule("pathName")]
	private List<IToken> pathName()
	{
		EnterRule_pathName();
		EnterRule("pathName", 26);
		TraceIn("pathName", 26);
		List<IToken> Path =  new List<IToken>();

		CommonTree SimpleName34 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "pathName");
		DebugLocation(238, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:240:2: ( ^( PATH ( SimpleName )+ ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:241:4: ^( PATH ( SimpleName )+ )
			{
			DebugLocation(241, 4);
			DebugLocation(241, 6);
			Match(input,PATH,Follow._PATH_in_pathName1086); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(241, 11);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:241:11: ( SimpleName )+
			int cnt35=0;
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==SimpleName))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:241:12: SimpleName
					{
					DebugLocation(241, 12);
					SimpleName34=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_pathName1089); 
					DebugLocation(241, 23);
					Path.Add(SimpleName34.Token);

					}
					break;

				default:
					if (cnt35 >= 1)
						goto loop35;

					EarlyExitException eee35 = new EarlyExitException( 35, input );
					DebugRecognitionException(eee35);
					throw eee35;
				}
				cnt35++;
			}
			loop35:
				;

			} finally { DebugExitSubRule(35); }


			Match(input, TokenTypes.Up, null); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pathName", 26);
			LeaveRule("pathName", 26);
			LeaveRule_pathName();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "pathName"); }
		return Path;

	}
	// $ANTLR end "pathName"


	partial void EnterRule_collectionLiteralExp();
	partial void LeaveRule_collectionLiteralExp();

	// $ANTLR start "collectionLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:245:1: collectionLiteralExp returns [OclExpression Expr] : ( ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) );
	[GrammarRule("collectionLiteralExp")]
	private OclExpression collectionLiteralExp()
	{
		EnterRule_collectionLiteralExp();
		EnterRule("collectionLiteralExp", 27);
		TraceIn("collectionLiteralExp", 27);
		OclExpression Expr = default(OclExpression);

		OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier35 = default(OCLAst.collectionTypeIdentifier_return);
		List<CollectionLiteralPart> collectionLiteralParts36 = default(List<CollectionLiteralPart>);
		OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier37 = default(OCLAst.collectionTypeIdentifier_return);
		Classifier type38 = default(Classifier);
		List<CollectionLiteralPart> collectionLiteralParts39 = default(List<CollectionLiteralPart>);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralExp");
		DebugLocation(245, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:247:2: ( ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:248:3: ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts )
				{
				DebugLocation(248, 3);
				DebugLocation(248, 5);
				Match(input,COLLECTIONLITERAL,Follow._COLLECTIONLITERAL_in_collectionLiteralExp1116); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(248, 23);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp1118);
				collectionTypeIdentifier35=collectionTypeIdentifier();
				PopFollow();

				DebugLocation(248, 48);
				PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1120);
				collectionLiteralParts36=collectionLiteralParts();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(249, 3);
				Expr = CollectionLiteralExp((collectionTypeIdentifier35!=null?collectionTypeIdentifier35.Kind:default(CollectionKind)),(collectionTypeIdentifier35!=null?collectionTypeIdentifier35.Tree:default(CommonTree)),collectionLiteralParts36);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:252:3: ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts )
				{
				DebugLocation(252, 3);
				DebugLocation(252, 5);
				Match(input,COLLECTIONLITERAL,Follow._COLLECTIONLITERAL_in_collectionLiteralExp1135); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(252, 23);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp1137);
				collectionTypeIdentifier37=collectionTypeIdentifier();
				PopFollow();

				DebugLocation(252, 48);
				PushFollow(Follow._type_in_collectionLiteralExp1139);
				type38=type();
				PopFollow();

				DebugLocation(252, 53);
				PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1141);
				collectionLiteralParts39=collectionLiteralParts();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(253, 3);
				Expr = CollectionLiteralExp((collectionTypeIdentifier37!=null?collectionTypeIdentifier37.Kind:default(CollectionKind)),(collectionTypeIdentifier37!=null?collectionTypeIdentifier37.Tree:default(CommonTree)),type38,collectionLiteralParts39);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralExp", 27);
			LeaveRule("collectionLiteralExp", 27);
			LeaveRule_collectionLiteralExp();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExp"); }
		return Expr;

	}
	// $ANTLR end "collectionLiteralExp"

	private sealed partial class collectionTypeIdentifier_return : TreeRuleReturnScope<CommonTree>
	{
		public CollectionKind Kind;
		public CommonTree Tree;
		public collectionTypeIdentifier_return(OCLAst grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLAst grammar);
	}

	partial void EnterRule_collectionTypeIdentifier();
	partial void LeaveRule_collectionTypeIdentifier();

	// $ANTLR start "collectionTypeIdentifier"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:259:1: collectionTypeIdentifier returns [CollectionKind Kind,CommonTree Tree] : ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' );
	[GrammarRule("collectionTypeIdentifier")]
	private OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier()
	{
		EnterRule_collectionTypeIdentifier();
		EnterRule("collectionTypeIdentifier", 28);
		TraceIn("collectionTypeIdentifier", 28);
		OCLAst.collectionTypeIdentifier_return retval = new OCLAst.collectionTypeIdentifier_return(this);
		retval.Start = (CommonTree)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "collectionTypeIdentifier");
		DebugLocation(259, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:264:2: ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' )
			int alt37=5;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case 91:
				{
				alt37 = 1;
				}
				break;
			case 80:
				{
				alt37 = 2;
				}
				break;
			case 90:
				{
				alt37 = 3;
				}
				break;
			case 82:
				{
				alt37 = 4;
				}
				break;
			case 88:
				{
				alt37 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:264:3: 'Set'
				{
				DebugLocation(264, 3);
				Match(input,91,Follow._91_in_collectionTypeIdentifier1171); 
				DebugLocation(264, 9);
				retval.Kind = CollectionKind.Set;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:265:3: 'Bag'
				{
				DebugLocation(265, 3);
				Match(input,80,Follow._80_in_collectionTypeIdentifier1177); 
				DebugLocation(265, 9);
				retval.Kind = CollectionKind.Bag;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:266:3: 'Sequence'
				{
				DebugLocation(266, 3);
				Match(input,90,Follow._90_in_collectionTypeIdentifier1183); 
				DebugLocation(266, 15);
				retval.Kind = CollectionKind.Sequence;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:267:3: 'Collection'
				{
				DebugLocation(267, 3);
				Match(input,82,Follow._82_in_collectionTypeIdentifier1190); 
				DebugLocation(267, 16);
				retval.Kind = CollectionKind.Collection;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:268:3: 'OrderedSet'
				{
				DebugLocation(268, 3);
				Match(input,88,Follow._88_in_collectionTypeIdentifier1196); 
				DebugLocation(268, 16);
				retval.Kind = CollectionKind.OrderedSet;

				}
				break;

			}

					retval.Tree = retval.Start;
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionTypeIdentifier", 28);
			LeaveRule("collectionTypeIdentifier", 28);
			LeaveRule_collectionTypeIdentifier();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionTypeIdentifier"); }
		return retval;

	}
	// $ANTLR end "collectionTypeIdentifier"


	partial void EnterRule_collectionLiteralParts();
	partial void LeaveRule_collectionLiteralParts();

	// $ANTLR start "collectionLiteralParts"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:271:1: collectionLiteralParts returns [List<CollectionLiteralPart> Parts = new List<CollectionLiteralPart>();] : ( collectionLiteralPart )* ;
	[GrammarRule("collectionLiteralParts")]
	private List<CollectionLiteralPart> collectionLiteralParts()
	{
		EnterRule_collectionLiteralParts();
		EnterRule("collectionLiteralParts", 29);
		TraceIn("collectionLiteralParts", 29);
		List<CollectionLiteralPart> Parts =  new List<CollectionLiteralPart>();;

		CollectionLiteralPart collectionLiteralPart40 = default(CollectionLiteralPart);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralParts");
		DebugLocation(271, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:273:2: ( ( collectionLiteralPart )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:273:4: ( collectionLiteralPart )*
			{
			DebugLocation(273, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:273:4: ( collectionLiteralPart )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if (((LA38_0>=COLLPART && LA38_0<=COLLPARTRANGE)))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:273:5: collectionLiteralPart
					{
					DebugLocation(273, 5);
					PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts1215);
					collectionLiteralPart40=collectionLiteralPart();
					PopFollow();

					DebugLocation(273, 27);
					Parts.Add(collectionLiteralPart40);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralParts", 29);
			LeaveRule("collectionLiteralParts", 29);
			LeaveRule_collectionLiteralParts();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralParts"); }
		return Parts;

	}
	// $ANTLR end "collectionLiteralParts"


	partial void EnterRule_collectionLiteralPart();
	partial void LeaveRule_collectionLiteralPart();

	// $ANTLR start "collectionLiteralPart"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:276:1: collectionLiteralPart returns [ CollectionLiteralPart Item] : ( ^( COLLPARTRANGE e1= oclExpression e2= oclExpression ) | ^( COLLPART oclExpression ) );
	[GrammarRule("collectionLiteralPart")]
	private CollectionLiteralPart collectionLiteralPart()
	{
		EnterRule_collectionLiteralPart();
		EnterRule("collectionLiteralPart", 30);
		TraceIn("collectionLiteralPart", 30);
		CollectionLiteralPart Item = default(CollectionLiteralPart);

		OclExpression e1 = default(OclExpression);
		OclExpression e2 = default(OclExpression);
		OclExpression oclExpression41 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralPart");
		DebugLocation(276, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:278:2: ( ^( COLLPARTRANGE e1= oclExpression e2= oclExpression ) | ^( COLLPART oclExpression ) )
			int alt39=2;
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==COLLPARTRANGE))
			{
				alt39 = 1;
			}
			else if ((LA39_0==COLLPART))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:279:2: ^( COLLPARTRANGE e1= oclExpression e2= oclExpression )
				{
				DebugLocation(279, 2);
				DebugLocation(279, 4);
				Match(input,COLLPARTRANGE,Follow._COLLPARTRANGE_in_collectionLiteralPart1240); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(279, 20);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1244);
				e1=oclExpression();
				PopFollow();

				DebugLocation(279, 37);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1248);
				e2=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(279, 53);
				Item =new AST.CollectionRange(e1,e2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:280:3: ^( COLLPART oclExpression )
				{
				DebugLocation(280, 3);
				DebugLocation(280, 5);
				Match(input,COLLPART,Follow._COLLPART_in_collectionLiteralPart1256); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(280, 14);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1258);
				oclExpression41=oclExpression();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
				DebugLocation(280, 34);
				Item =new AST.CollectionItem(oclExpression41);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralPart", 30);
			LeaveRule("collectionLiteralPart", 30);
			LeaveRule_collectionLiteralPart();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralPart"); }
		return Item;

	}
	// $ANTLR end "collectionLiteralPart"


	partial void EnterRule_primitiveLiteralExp();
	partial void LeaveRule_primitiveLiteralExp();

	// $ANTLR start "primitiveLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:284:1: primitiveLiteralExp returns [LiteralExp Literal] : ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp |tok= 'true' |tok= 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp );
	[GrammarRule("primitiveLiteralExp")]
	private LiteralExp primitiveLiteralExp()
	{
		EnterRule_primitiveLiteralExp();
		EnterRule("primitiveLiteralExp", 31);
		TraceIn("primitiveLiteralExp", 31);
		LiteralExp Literal = default(LiteralExp);

		CommonTree tok = default(CommonTree);
		CommonTree IntegerLiteralExp42 = default(CommonTree);
		CommonTree RealLiteralExp43 = default(CommonTree);
		CommonTree StringLiteralExp44 = default(CommonTree);
		CommonTree UnlimitedNaturalLiteralExp45 = default(CommonTree);
		CommonTree NullLiteralExp46 = default(CommonTree);
		CommonTree InvalidLiteralExp47 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "primitiveLiteralExp");
		DebugLocation(284, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:286:2: ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp |tok= 'true' |tok= 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp )
			int alt40=8;
			try { DebugEnterDecision(40, false);
			switch (input.LA(1))
			{
			case IntegerLiteralExp:
				{
				alt40 = 1;
				}
				break;
			case RealLiteralExp:
				{
				alt40 = 2;
				}
				break;
			case StringLiteralExp:
				{
				alt40 = 3;
				}
				break;
			case 121:
				{
				alt40 = 4;
				}
				break;
			case 106:
				{
				alt40 = 5;
				}
				break;
			case UnlimitedNaturalLiteralExp:
				{
				alt40 = 6;
				}
				break;
			case NullLiteralExp:
				{
				alt40 = 7;
				}
				break;
			case InvalidLiteralExp:
				{
				alt40 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:286:4: IntegerLiteralExp
				{
				DebugLocation(286, 4);
				IntegerLiteralExp42=(CommonTree)Match(input,IntegerLiteralExp,Follow._IntegerLiteralExp_in_primitiveLiteralExp1284); 
				DebugLocation(286, 25);
				Literal = CreateIntegerLiteral(IntegerLiteralExp42);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:287:4: RealLiteralExp
				{
				DebugLocation(287, 4);
				RealLiteralExp43=(CommonTree)Match(input,RealLiteralExp,Follow._RealLiteralExp_in_primitiveLiteralExp1294); 
				DebugLocation(287, 22);
				Literal = CreateRealLiteral(RealLiteralExp43);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:288:4: StringLiteralExp
				{
				DebugLocation(288, 4);
				StringLiteralExp44=(CommonTree)Match(input,StringLiteralExp,Follow._StringLiteralExp_in_primitiveLiteralExp1304); 
				DebugLocation(288, 24);
				Literal = CreateStringLiteral(StringLiteralExp44);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:289:4: tok= 'true'
				{
				DebugLocation(289, 8);
				tok=(CommonTree)Match(input,121,Follow._121_in_primitiveLiteralExp1318); 
				DebugLocation(289, 21);
				Literal = CreateBooleanLiteral(true,tok);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:290:4: tok= 'false'
				{
				DebugLocation(290, 8);
				tok=(CommonTree)Match(input,106,Follow._106_in_primitiveLiteralExp1333); 
				DebugLocation(290, 22);
				Literal = CreateBooleanLiteral(false,tok);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:291:4: UnlimitedNaturalLiteralExp
				{
				DebugLocation(291, 4);
				UnlimitedNaturalLiteralExp45=(CommonTree)Match(input,UnlimitedNaturalLiteralExp,Follow._UnlimitedNaturalLiteralExp_in_primitiveLiteralExp1344); 
				DebugLocation(291, 31);
				Literal = CreateUnlimitedNaturalLiteral(UnlimitedNaturalLiteralExp45);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:292:4: NullLiteralExp
				{
				DebugLocation(292, 4);
				NullLiteralExp46=(CommonTree)Match(input,NullLiteralExp,Follow._NullLiteralExp_in_primitiveLiteralExp1351); 
				DebugLocation(292, 22);
				Literal = CreateNullLiteral(NullLiteralExp46);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:293:4: InvalidLiteralExp
				{
				DebugLocation(293, 4);
				InvalidLiteralExp47=(CommonTree)Match(input,InvalidLiteralExp,Follow._InvalidLiteralExp_in_primitiveLiteralExp1361); 
				DebugLocation(293, 25);
				Literal = CreateInvalidLiteral(InvalidLiteralExp47);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveLiteralExp", 31);
			LeaveRule("primitiveLiteralExp", 31);
			LeaveRule_primitiveLiteralExp();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveLiteralExp"); }
		return Literal;

	}
	// $ANTLR end "primitiveLiteralExp"


	partial void EnterRule_tupleLiteralExp();
	partial void LeaveRule_tupleLiteralExp();

	// $ANTLR start "tupleLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:296:1: tupleLiteralExp returns [TupleLiteralExp Literal] : ^( TUPLELITERAL variableDeclarationList ) ;
	[GrammarRule("tupleLiteralExp")]
	private TupleLiteralExp tupleLiteralExp()
	{
		EnterRule_tupleLiteralExp();
		EnterRule("tupleLiteralExp", 32);
		TraceIn("tupleLiteralExp", 32);
		TupleLiteralExp Literal = default(TupleLiteralExp);

		CommonTree TUPLELITERAL48 = default(CommonTree);
		List<VariableDeclarationBag> variableDeclarationList49 = default(List<VariableDeclarationBag>);

		try { DebugEnterRule(GrammarFileName, "tupleLiteralExp");
		DebugLocation(296, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:298:2: ( ^( TUPLELITERAL variableDeclarationList ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:298:5: ^( TUPLELITERAL variableDeclarationList )
			{
			DebugLocation(298, 5);
			DebugLocation(298, 7);
			TUPLELITERAL48=(CommonTree)Match(input,TUPLELITERAL,Follow._TUPLELITERAL_in_tupleLiteralExp1385); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(298, 22);
				PushFollow(Follow._variableDeclarationList_in_tupleLiteralExp1389);
				variableDeclarationList49=variableDeclarationList();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
			}
			DebugLocation(298, 47);
			Literal = CreateTupleLiteral(TUPLELITERAL48.Token,variableDeclarationList49);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleLiteralExp", 32);
			LeaveRule("tupleLiteralExp", 32);
			LeaveRule_tupleLiteralExp();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleLiteralExp"); }
		return Literal;

	}
	// $ANTLR end "tupleLiteralExp"


	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:302:1: variableDeclaration returns [VariableDeclarationBag Declaration] : ^( DECL SimpleName ( type )? ( oclExpression )? ) ;
	[GrammarRule("variableDeclaration")]
	private VariableDeclarationBag variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 33);
		TraceIn("variableDeclaration", 33);
		VariableDeclarationBag Declaration = default(VariableDeclarationBag);

		CommonTree SimpleName50 = default(CommonTree);
		Classifier type51 = default(Classifier);
		OclExpression oclExpression52 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(302, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:304:2: ( ^( DECL SimpleName ( type )? ( oclExpression )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:304:4: ^( DECL SimpleName ( type )? ( oclExpression )? )
			{
			DebugLocation(304, 4);
			DebugLocation(304, 6);
			Match(input,DECL,Follow._DECL_in_variableDeclaration1411); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(304, 11);
			SimpleName50=(CommonTree)Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration1413); 
			DebugLocation(304, 22);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:304:22: ( type )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==COLLTYPE||LA41_0==PATH||LA41_0==81||(LA41_0>=83 && LA41_0<=87)||LA41_0==89||(LA41_0>=92 && LA41_0<=94)))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:304:22: type
				{
				DebugLocation(304, 22);
				PushFollow(Follow._type_in_variableDeclaration1415);
				type51=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(304, 28);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:304:28: ( oclExpression )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==CALL||LA42_0==COLLECTIONLITERAL||LA42_0==IF||LA42_0==INFIX||LA42_0==LET||LA42_0==MESSAGE||LA42_0==PRIMITIVELITERAL||(LA42_0>=TUPLELITERAL && LA42_0<=UNARY)||(LA42_0>=66 && LA42_0<=67)))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:304:28: oclExpression
				{
				DebugLocation(304, 28);
				PushFollow(Follow._oclExpression_in_variableDeclaration1418);
				oclExpression52=oclExpression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			Match(input, TokenTypes.Up, null); 
			DebugLocation(304, 44);
			Declaration = new VariableDeclarationBag(SimpleName50.Text,type51,oclExpression52);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 33);
			LeaveRule("variableDeclaration", 33);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return Declaration;

	}
	// $ANTLR end "variableDeclaration"


	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:307:1: type returns [Classifier Type] : ( pathName | collectionType | tupleType | primitiveType | oclType );
	[GrammarRule("type")]
	private Classifier type()
	{
		EnterRule_type();
		EnterRule("type", 34);
		TraceIn("type", 34);
		Classifier Type = default(Classifier);

		List<IToken> pathName53 = default(List<IToken>);
		CollectionType collectionType54 = default(CollectionType);
		TupleType tupleType55 = default(TupleType);
		Classifier primitiveType56 = default(Classifier);
		Classifier oclType57 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(307, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:309:2: ( pathName | collectionType | tupleType | primitiveType | oclType )
			int alt43=5;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case PATH:
				{
				alt43 = 1;
				}
				break;
			case COLLTYPE:
				{
				alt43 = 2;
				}
				break;
			case 93:
				{
				alt43 = 3;
				}
				break;
			case 81:
			case 83:
			case 89:
			case 92:
			case 94:
				{
				alt43 = 4;
				}
				break;
			case 84:
			case 85:
			case 86:
			case 87:
				{
				alt43 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:309:4: pathName
				{
				DebugLocation(309, 4);
				PushFollow(Follow._pathName_in_type1438);
				pathName53=pathName();
				PopFollow();

				DebugLocation(309, 15);
				Type = ResolveTypePathName(pathName53);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:310:4: collectionType
				{
				DebugLocation(310, 4);
				PushFollow(Follow._collectionType_in_type1447);
				collectionType54=collectionType();
				PopFollow();

				DebugLocation(310, 19);
				Type = collectionType54;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:311:4: tupleType
				{
				DebugLocation(311, 4);
				PushFollow(Follow._tupleType_in_type1455);
				tupleType55=tupleType();
				PopFollow();

				DebugLocation(311, 15);
				Type = tupleType55;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:312:4: primitiveType
				{
				DebugLocation(312, 4);
				PushFollow(Follow._primitiveType_in_type1464);
				primitiveType56=primitiveType();
				PopFollow();

				DebugLocation(312, 18);
				Type = primitiveType56;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:313:4: oclType
				{
				DebugLocation(313, 4);
				PushFollow(Follow._oclType_in_type1472);
				oclType57=oclType();
				PopFollow();

				DebugLocation(313, 13);
				Type = oclType57;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 34);
			LeaveRule("type", 34);
			LeaveRule_type();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return Type;

	}
	// $ANTLR end "type"


	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();

	// $ANTLR start "primitiveType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:316:1: primitiveType returns [Classifier Type] : ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' );
	[GrammarRule("primitiveType")]
	private Classifier primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 35);
		TraceIn("primitiveType", 35);
		Classifier Type = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(316, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:318:2: ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' )
			int alt44=5;
			try { DebugEnterDecision(44, false);
			switch (input.LA(1))
			{
			case 81:
				{
				alt44 = 1;
				}
				break;
			case 83:
				{
				alt44 = 2;
				}
				break;
			case 89:
				{
				alt44 = 3;
				}
				break;
			case 92:
				{
				alt44 = 4;
				}
				break;
			case 94:
				{
				alt44 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:318:4: 'Boolean'
				{
				DebugLocation(318, 4);
				Match(input,81,Follow._81_in_primitiveType1494); 
				DebugLocation(318, 17);
				Type = TypesTable.Library.Boolean;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:319:4: 'Integer'
				{
				DebugLocation(319, 4);
				Match(input,83,Follow._83_in_primitiveType1506); 
				DebugLocation(319, 17);
				Type = TypesTable.Library.Integer;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:320:4: 'Real'
				{
				DebugLocation(320, 4);
				Match(input,89,Follow._89_in_primitiveType1516); 
				DebugLocation(320, 14);
				Type = TypesTable.Library.Real;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:321:4: 'String'
				{
				DebugLocation(321, 4);
				Match(input,92,Follow._92_in_primitiveType1526); 
				DebugLocation(321, 16);
				Type = TypesTable.Library.String;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:322:4: 'UnlimitedNatural'
				{
				DebugLocation(322, 4);
				Match(input,94,Follow._94_in_primitiveType1536); 
				DebugLocation(322, 23);
				Type = TypesTable.Library.UnlimitedNatural;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 35);
			LeaveRule("primitiveType", 35);
			LeaveRule_primitiveType();
		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return Type;

	}
	// $ANTLR end "primitiveType"


	partial void EnterRule_oclType();
	partial void LeaveRule_oclType();

	// $ANTLR start "oclType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:325:1: oclType returns [Classifier Type] : ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' );
	[GrammarRule("oclType")]
	private Classifier oclType()
	{
		EnterRule_oclType();
		EnterRule("oclType", 36);
		TraceIn("oclType", 36);
		Classifier Type = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "oclType");
		DebugLocation(325, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:327:2: ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' )
			int alt45=4;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case 84:
				{
				alt45 = 1;
				}
				break;
			case 85:
				{
				alt45 = 2;
				}
				break;
			case 86:
				{
				alt45 = 3;
				}
				break;
			case 87:
				{
				alt45 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:327:4: 'OclAny'
				{
				DebugLocation(327, 4);
				Match(input,84,Follow._84_in_oclType1556); 
				DebugLocation(327, 14);
				Type = TypesTable.Library.Any;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:328:4: 'OclInvalid'
				{
				DebugLocation(328, 4);
				Match(input,85,Follow._85_in_oclType1566); 
				DebugLocation(328, 17);
				Type = TypesTable.Library.Invalid;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:329:4: 'OclMessage'
				{
				DebugLocation(329, 4);
				Match(input,86,Follow._86_in_oclType1575); 
				DebugLocation(329, 17);
				Type = TypesTable.Library.Message; throw new System.NotSupportedException();

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:330:4: 'OclVoid'
				{
				DebugLocation(330, 4);
				Match(input,87,Follow._87_in_oclType1584); 
				DebugLocation(330, 15);
				Type = TypesTable.Library.Void;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclType", 36);
			LeaveRule("oclType", 36);
			LeaveRule_oclType();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "oclType"); }
		return Type;

	}
	// $ANTLR end "oclType"


	partial void EnterRule_collectionType();
	partial void LeaveRule_collectionType();

	// $ANTLR start "collectionType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:333:1: collectionType returns [CollectionType Type] : ^( COLLTYPE collectionTypeIdentifier type ) ;
	[GrammarRule("collectionType")]
	private CollectionType collectionType()
	{
		EnterRule_collectionType();
		EnterRule("collectionType", 37);
		TraceIn("collectionType", 37);
		CollectionType Type = default(CollectionType);

		OCLAst.collectionTypeIdentifier_return collectionTypeIdentifier58 = default(OCLAst.collectionTypeIdentifier_return);
		Classifier type59 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "collectionType");
		DebugLocation(333, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:335:2: ( ^( COLLTYPE collectionTypeIdentifier type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:335:4: ^( COLLTYPE collectionTypeIdentifier type )
			{
			DebugLocation(335, 4);
			DebugLocation(335, 7);
			Match(input,COLLTYPE,Follow._COLLTYPE_in_collectionType1607); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(335, 17);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionType1610);
			collectionTypeIdentifier58=collectionTypeIdentifier();
			PopFollow();

			DebugLocation(335, 42);
			PushFollow(Follow._type_in_collectionType1612);
			type59=type();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(335, 48);
			Type = CreateCollectionType((collectionTypeIdentifier58!=null?collectionTypeIdentifier58.Kind:default(CollectionKind)),type59);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionType", 37);
			LeaveRule("collectionType", 37);
			LeaveRule_collectionType();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionType"); }
		return Type;

	}
	// $ANTLR end "collectionType"


	partial void EnterRule_tupleType();
	partial void LeaveRule_tupleType();

	// $ANTLR start "tupleType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:338:1: tupleType returns [TupleType Type] : ^(tuple= 'Tuple' variableDeclarationList ) ;
	[GrammarRule("tupleType")]
	private TupleType tupleType()
	{
		EnterRule_tupleType();
		EnterRule("tupleType", 38);
		TraceIn("tupleType", 38);
		TupleType Type = default(TupleType);

		CommonTree tuple = default(CommonTree);
		List<VariableDeclarationBag> variableDeclarationList60 = default(List<VariableDeclarationBag>);

		try { DebugEnterRule(GrammarFileName, "tupleType");
		DebugLocation(338, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:340:2: ( ^(tuple= 'Tuple' variableDeclarationList ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:340:4: ^(tuple= 'Tuple' variableDeclarationList )
			{
			DebugLocation(340, 4);
			DebugLocation(340, 12);
			tuple=(CommonTree)Match(input,93,Follow._93_in_tupleType1637); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(340, 22);
				PushFollow(Follow._variableDeclarationList_in_tupleType1640);
				variableDeclarationList60=variableDeclarationList();
				PopFollow();


				Match(input, TokenTypes.Up, null); 
			}
			DebugLocation(340, 48);
			Type =CreateTupleType(tuple.Token,variableDeclarationList60);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleType", 38);
			LeaveRule("tupleType", 38);
			LeaveRule_tupleType();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleType"); }
		return Type;

	}
	// $ANTLR end "tupleType"


	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:344:1: variableDeclarationList returns [List<VariableDeclarationBag> Declarations =new List<VariableDeclarationBag>()] : ( variableDeclaration )* ;
	[GrammarRule("variableDeclarationList")]
	private List<VariableDeclarationBag> variableDeclarationList()
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 39);
		TraceIn("variableDeclarationList", 39);
		List<VariableDeclarationBag> Declarations = new List<VariableDeclarationBag>();

		VariableDeclarationBag variableDeclaration61 = default(VariableDeclarationBag);

		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(344, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:346:2: ( ( variableDeclaration )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:346:4: ( variableDeclaration )*
			{
			DebugLocation(346, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:346:4: ( variableDeclaration )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==DECL))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:346:6: variableDeclaration
					{
					DebugLocation(346, 6);
					PushFollow(Follow._variableDeclaration_in_variableDeclarationList1663);
					variableDeclaration61=variableDeclaration();
					PopFollow();

					DebugLocation(346, 26);
					Declarations.Add(variableDeclaration61);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationList", 39);
			LeaveRule("variableDeclarationList", 39);
			LeaveRule_variableDeclarationList();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return Declarations;

	}
	// $ANTLR end "variableDeclarationList"


	partial void EnterRule_isMarkedPre();
	partial void LeaveRule_isMarkedPre();

	// $ANTLR start "isMarkedPre"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:348:1: isMarkedPre returns [bool IsPre = false] : ( 'pre' |);
	[GrammarRule("isMarkedPre")]
	private bool isMarkedPre()
	{
		EnterRule_isMarkedPre();
		EnterRule("isMarkedPre", 40);
		TraceIn("isMarkedPre", 40);
		bool IsPre =  false;

		try { DebugEnterRule(GrammarFileName, "isMarkedPre");
		DebugLocation(348, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:350:2: ( 'pre' |)
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==118))
			{
				alt47 = 1;
			}
			else if ((LA47_0==UP))
			{
				alt47 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:350:4: 'pre'
				{
				DebugLocation(350, 4);
				Match(input,118,Follow._118_in_isMarkedPre1684); 
				DebugLocation(350, 10);
				IsPre = true;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:351:4: 
				{
				DebugLocation(351, 4);
				IsPre = false;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("isMarkedPre", 40);
			LeaveRule("isMarkedPre", 40);
			LeaveRule_isMarkedPre();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "isMarkedPre"); }
		return IsPre;

	}
	// $ANTLR end "isMarkedPre"


	partial void EnterRule_letExp();
	partial void LeaveRule_letExp();

	// $ANTLR start "letExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:356:1: letExp returns [OclExpression Expr] : ^( LET d= variableDeclaration expr= oclExpression ) ;
	[GrammarRule("letExp")]
	private OclExpression letExp()
	{
		EnterRule_letExp();
		EnterRule("letExp", 41);
		TraceIn("letExp", 41);
		OclExpression Expr = default(OclExpression);

		CommonTree LET62 = default(CommonTree);
		VariableDeclarationBag d = default(VariableDeclarationBag);
		OclExpression expr = default(OclExpression);


				VariableDeclaration decl= null;
			
		try { DebugEnterRule(GrammarFileName, "letExp");
		DebugLocation(356, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:366:2: ( ^( LET d= variableDeclaration expr= oclExpression ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:366:4: ^( LET d= variableDeclaration expr= oclExpression )
			{
			DebugLocation(366, 4);
			DebugLocation(366, 6);
			LET62=(CommonTree)Match(input,LET,Follow._LET_in_letExp1721); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(366, 12);
			PushFollow(Follow._variableDeclaration_in_letExp1727);
			d=variableDeclaration();
			PopFollow();

			DebugLocation(366, 34);
			decl=LetDecl(LET62.Token,d);
			DebugLocation(367, 8);
			PushFollow(Follow._oclExpression_in_letExp1737);
			expr=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(367, 25);
			Expr = CreateLet(LET62.Token,decl,expr);

			}


					if(decl != null){
						EnvironmentStack.Pop();
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("letExp", 41);
			LeaveRule("letExp", 41);
			LeaveRule_letExp();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "letExp"); }
		return Expr;

	}
	// $ANTLR end "letExp"


	partial void EnterRule_ifExp();
	partial void LeaveRule_ifExp();

	// $ANTLR start "ifExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:370:1: ifExp returns [OclExpression Expr] : ^( IF c= oclExpression t= oclExpression f= oclExpression ) ;
	[GrammarRule("ifExp")]
	private OclExpression ifExp()
	{
		EnterRule_ifExp();
		EnterRule("ifExp", 42);
		TraceIn("ifExp", 42);
		OclExpression Expr = default(OclExpression);

		CommonTree IF63 = default(CommonTree);
		OclExpression c = default(OclExpression);
		OclExpression t = default(OclExpression);
		OclExpression f = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "ifExp");
		DebugLocation(370, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:372:2: ( ^( IF c= oclExpression t= oclExpression f= oclExpression ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:372:4: ^( IF c= oclExpression t= oclExpression f= oclExpression )
			{
			DebugLocation(372, 4);
			DebugLocation(372, 6);
			IF63=(CommonTree)Match(input,IF,Follow._IF_in_ifExp1757); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(372, 10);
			PushFollow(Follow._oclExpression_in_ifExp1761);
			c=oclExpression();
			PopFollow();

			DebugLocation(372, 26);
			PushFollow(Follow._oclExpression_in_ifExp1765);
			t=oclExpression();
			PopFollow();

			DebugLocation(372, 42);
			PushFollow(Follow._oclExpression_in_ifExp1769);
			f=oclExpression();
			PopFollow();


			Match(input, TokenTypes.Up, null); 
			DebugLocation(372, 58);
			Expr = CreateIf(IF63.Token,c,t,f);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifExp", 42);
			LeaveRule("ifExp", 42);
			LeaveRule_ifExp();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "ifExp"); }
		return Expr;

	}
	// $ANTLR end "ifExp"


	partial void EnterRule_oclMessageExp();
	partial void LeaveRule_oclMessageExp();

	// $ANTLR start "oclMessageExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:375:1: oclMessageExp : ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' );
	[GrammarRule("oclMessageExp")]
	private void oclMessageExp()
	{
		EnterRule_oclMessageExp();
		EnterRule("oclMessageExp", 43);
		TraceIn("oclMessageExp", 43);
		try { DebugEnterRule(GrammarFileName, "oclMessageExp");
		DebugLocation(375, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:376:2: ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==98))
			{
				alt50 = 1;
			}
			else if ((LA50_0==97))
			{
				alt50 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:376:4: '^^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(376, 4);
				Match(input,98,Follow._98_in_oclMessageExp1783); 
				DebugLocation(376, 9);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1785); 
				DebugLocation(376, 20);
				Match(input,61,Follow._61_in_oclMessageExp1787); 
				DebugLocation(376, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:376:24: ( oclMessageArguments )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==CALL||LA48_0==COLLECTIONLITERAL||LA48_0==IF||LA48_0==INFIX||LA48_0==LET||LA48_0==MESSAGE||LA48_0==PRIMITIVELITERAL||(LA48_0>=TUPLELITERAL && LA48_0<=UNARY)||(LA48_0>=66 && LA48_0<=67)||LA48_0==78))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:376:24: oclMessageArguments
					{
					DebugLocation(376, 24);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1789);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(376, 45);
				Match(input,62,Follow._62_in_oclMessageExp1792); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:377:4: '^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(377, 4);
				Match(input,97,Follow._97_in_oclMessageExp1797); 
				DebugLocation(377, 8);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1799); 
				DebugLocation(377, 19);
				Match(input,61,Follow._61_in_oclMessageExp1801); 
				DebugLocation(377, 23);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:377:23: ( oclMessageArguments )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==CALL||LA49_0==COLLECTIONLITERAL||LA49_0==IF||LA49_0==INFIX||LA49_0==LET||LA49_0==MESSAGE||LA49_0==PRIMITIVELITERAL||(LA49_0>=TUPLELITERAL && LA49_0<=UNARY)||(LA49_0>=66 && LA49_0<=67)||LA49_0==78))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:377:23: oclMessageArguments
					{
					DebugLocation(377, 23);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1803);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(49); }

				DebugLocation(377, 44);
				Match(input,62,Follow._62_in_oclMessageExp1806); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageExp", 43);
			LeaveRule("oclMessageExp", 43);
			LeaveRule_oclMessageExp();
		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageExp"); }
		return;

	}
	// $ANTLR end "oclMessageExp"


	partial void EnterRule_oclMessageArguments();
	partial void LeaveRule_oclMessageArguments();

	// $ANTLR start "oclMessageArguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:379:1: oclMessageArguments : oclMessageArg ( ',' oclMessageArguments )? ;
	[GrammarRule("oclMessageArguments")]
	private void oclMessageArguments()
	{
		EnterRule_oclMessageArguments();
		EnterRule("oclMessageArguments", 44);
		TraceIn("oclMessageArguments", 44);
		try { DebugEnterRule(GrammarFileName, "oclMessageArguments");
		DebugLocation(379, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:380:2: ( oclMessageArg ( ',' oclMessageArguments )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:380:4: oclMessageArg ( ',' oclMessageArguments )?
			{
			DebugLocation(380, 4);
			PushFollow(Follow._oclMessageArg_in_oclMessageArguments1816);
			oclMessageArg();
			PopFollow();

			DebugLocation(380, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:380:18: ( ',' oclMessageArguments )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==64))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:380:20: ',' oclMessageArguments
				{
				DebugLocation(380, 20);
				Match(input,64,Follow._64_in_oclMessageArguments1820); 
				DebugLocation(380, 24);
				PushFollow(Follow._oclMessageArguments_in_oclMessageArguments1822);
				oclMessageArguments();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArguments", 44);
			LeaveRule("oclMessageArguments", 44);
			LeaveRule_oclMessageArguments();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArguments"); }
		return;

	}
	// $ANTLR end "oclMessageArguments"


	partial void EnterRule_oclMessageArg();
	partial void LeaveRule_oclMessageArg();

	// $ANTLR start "oclMessageArg"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:383:1: oclMessageArg : ( '?' ( ':' type )? | oclExpression );
	[GrammarRule("oclMessageArg")]
	private void oclMessageArg()
	{
		EnterRule_oclMessageArg();
		EnterRule("oclMessageArg", 45);
		TraceIn("oclMessageArg", 45);
		try { DebugEnterRule(GrammarFileName, "oclMessageArg");
		DebugLocation(383, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:384:2: ( '?' ( ':' type )? | oclExpression )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==78))
			{
				alt53 = 1;
			}
			else if ((LA53_0==CALL||LA53_0==COLLECTIONLITERAL||LA53_0==IF||LA53_0==INFIX||LA53_0==LET||LA53_0==MESSAGE||LA53_0==PRIMITIVELITERAL||(LA53_0>=TUPLELITERAL && LA53_0<=UNARY)||(LA53_0>=66 && LA53_0<=67)))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:384:4: '?' ( ':' type )?
				{
				DebugLocation(384, 4);
				Match(input,78,Follow._78_in_oclMessageArg1837); 
				DebugLocation(384, 8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:384:8: ( ':' type )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==69))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:384:9: ':' type
					{
					DebugLocation(384, 9);
					Match(input,69,Follow._69_in_oclMessageArg1840); 
					DebugLocation(384, 13);
					PushFollow(Follow._type_in_oclMessageArg1842);
					type();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:385:4: oclExpression
				{
				DebugLocation(385, 4);
				PushFollow(Follow._oclExpression_in_oclMessageArg1849);
				oclExpression();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArg", 45);
			LeaveRule("oclMessageArg", 45);
			LeaveRule_oclMessageArg();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArg"); }
		return;

	}
	// $ANTLR end "oclMessageArg"


	partial void EnterRule_inToken();
	partial void LeaveRule_inToken();

	// $ANTLR start "inToken"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:391:1: inToken : ( 'implies' | 'xor' | 'or' | 'and' | '=' | '<>' | '<' | '<=' | '>' | '>=' | '+' | '-' | '*' | '/' );
	[GrammarRule("inToken")]
	private void inToken()
	{
		EnterRule_inToken();
		EnterRule("inToken", 46);
		TraceIn("inToken", 46);
		try { DebugEnterRule(GrammarFileName, "inToken");
		DebugLocation(391, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:392:2: ( 'implies' | 'xor' | 'or' | 'and' | '=' | '<>' | '<' | '<=' | '>' | '>=' | '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:
			{
			DebugLocation(392, 2);
			if (input.LA(1)==UnlimitedNaturalLiteralExp||input.LA(1)==63||input.LA(1)==65||input.LA(1)==68||(input.LA(1)>=72 && input.LA(1)<=77)||input.LA(1)==99||input.LA(1)==108||input.LA(1)==116||input.LA(1)==122)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inToken", 46);
			LeaveRule("inToken", 46);
			LeaveRule_inToken();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "inToken"); }
		return;

	}
	// $ANTLR end "inToken"


	partial void EnterRule_unToken();
	partial void LeaveRule_unToken();

	// $ANTLR start "unToken"
	// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:408:1: unToken : ( 'not' | '-' );
	[GrammarRule("unToken")]
	private void unToken()
	{
		EnterRule_unToken();
		EnterRule("unToken", 47);
		TraceIn("unToken", 47);
		try { DebugEnterRule(GrammarFileName, "unToken");
		DebugLocation(408, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:409:2: ( 'not' | '-' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLAst.g3:
			{
			DebugLocation(409, 2);
			if (input.LA(1)==65||input.LA(1)==115)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unToken", 47);
			LeaveRule("unToken", 47);
			LeaveRule_unToken();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "unToken"); }
		return;

	}
	// $ANTLR end "unToken"
	#endregion Rules


	#region DFA
	private DFA7 dfa7;
	private DFA22 dfa22;
	private DFA24 dfa24;
	private DFA29 dfa29;
	private DFA36 dfa36;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7( this );
		dfa22 = new DFA22( this );
		dfa24 = new DFA24( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x9\xFFFF";
		private const string DFA7_eofS =
			"\x9\xFFFF";
		private const string DFA7_minS =
			"\x1\xA\x1\x2\x1\x2C\x1\x2\x1\x33\x2\x3\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\xA\x1\x2\x1\x2C\x1\x2\x3\x33\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x7\xFFFF\x1\x1\x1\x2";
		private const string DFA7_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x3",
				"\x1\x4",
				"\x1\x5",
				"\x1\x6\x2F\xFFFF\x1\x5",
				"\x1\x7\x2F\xFFFF\x1\x8",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "58:1: classifierContextHead returns [Classifier Context, VariableDeclaration Self] : ( ^( CLASSIFIERHEAD pathName ) | ^( CLASSIFIERHEAD pathName SimpleName ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x9\xFFFF";
		private const string DFA22_eofS =
			"\x9\xFFFF";
		private const string DFA22_minS =
			"\x1\x7\x1\x2\x1\x2C\x1\x2\x1\x33\x2\x3\x2\xFFFF";
		private const string DFA22_maxS =
			"\x1\x7\x1\x2\x1\x2C\x1\x2\x2\x33\x1\x76\x2\xFFFF";
		private const string DFA22_acceptS =
			"\x7\xFFFF\x1\x1\x1\x2";
		private const string DFA22_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x3",
				"\x1\x4",
				"\x1\x5",
				"\x1\x6\x2F\xFFFF\x1\x5",
				"\x1\x7\x1\xFFFF\x1\x8\x70\xFFFF\x1\x7",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "107:62: (res= propertyCall |res= operationCall )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\xF\xFFFF";
		private const string DFA24_eofS =
			"\xF\xFFFF";
		private const string DFA24_minS =
			"\x1\x7\x6\xFFFF\x1\x2\x1\x2C\x1\x2\x1\x33\x2\x3\x2\xFFFF";
		private const string DFA24_maxS =
			"\x1\x37\x6\xFFFF\x1\x2\x1\x2C\x1\x2\x2\x33\x1\x76\x2\xFFFF";
		private const string DFA24_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x6\xFFFF\x1\x7\x1\x8";
		private const string DFA24_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x7\x3\xFFFF\x1\x1\xD\xFFFF\x1\x5\x7\xFFFF\x1\x6\xD\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x2\x1\x4",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"\x1\x9",
				"\x1\xA",
				"\x1\xB",
				"\x1\xC\x2F\xFFFF\x1\xB",
				"\x1\xD\x1\xFFFF\x1\xE\x70\xFFFF\x1\xD",
				"",
				""
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "114:1: primaryExperession returns [OclExpression Expr] : ( collectionLiteralExp | tupleLiteralExp | ^( PRIMITIVELITERAL primitiveLiteralExp ) | ^( TYPE type ) | ifExp | letExp | ^( CALL pathName isMarkedPre ) | ^( CALL pathName ^( ARGS args= arguments ) isMarkedPre ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x9\xFFFF";
		private const string DFA29_eofS =
			"\x9\xFFFF";
		private const string DFA29_minS =
			"\x1\x2C\x1\x2\x1\x33\x1\x3\x1\x5\x1\x2\x1\x3\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x2C\x1\x2\x2\x33\x1\x5\x1\x3\x1\x43\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x7\xFFFF\x1\x2\x1\x1";
		private const string DFA29_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x3",
				"\x1\x4\x2F\xFFFF\x1\x3",
				"\x1\x5",
				"\x1\x6\x1\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x3\xFFFF\x1\x7\xD\xFFFF\x1\x7\x1\xFFFF\x1\x7\x5"+
				"\xFFFF\x1\x7\x1\xFFFF\x1\x7\xB\xFFFF\x1\x7\x6\xFFFF\x3\x7\x1\xFFFF\x1"+
				"\x8\x7\xFFFF\x2\x7",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "171:1: iteratorCall returns [OclExpression Expr] : ( pathName ^( ARGS ^( VARDECL typedefs ) args= arguments ) | pathName ( ({...}? => implicitVarDecl ) |) ( ^( ARGS args= arguments ) | ARGS ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\xA\xFFFF";
		private const string DFA36_eofS =
			"\xA\xFFFF";
		private const string DFA36_minS =
			"\x1\xB\x1\x2\x1\x50\x5\x3\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\xB\x1\x2\x1\x5B\x5\x5E\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x8\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x4\x1\xFFFF\x1\x6\x5\xFFFF\x1\x7\x1\xFFFF\x1\x5\x1\x3",
				"\x1\x8\x9\xFFFF\x2\x8\x1\x9\x1C\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\x9\xFFFF\x2\x8\x1\x9\x1C\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\x9\xFFFF\x2\x8\x1\x9\x1C\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\x9\xFFFF\x2\x8\x1\x9\x1C\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"\x1\x8\x9\xFFFF\x2\x8\x1\x9\x1C\xFFFF\x1\x9\x24\xFFFF\x1\x9\x1\xFFFF"+
				"\x5\x9\x1\xFFFF\x1\x9\x2\xFFFF\x3\x9",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "245:1: collectionLiteralExp returns [OclExpression Expr] : ( ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _CONDITION_in_contextDeclarationList76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _contextDeclaration_in_contextDeclarationList78 = new BitSet(new ulong[]{0x1040000000208UL});
		public static readonly BitSet _propertyContextDecl_in_contextDeclaration91 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextDecl_in_contextDeclaration95 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextDecl_in_contextDeclaration101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROPERTYCONDITION_in_propertyContextDecl112 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyContextHead_in_propertyContextDecl114 = new BitSet(new ulong[]{0x10100008UL});
		public static readonly BitSet _initOrDerValue_in_propertyContextDecl116 = new BitSet(new ulong[]{0x10100008UL});
		public static readonly BitSet _PROPERTYHEAD_in_propertyContextHead129 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead131 = new BitSet(new ulong[]{0x8100000008000UL,0x72FA0000UL});
		public static readonly BitSet _type_in_propertyContextHead134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OPERATIONCONDITION_in_operationContextDecl146 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _operationContextHead_in_operationContextDecl148 = new BitSet(new ulong[]{0x600000000048UL});
		public static readonly BitSet _prePostOrBodyDecl_in_operationContextDecl150 = new BitSet(new ulong[]{0x600000000048UL});
		public static readonly BitSet _OPERATIONHEAD_in_operationContextHead163 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _operation_in_operationContextHead165 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASSIFIERCONDITION_in_classifierContextDecl192 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _classifierContextHead_in_classifierContextDecl194 = new BitSet(new ulong[]{0x20080008UL});
		public static readonly BitSet _invOrDef_in_classifierContextDecl197 = new BitSet(new ulong[]{0x20080008UL});
		public static readonly BitSet _CLASSIFIERHEAD_in_classifierContextHead220 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_classifierContextHead222 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLASSIFIERHEAD_in_classifierContextHead231 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_classifierContextHead233 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_classifierContextHead235 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INIT_in_initOrDerValue250 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue252 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DERIVATE_in_initOrDerValue258 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue260 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INV_in_invOrDef276 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_invOrDef278 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_invOrDef285 = new BitSet(new ulong[]{0x800000008UL});
		public static readonly BitSet _MESSAGE_in_invOrDef291 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_invOrDef297 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DEF_in_invOrDef312 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _119_in_invOrDef314 = new BitSet(new ulong[]{0x8000000040000UL});
		public static readonly BitSet _SimpleName_in_invOrDef317 = new BitSet(new ulong[]{0x8000000040000UL});
		public static readonly BitSet _defExpression_in_invOrDef320 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PRE_in_prePostOrBodyDecl334 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl336 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl339 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POST_in_prePostOrBodyDecl345 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl347 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl350 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BODY_in_prePostOrBodyDecl356 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl358 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl361 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OPERATION_in_operation374 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_operation376 = new BitSet(new ulong[]{0x100000048008UL,0x72FA0000UL});
		public static readonly BitSet _parameters_in_operation378 = new BitSet(new ulong[]{0x100000008008UL,0x72FA0000UL});
		public static readonly BitSet _type_in_operation381 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _variableDeclaration_in_parameters393 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _variableDeclaration_in_parameters396 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _variableDeclaration_in_defExpression409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECL_in_defExpression415 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _operation_in_defExpression417 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_defExpression419 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INFIX_in_oclExpression445 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression450 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_oclExpression454 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_in_oclExpression462 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression467 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _67_in_oclExpression476 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression480 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _propertyCall_in_oclExpression486 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _operationCall_in_oclExpression492 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _66_in_oclExpression501 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_oclExpression505 = new BitSet(new ulong[]{0x40000080UL});
		public static readonly BitSet _itCall_in_oclExpression509 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MESSAGE_in_oclExpression518 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclMessageExp_in_oclExpression520 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primaryExperession_in_oclExpression526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralExp_in_primaryExperession559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleLiteralExp_in_primaryExperession570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIMITIVELITERAL_in_primaryExperession582 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _primitiveLiteralExp_in_primaryExperession584 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TYPE_in_primaryExperession598 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_in_primaryExperession600 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ifExp_in_primaryExperession607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _letExp_in_primaryExperession613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CALL_in_primaryExperession622 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_primaryExperession624 = new BitSet(new ulong[]{0x8UL,0x40000000000000UL});
		public static readonly BitSet _isMarkedPre_in_primaryExperession626 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_primaryExperession637 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_primaryExperession639 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_primaryExperession642 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arguments_in_primaryExperession647 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _isMarkedPre_in_primaryExperession651 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_propertyCall676 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_propertyCall678 = new BitSet(new ulong[]{0x8UL,0x40000000000000UL});
		public static readonly BitSet _isMarkedPre_in_propertyCall680 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_operationCall704 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathName_in_operationCall706 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_operationCall710 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arguments_in_operationCall716 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARGS_in_operationCall719 = new BitSet(new ulong[]{0x8UL,0x40000000000000UL});
		public static readonly BitSet _isMarkedPre_in_operationCall725 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CALL_in_itCall763 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _iteratorCall_in_itCall765 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _iterateCall_in_itCall773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_iteratorCall791 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_iteratorCall794 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _VARDECL_in_iteratorCall797 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _typedefs_in_iteratorCall799 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _arguments_in_iteratorCall806 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _pathName_in_iteratorCall815 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _implicitVarDecl_in_iteratorCall831 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ARGS_in_iteratorCall847 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _arguments_in_iteratorCall854 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ARGS_in_iteratorCall857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ITERATE_in_iterateCall881 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _typedef_in_iterateCall890 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _implicitVarDecl_in_iterateCall896 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACC_in_iterateCall903 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_iterateCall909 = new BitSet(new ulong[]{0x1C0900A0A008880UL,0x72FA000CUL});
		public static readonly BitSet _type_in_iterateCall916 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_iterateCall924 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _oclExpression_in_iterateCall936 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _oclExpression_in_arguments966 = new BitSet(new ulong[]{0x1C0800A0A000882UL,0xCUL});
		public static readonly BitSet _typedef_in_typedefs1014 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _DECL_in_typedef1033 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_typedef1035 = new BitSet(new ulong[]{0x100000008008UL,0x72FA0000UL});
		public static readonly BitSet _type_in_typedef1037 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PATH_in_pathName1086 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_pathName1089 = new BitSet(new ulong[]{0x8000000000008UL});
		public static readonly BitSet _COLLECTIONLITERAL_in_collectionLiteralExp1116 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp1118 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1120 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _COLLECTIONLITERAL_in_collectionLiteralExp1135 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp1137 = new BitSet(new ulong[]{0x100000008000UL,0x72FA0000UL});
		public static readonly BitSet _type_in_collectionLiteralExp1139 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1141 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _91_in_collectionTypeIdentifier1171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_collectionTypeIdentifier1177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_collectionTypeIdentifier1183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_collectionTypeIdentifier1190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_collectionTypeIdentifier1196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts1215 = new BitSet(new ulong[]{0x6002UL});
		public static readonly BitSet _COLLPARTRANGE_in_collectionLiteralPart1240 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1244 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1248 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _COLLPART_in_collectionLiteralPart1256 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1258 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IntegerLiteralExp_in_primitiveLiteralExp1284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealLiteralExp_in_primitiveLiteralExp1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteralExp_in_primitiveLiteralExp1304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_primitiveLiteralExp1318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_primitiveLiteralExp1333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnlimitedNaturalLiteralExp_in_primitiveLiteralExp1344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NullLiteralExp_in_primitiveLiteralExp1351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _InvalidLiteralExp_in_primitiveLiteralExp1361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TUPLELITERAL_in_tupleLiteralExp1385 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarationList_in_tupleLiteralExp1389 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DECL_in_variableDeclaration1411 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration1413 = new BitSet(new ulong[]{0x1C0900A0A008888UL,0x72FA000CUL});
		public static readonly BitSet _type_in_variableDeclaration1415 = new BitSet(new ulong[]{0x1C0800A0A000888UL,0xCUL});
		public static readonly BitSet _oclExpression_in_variableDeclaration1418 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _pathName_in_type1438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_type1447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_type1455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_type1464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_type1472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_primitiveType1494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_primitiveType1506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_primitiveType1516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_primitiveType1526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_primitiveType1536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_oclType1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_oclType1566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_oclType1575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_oclType1584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLLTYPE_in_collectionType1607 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionType1610 = new BitSet(new ulong[]{0x100000008000UL,0x72FA0000UL});
		public static readonly BitSet _type_in_collectionType1612 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _93_in_tupleType1637 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclarationList_in_tupleType1640 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList1663 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _118_in_isMarkedPre1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LET_in_letExp1721 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _variableDeclaration_in_letExp1727 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_letExp1737 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IF_in_ifExp1757 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _oclExpression_in_ifExp1761 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_ifExp1765 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0xCUL});
		public static readonly BitSet _oclExpression_in_ifExp1769 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _98_in_oclMessageExp1783 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1785 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_oclMessageExp1787 = new BitSet(new ulong[]{0x41C0800A0A000880UL,0x400CUL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1789 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_oclMessageExp1792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_oclMessageExp1797 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1799 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_oclMessageExp1801 = new BitSet(new ulong[]{0x41C0800A0A000880UL,0x400CUL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1803 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_oclMessageExp1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclMessageArg_in_oclMessageArguments1816 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_oclMessageArguments1820 = new BitSet(new ulong[]{0x1C0800A0A000880UL,0x400CUL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageArguments1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_oclMessageArg1837 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_oclMessageArg1840 = new BitSet(new ulong[]{0x100000008000UL,0x72FA0000UL});
		public static readonly BitSet _type_in_oclMessageArg1842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_oclMessageArg1849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_inToken1862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_unToken1938 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace Exolutio.Model.OCL.Compiler
