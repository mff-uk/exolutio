//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3 2012-05-30 11:10:19

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162

    using System.Collections.Generic;

using System.Collections.Generic;
using Antlr.Runtime;

namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLSyntaxLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ACC=4;
	public const int ARGS=5;
	public const int BODY=6;
	public const int CALL=7;
	public const int CALLARGS=8;
	public const int CLASSIFIERCONDITION=9;
	public const int CLASSIFIERHEAD=10;
	public const int CLASSLITERAL=11;
	public const int COLLECTIONLITERAL=12;
	public const int COLLECTIONTYPE=13;
	public const int COLLPART=14;
	public const int COLLPARTRANGE=15;
	public const int COLLTYPE=16;
	public const int CONDITION=17;
	public const int Char=18;
	public const int DECL=19;
	public const int DEF=20;
	public const int DERIVATE=21;
	public const int DoubleDot=22;
	public const int EscapeSequence=23;
	public const int ExponentPart=24;
	public const int Hex=25;
	public const int IF=26;
	public const int INDEX=27;
	public const int INFIX=28;
	public const int INIT=29;
	public const int INV=30;
	public const int ITERATE=31;
	public const int IntegerLiteralExp=32;
	public const int InvalidLiteralExp=33;
	public const int LET=34;
	public const int LINE_COMMENT=35;
	public const int MESSAGE=36;
	public const int NESTED_ML_COMMENT=37;
	public const int NameChar=38;
	public const int NameStartChar=39;
	public const int NullLiteralExp=40;
	public const int Num=41;
	public const int OPERATION=42;
	public const int OPERATIONCONDITION=43;
	public const int OPERATIONHEAD=44;
	public const int PATH=45;
	public const int POST=46;
	public const int PRE=47;
	public const int PRIMITIVELITERAL=48;
	public const int PROPERTYCONDITION=49;
	public const int PROPERTYHEAD=50;
	public const int RealLiteralExp=51;
	public const int SimpleName=52;
	public const int StringChar=53;
	public const int StringLiteralExp=54;
	public const int TUPLELITERAL=55;
	public const int TYPE=56;
	public const int UNARY=57;
	public const int UnlimitedNaturalLiteralExp=58;
	public const int VARDECL=59;
	public const int WS=60;
	public const int WhiteSpaceChar=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	    Queue<IToken> tokens = new Queue<IToken>();    public override void Emit(IToken token)     {        state.token = token;        tokens.Enqueue(token);    }    public override IToken NextToken()    {        base.NextToken();        if ( tokens.Count ==0 )            return Tokens.EndOfFile;        return tokens.Dequeue();    }

    // delegates
    // delegators

	public OCLSyntaxLexer()
	{
		OnCreated();
	}

	public OCLSyntaxLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public OCLSyntaxLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 1);
		TraceIn("T__62", 1);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:12:7: ( '(' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:12:9: '('
			{
			DebugLocation(12, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 1);
			LeaveRule("T__62", 1);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 2);
		TraceIn("T__63", 2);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:13:7: ( ')' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:13:9: ')'
			{
			DebugLocation(13, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 2);
			LeaveRule("T__63", 2);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 3);
		TraceIn("T__64", 3);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:14:7: ( '+' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:14:9: '+'
			{
			DebugLocation(14, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 3);
			LeaveRule("T__64", 3);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 4);
		TraceIn("T__65", 4);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:15:7: ( ',' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:15:9: ','
			{
			DebugLocation(15, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 4);
			LeaveRule("T__65", 4);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 5);
		TraceIn("T__66", 5);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:16:7: ( '-' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:16:9: '-'
			{
			DebugLocation(16, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 5);
			LeaveRule("T__66", 5);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 6);
		TraceIn("T__67", 6);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:17:7: ( '->' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:17:9: '->'
			{
			DebugLocation(17, 9);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 6);
			LeaveRule("T__67", 6);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 7);
		TraceIn("T__68", 7);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:18:7: ( '.' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:18:9: '.'
			{
			DebugLocation(18, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 7);
			LeaveRule("T__68", 7);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_T__69();
	partial void LeaveRule_T__69();

	// $ANTLR start "T__69"
	[GrammarRule("T__69")]
	private void mT__69()
	{
		EnterRule_T__69();
		EnterRule("T__69", 8);
		TraceIn("T__69", 8);
		try
		{
			int _type = T__69;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:19:7: ( '/' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:19:9: '/'
			{
			DebugLocation(19, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__69", 8);
			LeaveRule("T__69", 8);
			LeaveRule_T__69();
		}
	}
	// $ANTLR end "T__69"

	partial void EnterRule_T__70();
	partial void LeaveRule_T__70();

	// $ANTLR start "T__70"
	[GrammarRule("T__70")]
	private void mT__70()
	{
		EnterRule_T__70();
		EnterRule("T__70", 9);
		TraceIn("T__70", 9);
		try
		{
			int _type = T__70;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:20:7: ( ':' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:20:9: ':'
			{
			DebugLocation(20, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__70", 9);
			LeaveRule("T__70", 9);
			LeaveRule_T__70();
		}
	}
	// $ANTLR end "T__70"

	partial void EnterRule_T__71();
	partial void LeaveRule_T__71();

	// $ANTLR start "T__71"
	[GrammarRule("T__71")]
	private void mT__71()
	{
		EnterRule_T__71();
		EnterRule("T__71", 10);
		TraceIn("T__71", 10);
		try
		{
			int _type = T__71;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:21:7: ( '::' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:21:9: '::'
			{
			DebugLocation(21, 9);
			Match("::"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__71", 10);
			LeaveRule("T__71", 10);
			LeaveRule_T__71();
		}
	}
	// $ANTLR end "T__71"

	partial void EnterRule_T__72();
	partial void LeaveRule_T__72();

	// $ANTLR start "T__72"
	[GrammarRule("T__72")]
	private void mT__72()
	{
		EnterRule_T__72();
		EnterRule("T__72", 11);
		TraceIn("T__72", 11);
		try
		{
			int _type = T__72;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:22:7: ( ';' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:22:9: ';'
			{
			DebugLocation(22, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__72", 11);
			LeaveRule("T__72", 11);
			LeaveRule_T__72();
		}
	}
	// $ANTLR end "T__72"

	partial void EnterRule_T__73();
	partial void LeaveRule_T__73();

	// $ANTLR start "T__73"
	[GrammarRule("T__73")]
	private void mT__73()
	{
		EnterRule_T__73();
		EnterRule("T__73", 12);
		TraceIn("T__73", 12);
		try
		{
			int _type = T__73;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:23:7: ( '<' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:23:9: '<'
			{
			DebugLocation(23, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__73", 12);
			LeaveRule("T__73", 12);
			LeaveRule_T__73();
		}
	}
	// $ANTLR end "T__73"

	partial void EnterRule_T__74();
	partial void LeaveRule_T__74();

	// $ANTLR start "T__74"
	[GrammarRule("T__74")]
	private void mT__74()
	{
		EnterRule_T__74();
		EnterRule("T__74", 13);
		TraceIn("T__74", 13);
		try
		{
			int _type = T__74;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:24:7: ( '<=' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:24:9: '<='
			{
			DebugLocation(24, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__74", 13);
			LeaveRule("T__74", 13);
			LeaveRule_T__74();
		}
	}
	// $ANTLR end "T__74"

	partial void EnterRule_T__75();
	partial void LeaveRule_T__75();

	// $ANTLR start "T__75"
	[GrammarRule("T__75")]
	private void mT__75()
	{
		EnterRule_T__75();
		EnterRule("T__75", 14);
		TraceIn("T__75", 14);
		try
		{
			int _type = T__75;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:25:7: ( '<>' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:25:9: '<>'
			{
			DebugLocation(25, 9);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__75", 14);
			LeaveRule("T__75", 14);
			LeaveRule_T__75();
		}
	}
	// $ANTLR end "T__75"

	partial void EnterRule_T__76();
	partial void LeaveRule_T__76();

	// $ANTLR start "T__76"
	[GrammarRule("T__76")]
	private void mT__76()
	{
		EnterRule_T__76();
		EnterRule("T__76", 15);
		TraceIn("T__76", 15);
		try
		{
			int _type = T__76;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:26:7: ( '=' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:26:9: '='
			{
			DebugLocation(26, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__76", 15);
			LeaveRule("T__76", 15);
			LeaveRule_T__76();
		}
	}
	// $ANTLR end "T__76"

	partial void EnterRule_T__77();
	partial void LeaveRule_T__77();

	// $ANTLR start "T__77"
	[GrammarRule("T__77")]
	private void mT__77()
	{
		EnterRule_T__77();
		EnterRule("T__77", 16);
		TraceIn("T__77", 16);
		try
		{
			int _type = T__77;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:7: ( '>' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:9: '>'
			{
			DebugLocation(27, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__77", 16);
			LeaveRule("T__77", 16);
			LeaveRule_T__77();
		}
	}
	// $ANTLR end "T__77"

	partial void EnterRule_T__78();
	partial void LeaveRule_T__78();

	// $ANTLR start "T__78"
	[GrammarRule("T__78")]
	private void mT__78()
	{
		EnterRule_T__78();
		EnterRule("T__78", 17);
		TraceIn("T__78", 17);
		try
		{
			int _type = T__78;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:28:7: ( '>=' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:28:9: '>='
			{
			DebugLocation(28, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__78", 17);
			LeaveRule("T__78", 17);
			LeaveRule_T__78();
		}
	}
	// $ANTLR end "T__78"

	partial void EnterRule_T__79();
	partial void LeaveRule_T__79();

	// $ANTLR start "T__79"
	[GrammarRule("T__79")]
	private void mT__79()
	{
		EnterRule_T__79();
		EnterRule("T__79", 18);
		TraceIn("T__79", 18);
		try
		{
			int _type = T__79;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:29:7: ( '?' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:29:9: '?'
			{
			DebugLocation(29, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__79", 18);
			LeaveRule("T__79", 18);
			LeaveRule_T__79();
		}
	}
	// $ANTLR end "T__79"

	partial void EnterRule_T__80();
	partial void LeaveRule_T__80();

	// $ANTLR start "T__80"
	[GrammarRule("T__80")]
	private void mT__80()
	{
		EnterRule_T__80();
		EnterRule("T__80", 19);
		TraceIn("T__80", 19);
		try
		{
			int _type = T__80;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:30:7: ( '@' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:30:9: '@'
			{
			DebugLocation(30, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__80", 19);
			LeaveRule("T__80", 19);
			LeaveRule_T__80();
		}
	}
	// $ANTLR end "T__80"

	partial void EnterRule_T__81();
	partial void LeaveRule_T__81();

	// $ANTLR start "T__81"
	[GrammarRule("T__81")]
	private void mT__81()
	{
		EnterRule_T__81();
		EnterRule("T__81", 20);
		TraceIn("T__81", 20);
		try
		{
			int _type = T__81;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:31:7: ( 'Bag' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:31:9: 'Bag'
			{
			DebugLocation(31, 9);
			Match("Bag"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__81", 20);
			LeaveRule("T__81", 20);
			LeaveRule_T__81();
		}
	}
	// $ANTLR end "T__81"

	partial void EnterRule_T__82();
	partial void LeaveRule_T__82();

	// $ANTLR start "T__82"
	[GrammarRule("T__82")]
	private void mT__82()
	{
		EnterRule_T__82();
		EnterRule("T__82", 21);
		TraceIn("T__82", 21);
		try
		{
			int _type = T__82;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:32:7: ( 'Boolean' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:32:9: 'Boolean'
			{
			DebugLocation(32, 9);
			Match("Boolean"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__82", 21);
			LeaveRule("T__82", 21);
			LeaveRule_T__82();
		}
	}
	// $ANTLR end "T__82"

	partial void EnterRule_T__83();
	partial void LeaveRule_T__83();

	// $ANTLR start "T__83"
	[GrammarRule("T__83")]
	private void mT__83()
	{
		EnterRule_T__83();
		EnterRule("T__83", 22);
		TraceIn("T__83", 22);
		try
		{
			int _type = T__83;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:33:7: ( 'Collection' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:33:9: 'Collection'
			{
			DebugLocation(33, 9);
			Match("Collection"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__83", 22);
			LeaveRule("T__83", 22);
			LeaveRule_T__83();
		}
	}
	// $ANTLR end "T__83"

	partial void EnterRule_T__84();
	partial void LeaveRule_T__84();

	// $ANTLR start "T__84"
	[GrammarRule("T__84")]
	private void mT__84()
	{
		EnterRule_T__84();
		EnterRule("T__84", 23);
		TraceIn("T__84", 23);
		try
		{
			int _type = T__84;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:34:7: ( 'Integer' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:34:9: 'Integer'
			{
			DebugLocation(34, 9);
			Match("Integer"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__84", 23);
			LeaveRule("T__84", 23);
			LeaveRule_T__84();
		}
	}
	// $ANTLR end "T__84"

	partial void EnterRule_T__85();
	partial void LeaveRule_T__85();

	// $ANTLR start "T__85"
	[GrammarRule("T__85")]
	private void mT__85()
	{
		EnterRule_T__85();
		EnterRule("T__85", 24);
		TraceIn("T__85", 24);
		try
		{
			int _type = T__85;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:35:7: ( 'OclAny' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:35:9: 'OclAny'
			{
			DebugLocation(35, 9);
			Match("OclAny"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__85", 24);
			LeaveRule("T__85", 24);
			LeaveRule_T__85();
		}
	}
	// $ANTLR end "T__85"

	partial void EnterRule_T__86();
	partial void LeaveRule_T__86();

	// $ANTLR start "T__86"
	[GrammarRule("T__86")]
	private void mT__86()
	{
		EnterRule_T__86();
		EnterRule("T__86", 25);
		TraceIn("T__86", 25);
		try
		{
			int _type = T__86;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:36:7: ( 'OclInvalid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:36:9: 'OclInvalid'
			{
			DebugLocation(36, 9);
			Match("OclInvalid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__86", 25);
			LeaveRule("T__86", 25);
			LeaveRule_T__86();
		}
	}
	// $ANTLR end "T__86"

	partial void EnterRule_T__87();
	partial void LeaveRule_T__87();

	// $ANTLR start "T__87"
	[GrammarRule("T__87")]
	private void mT__87()
	{
		EnterRule_T__87();
		EnterRule("T__87", 26);
		TraceIn("T__87", 26);
		try
		{
			int _type = T__87;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:37:7: ( 'OclMessage' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:37:9: 'OclMessage'
			{
			DebugLocation(37, 9);
			Match("OclMessage"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__87", 26);
			LeaveRule("T__87", 26);
			LeaveRule_T__87();
		}
	}
	// $ANTLR end "T__87"

	partial void EnterRule_T__88();
	partial void LeaveRule_T__88();

	// $ANTLR start "T__88"
	[GrammarRule("T__88")]
	private void mT__88()
	{
		EnterRule_T__88();
		EnterRule("T__88", 27);
		TraceIn("T__88", 27);
		try
		{
			int _type = T__88;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:7: ( 'OclVoid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:9: 'OclVoid'
			{
			DebugLocation(38, 9);
			Match("OclVoid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__88", 27);
			LeaveRule("T__88", 27);
			LeaveRule_T__88();
		}
	}
	// $ANTLR end "T__88"

	partial void EnterRule_T__89();
	partial void LeaveRule_T__89();

	// $ANTLR start "T__89"
	[GrammarRule("T__89")]
	private void mT__89()
	{
		EnterRule_T__89();
		EnterRule("T__89", 28);
		TraceIn("T__89", 28);
		try
		{
			int _type = T__89;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:39:7: ( 'OrderedSet' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:39:9: 'OrderedSet'
			{
			DebugLocation(39, 9);
			Match("OrderedSet"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__89", 28);
			LeaveRule("T__89", 28);
			LeaveRule_T__89();
		}
	}
	// $ANTLR end "T__89"

	partial void EnterRule_T__90();
	partial void LeaveRule_T__90();

	// $ANTLR start "T__90"
	[GrammarRule("T__90")]
	private void mT__90()
	{
		EnterRule_T__90();
		EnterRule("T__90", 29);
		TraceIn("T__90", 29);
		try
		{
			int _type = T__90;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:40:7: ( 'Real' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:40:9: 'Real'
			{
			DebugLocation(40, 9);
			Match("Real"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__90", 29);
			LeaveRule("T__90", 29);
			LeaveRule_T__90();
		}
	}
	// $ANTLR end "T__90"

	partial void EnterRule_T__91();
	partial void LeaveRule_T__91();

	// $ANTLR start "T__91"
	[GrammarRule("T__91")]
	private void mT__91()
	{
		EnterRule_T__91();
		EnterRule("T__91", 30);
		TraceIn("T__91", 30);
		try
		{
			int _type = T__91;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:41:7: ( 'Sequence' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:41:9: 'Sequence'
			{
			DebugLocation(41, 9);
			Match("Sequence"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__91", 30);
			LeaveRule("T__91", 30);
			LeaveRule_T__91();
		}
	}
	// $ANTLR end "T__91"

	partial void EnterRule_T__92();
	partial void LeaveRule_T__92();

	// $ANTLR start "T__92"
	[GrammarRule("T__92")]
	private void mT__92()
	{
		EnterRule_T__92();
		EnterRule("T__92", 31);
		TraceIn("T__92", 31);
		try
		{
			int _type = T__92;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:7: ( 'Set' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:9: 'Set'
			{
			DebugLocation(42, 9);
			Match("Set"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__92", 31);
			LeaveRule("T__92", 31);
			LeaveRule_T__92();
		}
	}
	// $ANTLR end "T__92"

	partial void EnterRule_T__93();
	partial void LeaveRule_T__93();

	// $ANTLR start "T__93"
	[GrammarRule("T__93")]
	private void mT__93()
	{
		EnterRule_T__93();
		EnterRule("T__93", 32);
		TraceIn("T__93", 32);
		try
		{
			int _type = T__93;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:43:7: ( 'String' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:43:9: 'String'
			{
			DebugLocation(43, 9);
			Match("String"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__93", 32);
			LeaveRule("T__93", 32);
			LeaveRule_T__93();
		}
	}
	// $ANTLR end "T__93"

	partial void EnterRule_T__94();
	partial void LeaveRule_T__94();

	// $ANTLR start "T__94"
	[GrammarRule("T__94")]
	private void mT__94()
	{
		EnterRule_T__94();
		EnterRule("T__94", 33);
		TraceIn("T__94", 33);
		try
		{
			int _type = T__94;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:44:7: ( 'Tuple' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:44:9: 'Tuple'
			{
			DebugLocation(44, 9);
			Match("Tuple"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__94", 33);
			LeaveRule("T__94", 33);
			LeaveRule_T__94();
		}
	}
	// $ANTLR end "T__94"

	partial void EnterRule_T__95();
	partial void LeaveRule_T__95();

	// $ANTLR start "T__95"
	[GrammarRule("T__95")]
	private void mT__95()
	{
		EnterRule_T__95();
		EnterRule("T__95", 34);
		TraceIn("T__95", 34);
		try
		{
			int _type = T__95;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:45:7: ( 'UnlimitedNatural' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:45:9: 'UnlimitedNatural'
			{
			DebugLocation(45, 9);
			Match("UnlimitedNatural"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__95", 34);
			LeaveRule("T__95", 34);
			LeaveRule_T__95();
		}
	}
	// $ANTLR end "T__95"

	partial void EnterRule_T__96();
	partial void LeaveRule_T__96();

	// $ANTLR start "T__96"
	[GrammarRule("T__96")]
	private void mT__96()
	{
		EnterRule_T__96();
		EnterRule("T__96", 35);
		TraceIn("T__96", 35);
		try
		{
			int _type = T__96;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:46:7: ( '[' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:46:9: '['
			{
			DebugLocation(46, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__96", 35);
			LeaveRule("T__96", 35);
			LeaveRule_T__96();
		}
	}
	// $ANTLR end "T__96"

	partial void EnterRule_T__97();
	partial void LeaveRule_T__97();

	// $ANTLR start "T__97"
	[GrammarRule("T__97")]
	private void mT__97()
	{
		EnterRule_T__97();
		EnterRule("T__97", 36);
		TraceIn("T__97", 36);
		try
		{
			int _type = T__97;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:7: ( ']' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:9: ']'
			{
			DebugLocation(47, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__97", 36);
			LeaveRule("T__97", 36);
			LeaveRule_T__97();
		}
	}
	// $ANTLR end "T__97"

	partial void EnterRule_T__98();
	partial void LeaveRule_T__98();

	// $ANTLR start "T__98"
	[GrammarRule("T__98")]
	private void mT__98()
	{
		EnterRule_T__98();
		EnterRule("T__98", 37);
		TraceIn("T__98", 37);
		try
		{
			int _type = T__98;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:48:7: ( '^' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:48:9: '^'
			{
			DebugLocation(48, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__98", 37);
			LeaveRule("T__98", 37);
			LeaveRule_T__98();
		}
	}
	// $ANTLR end "T__98"

	partial void EnterRule_T__99();
	partial void LeaveRule_T__99();

	// $ANTLR start "T__99"
	[GrammarRule("T__99")]
	private void mT__99()
	{
		EnterRule_T__99();
		EnterRule("T__99", 38);
		TraceIn("T__99", 38);
		try
		{
			int _type = T__99;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:49:7: ( '^^' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:49:9: '^^'
			{
			DebugLocation(49, 9);
			Match("^^"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__99", 38);
			LeaveRule("T__99", 38);
			LeaveRule_T__99();
		}
	}
	// $ANTLR end "T__99"

	partial void EnterRule_T__100();
	partial void LeaveRule_T__100();

	// $ANTLR start "T__100"
	[GrammarRule("T__100")]
	private void mT__100()
	{
		EnterRule_T__100();
		EnterRule("T__100", 39);
		TraceIn("T__100", 39);
		try
		{
			int _type = T__100;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:50:8: ( 'and' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:50:10: 'and'
			{
			DebugLocation(50, 10);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__100", 39);
			LeaveRule("T__100", 39);
			LeaveRule_T__100();
		}
	}
	// $ANTLR end "T__100"

	partial void EnterRule_T__101();
	partial void LeaveRule_T__101();

	// $ANTLR start "T__101"
	[GrammarRule("T__101")]
	private void mT__101()
	{
		EnterRule_T__101();
		EnterRule("T__101", 40);
		TraceIn("T__101", 40);
		try
		{
			int _type = T__101;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:8: ( 'body' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:10: 'body'
			{
			DebugLocation(51, 10);
			Match("body"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__101", 40);
			LeaveRule("T__101", 40);
			LeaveRule_T__101();
		}
	}
	// $ANTLR end "T__101"

	partial void EnterRule_T__102();
	partial void LeaveRule_T__102();

	// $ANTLR start "T__102"
	[GrammarRule("T__102")]
	private void mT__102()
	{
		EnterRule_T__102();
		EnterRule("T__102", 41);
		TraceIn("T__102", 41);
		try
		{
			int _type = T__102;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:52:8: ( 'context' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:52:10: 'context'
			{
			DebugLocation(52, 10);
			Match("context"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__102", 41);
			LeaveRule("T__102", 41);
			LeaveRule_T__102();
		}
	}
	// $ANTLR end "T__102"

	partial void EnterRule_T__103();
	partial void LeaveRule_T__103();

	// $ANTLR start "T__103"
	[GrammarRule("T__103")]
	private void mT__103()
	{
		EnterRule_T__103();
		EnterRule("T__103", 42);
		TraceIn("T__103", 42);
		try
		{
			int _type = T__103;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:53:8: ( 'def' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:53:10: 'def'
			{
			DebugLocation(53, 10);
			Match("def"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__103", 42);
			LeaveRule("T__103", 42);
			LeaveRule_T__103();
		}
	}
	// $ANTLR end "T__103"

	partial void EnterRule_T__104();
	partial void LeaveRule_T__104();

	// $ANTLR start "T__104"
	[GrammarRule("T__104")]
	private void mT__104()
	{
		EnterRule_T__104();
		EnterRule("T__104", 43);
		TraceIn("T__104", 43);
		try
		{
			int _type = T__104;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:54:8: ( 'derive' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:54:10: 'derive'
			{
			DebugLocation(54, 10);
			Match("derive"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__104", 43);
			LeaveRule("T__104", 43);
			LeaveRule_T__104();
		}
	}
	// $ANTLR end "T__104"

	partial void EnterRule_T__105();
	partial void LeaveRule_T__105();

	// $ANTLR start "T__105"
	[GrammarRule("T__105")]
	private void mT__105()
	{
		EnterRule_T__105();
		EnterRule("T__105", 44);
		TraceIn("T__105", 44);
		try
		{
			int _type = T__105;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:8: ( 'else' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:10: 'else'
			{
			DebugLocation(55, 10);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__105", 44);
			LeaveRule("T__105", 44);
			LeaveRule_T__105();
		}
	}
	// $ANTLR end "T__105"

	partial void EnterRule_T__106();
	partial void LeaveRule_T__106();

	// $ANTLR start "T__106"
	[GrammarRule("T__106")]
	private void mT__106()
	{
		EnterRule_T__106();
		EnterRule("T__106", 45);
		TraceIn("T__106", 45);
		try
		{
			int _type = T__106;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:56:8: ( 'endif' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:56:10: 'endif'
			{
			DebugLocation(56, 10);
			Match("endif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__106", 45);
			LeaveRule("T__106", 45);
			LeaveRule_T__106();
		}
	}
	// $ANTLR end "T__106"

	partial void EnterRule_T__107();
	partial void LeaveRule_T__107();

	// $ANTLR start "T__107"
	[GrammarRule("T__107")]
	private void mT__107()
	{
		EnterRule_T__107();
		EnterRule("T__107", 46);
		TraceIn("T__107", 46);
		try
		{
			int _type = T__107;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:57:8: ( 'false' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:57:10: 'false'
			{
			DebugLocation(57, 10);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__107", 46);
			LeaveRule("T__107", 46);
			LeaveRule_T__107();
		}
	}
	// $ANTLR end "T__107"

	partial void EnterRule_T__108();
	partial void LeaveRule_T__108();

	// $ANTLR start "T__108"
	[GrammarRule("T__108")]
	private void mT__108()
	{
		EnterRule_T__108();
		EnterRule("T__108", 47);
		TraceIn("T__108", 47);
		try
		{
			int _type = T__108;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:58:8: ( 'if' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:58:10: 'if'
			{
			DebugLocation(58, 10);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__108", 47);
			LeaveRule("T__108", 47);
			LeaveRule_T__108();
		}
	}
	// $ANTLR end "T__108"

	partial void EnterRule_T__109();
	partial void LeaveRule_T__109();

	// $ANTLR start "T__109"
	[GrammarRule("T__109")]
	private void mT__109()
	{
		EnterRule_T__109();
		EnterRule("T__109", 48);
		TraceIn("T__109", 48);
		try
		{
			int _type = T__109;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:8: ( 'implies' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:10: 'implies'
			{
			DebugLocation(59, 10);
			Match("implies"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__109", 48);
			LeaveRule("T__109", 48);
			LeaveRule_T__109();
		}
	}
	// $ANTLR end "T__109"

	partial void EnterRule_T__110();
	partial void LeaveRule_T__110();

	// $ANTLR start "T__110"
	[GrammarRule("T__110")]
	private void mT__110()
	{
		EnterRule_T__110();
		EnterRule("T__110", 49);
		TraceIn("T__110", 49);
		try
		{
			int _type = T__110;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:60:8: ( 'in' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:60:10: 'in'
			{
			DebugLocation(60, 10);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__110", 49);
			LeaveRule("T__110", 49);
			LeaveRule_T__110();
		}
	}
	// $ANTLR end "T__110"

	partial void EnterRule_T__111();
	partial void LeaveRule_T__111();

	// $ANTLR start "T__111"
	[GrammarRule("T__111")]
	private void mT__111()
	{
		EnterRule_T__111();
		EnterRule("T__111", 50);
		TraceIn("T__111", 50);
		try
		{
			int _type = T__111;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:61:8: ( 'init' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:61:10: 'init'
			{
			DebugLocation(61, 10);
			Match("init"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__111", 50);
			LeaveRule("T__111", 50);
			LeaveRule_T__111();
		}
	}
	// $ANTLR end "T__111"

	partial void EnterRule_T__112();
	partial void LeaveRule_T__112();

	// $ANTLR start "T__112"
	[GrammarRule("T__112")]
	private void mT__112()
	{
		EnterRule_T__112();
		EnterRule("T__112", 51);
		TraceIn("T__112", 51);
		try
		{
			int _type = T__112;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:62:8: ( 'inv' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:62:10: 'inv'
			{
			DebugLocation(62, 10);
			Match("inv"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__112", 51);
			LeaveRule("T__112", 51);
			LeaveRule_T__112();
		}
	}
	// $ANTLR end "T__112"

	partial void EnterRule_T__113();
	partial void LeaveRule_T__113();

	// $ANTLR start "T__113"
	[GrammarRule("T__113")]
	private void mT__113()
	{
		EnterRule_T__113();
		EnterRule("T__113", 52);
		TraceIn("T__113", 52);
		try
		{
			int _type = T__113;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:63:8: ( 'iterate' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:63:10: 'iterate'
			{
			DebugLocation(63, 10);
			Match("iterate"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__113", 52);
			LeaveRule("T__113", 52);
			LeaveRule_T__113();
		}
	}
	// $ANTLR end "T__113"

	partial void EnterRule_T__114();
	partial void LeaveRule_T__114();

	// $ANTLR start "T__114"
	[GrammarRule("T__114")]
	private void mT__114()
	{
		EnterRule_T__114();
		EnterRule("T__114", 53);
		TraceIn("T__114", 53);
		try
		{
			int _type = T__114;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:8: ( 'let' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:10: 'let'
			{
			DebugLocation(64, 10);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__114", 53);
			LeaveRule("T__114", 53);
			LeaveRule_T__114();
		}
	}
	// $ANTLR end "T__114"

	partial void EnterRule_T__115();
	partial void LeaveRule_T__115();

	// $ANTLR start "T__115"
	[GrammarRule("T__115")]
	private void mT__115()
	{
		EnterRule_T__115();
		EnterRule("T__115", 54);
		TraceIn("T__115", 54);
		try
		{
			int _type = T__115;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:65:8: ( 'message' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:65:10: 'message'
			{
			DebugLocation(65, 10);
			Match("message"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__115", 54);
			LeaveRule("T__115", 54);
			LeaveRule_T__115();
		}
	}
	// $ANTLR end "T__115"

	partial void EnterRule_T__116();
	partial void LeaveRule_T__116();

	// $ANTLR start "T__116"
	[GrammarRule("T__116")]
	private void mT__116()
	{
		EnterRule_T__116();
		EnterRule("T__116", 55);
		TraceIn("T__116", 55);
		try
		{
			int _type = T__116;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:66:8: ( 'new' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:66:10: 'new'
			{
			DebugLocation(66, 10);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__116", 55);
			LeaveRule("T__116", 55);
			LeaveRule_T__116();
		}
	}
	// $ANTLR end "T__116"

	partial void EnterRule_T__117();
	partial void LeaveRule_T__117();

	// $ANTLR start "T__117"
	[GrammarRule("T__117")]
	private void mT__117()
	{
		EnterRule_T__117();
		EnterRule("T__117", 56);
		TraceIn("T__117", 56);
		try
		{
			int _type = T__117;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:67:8: ( 'not' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:67:10: 'not'
			{
			DebugLocation(67, 10);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__117", 56);
			LeaveRule("T__117", 56);
			LeaveRule_T__117();
		}
	}
	// $ANTLR end "T__117"

	partial void EnterRule_T__118();
	partial void LeaveRule_T__118();

	// $ANTLR start "T__118"
	[GrammarRule("T__118")]
	private void mT__118()
	{
		EnterRule_T__118();
		EnterRule("T__118", 57);
		TraceIn("T__118", 57);
		try
		{
			int _type = T__118;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:68:8: ( 'or' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:68:10: 'or'
			{
			DebugLocation(68, 10);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__118", 57);
			LeaveRule("T__118", 57);
			LeaveRule_T__118();
		}
	}
	// $ANTLR end "T__118"

	partial void EnterRule_T__119();
	partial void LeaveRule_T__119();

	// $ANTLR start "T__119"
	[GrammarRule("T__119")]
	private void mT__119()
	{
		EnterRule_T__119();
		EnterRule("T__119", 58);
		TraceIn("T__119", 58);
		try
		{
			int _type = T__119;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:8: ( 'post' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:10: 'post'
			{
			DebugLocation(69, 10);
			Match("post"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__119", 58);
			LeaveRule("T__119", 58);
			LeaveRule_T__119();
		}
	}
	// $ANTLR end "T__119"

	partial void EnterRule_T__120();
	partial void LeaveRule_T__120();

	// $ANTLR start "T__120"
	[GrammarRule("T__120")]
	private void mT__120()
	{
		EnterRule_T__120();
		EnterRule("T__120", 59);
		TraceIn("T__120", 59);
		try
		{
			int _type = T__120;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:70:8: ( 'pre' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:70:10: 'pre'
			{
			DebugLocation(70, 10);
			Match("pre"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__120", 59);
			LeaveRule("T__120", 59);
			LeaveRule_T__120();
		}
	}
	// $ANTLR end "T__120"

	partial void EnterRule_T__121();
	partial void LeaveRule_T__121();

	// $ANTLR start "T__121"
	[GrammarRule("T__121")]
	private void mT__121()
	{
		EnterRule_T__121();
		EnterRule("T__121", 60);
		TraceIn("T__121", 60);
		try
		{
			int _type = T__121;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:8: ( 'static' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:10: 'static'
			{
			DebugLocation(71, 10);
			Match("static"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__121", 60);
			LeaveRule("T__121", 60);
			LeaveRule_T__121();
		}
	}
	// $ANTLR end "T__121"

	partial void EnterRule_T__122();
	partial void LeaveRule_T__122();

	// $ANTLR start "T__122"
	[GrammarRule("T__122")]
	private void mT__122()
	{
		EnterRule_T__122();
		EnterRule("T__122", 61);
		TraceIn("T__122", 61);
		try
		{
			int _type = T__122;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:8: ( 'then' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:10: 'then'
			{
			DebugLocation(72, 10);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__122", 61);
			LeaveRule("T__122", 61);
			LeaveRule_T__122();
		}
	}
	// $ANTLR end "T__122"

	partial void EnterRule_T__123();
	partial void LeaveRule_T__123();

	// $ANTLR start "T__123"
	[GrammarRule("T__123")]
	private void mT__123()
	{
		EnterRule_T__123();
		EnterRule("T__123", 62);
		TraceIn("T__123", 62);
		try
		{
			int _type = T__123;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:73:8: ( 'true' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:73:10: 'true'
			{
			DebugLocation(73, 10);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__123", 62);
			LeaveRule("T__123", 62);
			LeaveRule_T__123();
		}
	}
	// $ANTLR end "T__123"

	partial void EnterRule_T__124();
	partial void LeaveRule_T__124();

	// $ANTLR start "T__124"
	[GrammarRule("T__124")]
	private void mT__124()
	{
		EnterRule_T__124();
		EnterRule("T__124", 63);
		TraceIn("T__124", 63);
		try
		{
			int _type = T__124;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:74:8: ( 'xor' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:74:10: 'xor'
			{
			DebugLocation(74, 10);
			Match("xor"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__124", 63);
			LeaveRule("T__124", 63);
			LeaveRule_T__124();
		}
	}
	// $ANTLR end "T__124"

	partial void EnterRule_T__125();
	partial void LeaveRule_T__125();

	// $ANTLR start "T__125"
	[GrammarRule("T__125")]
	private void mT__125()
	{
		EnterRule_T__125();
		EnterRule("T__125", 64);
		TraceIn("T__125", 64);
		try
		{
			int _type = T__125;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:75:8: ( '{' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:75:10: '{'
			{
			DebugLocation(75, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__125", 64);
			LeaveRule("T__125", 64);
			LeaveRule_T__125();
		}
	}
	// $ANTLR end "T__125"

	partial void EnterRule_T__126();
	partial void LeaveRule_T__126();

	// $ANTLR start "T__126"
	[GrammarRule("T__126")]
	private void mT__126()
	{
		EnterRule_T__126();
		EnterRule("T__126", 65);
		TraceIn("T__126", 65);
		try
		{
			int _type = T__126;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:8: ( '|' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:10: '|'
			{
			DebugLocation(76, 10);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__126", 65);
			LeaveRule("T__126", 65);
			LeaveRule_T__126();
		}
	}
	// $ANTLR end "T__126"

	partial void EnterRule_T__127();
	partial void LeaveRule_T__127();

	// $ANTLR start "T__127"
	[GrammarRule("T__127")]
	private void mT__127()
	{
		EnterRule_T__127();
		EnterRule("T__127", 66);
		TraceIn("T__127", 66);
		try
		{
			int _type = T__127;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:8: ( '}' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:10: '}'
			{
			DebugLocation(77, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__127", 66);
			LeaveRule("T__127", 66);
			LeaveRule_T__127();
		}
	}
	// $ANTLR end "T__127"

	partial void EnterRule_DoubleDot();
	partial void LeaveRule_DoubleDot();

	// $ANTLR start "DoubleDot"
	[GrammarRule("DoubleDot")]
	private void mDoubleDot()
	{
		EnterRule_DoubleDot();
		EnterRule("DoubleDot", 67);
		TraceIn("DoubleDot", 67);
		try
		{
			int _type = DoubleDot;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:373:2: ( '..' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:373:4: '..'
			{
			DebugLocation(373, 4);
			Match(".."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DoubleDot", 67);
			LeaveRule("DoubleDot", 67);
			LeaveRule_DoubleDot();
		}
	}
	// $ANTLR end "DoubleDot"

	partial void EnterRule_NullLiteralExp();
	partial void LeaveRule_NullLiteralExp();

	// $ANTLR start "NullLiteralExp"
	[GrammarRule("NullLiteralExp")]
	private void mNullLiteralExp()
	{
		EnterRule_NullLiteralExp();
		EnterRule("NullLiteralExp", 68);
		TraceIn("NullLiteralExp", 68);
		try
		{
			int _type = NullLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:377:2: ( 'null' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:377:4: 'null'
			{
			DebugLocation(377, 4);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NullLiteralExp", 68);
			LeaveRule("NullLiteralExp", 68);
			LeaveRule_NullLiteralExp();
		}
	}
	// $ANTLR end "NullLiteralExp"

	partial void EnterRule_InvalidLiteralExp();
	partial void LeaveRule_InvalidLiteralExp();

	// $ANTLR start "InvalidLiteralExp"
	[GrammarRule("InvalidLiteralExp")]
	private void mInvalidLiteralExp()
	{
		EnterRule_InvalidLiteralExp();
		EnterRule("InvalidLiteralExp", 69);
		TraceIn("InvalidLiteralExp", 69);
		try
		{
			int _type = InvalidLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:381:2: ( 'invalid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:381:4: 'invalid'
			{
			DebugLocation(381, 4);
			Match("invalid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("InvalidLiteralExp", 69);
			LeaveRule("InvalidLiteralExp", 69);
			LeaveRule_InvalidLiteralExp();
		}
	}
	// $ANTLR end "InvalidLiteralExp"

	partial void EnterRule_SimpleName();
	partial void LeaveRule_SimpleName();

	// $ANTLR start "SimpleName"
	[GrammarRule("SimpleName")]
	private void mSimpleName()
	{
		EnterRule_SimpleName();
		EnterRule("SimpleName", 70);
		TraceIn("SimpleName", 70);
		try
		{
			int _type = SimpleName;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:387:2: ( NameStartChar ( NameChar )* | '_' '\\'' ( StringChar )* '\\'' )
			int alt3=2;
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0=='_'))
			{
				int LA3_1 = input.LA(2);

				if ((LA3_1=='\''))
				{
					alt3 = 2;
				}
				else
				{
					alt3 = 1;}
			}
			else if ((LA3_0=='$'||(LA3_0>='A' && LA3_0<='Z')||(LA3_0>='a' && LA3_0<='z')||(LA3_0>='\u00C0' && LA3_0<='\u00D6')||(LA3_0>='\u00D8' && LA3_0<='\u00F6')||(LA3_0>='\u00F8' && LA3_0<='\u02FF')||(LA3_0>='\u0370' && LA3_0<='\u037D')||(LA3_0>='\u037F' && LA3_0<='\u1FFF')||(LA3_0>='\u200C' && LA3_0<='\u200D')||(LA3_0>='\u2070' && LA3_0<='\u218F')||(LA3_0>='\u2C00' && LA3_0<='\u2FEF')||(LA3_0>='\u3001' && LA3_0<='\uD7FF')||(LA3_0>='\uF900' && LA3_0<='\uFDCF')||(LA3_0>='\uFDF0' && LA3_0<='\uFFFD')))
			{
				alt3 = 1;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:387:4: NameStartChar ( NameChar )*
				{
				DebugLocation(387, 4);
				mNameStartChar(); 
				DebugLocation(387, 18);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:387:18: ( NameChar )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0=='$'||(LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')||(LA1_0>='\u00C0' && LA1_0<='\u00D6')||(LA1_0>='\u00D8' && LA1_0<='\u00F6')||(LA1_0>='\u00F8' && LA1_0<='\u02FF')||(LA1_0>='\u0370' && LA1_0<='\u037D')||(LA1_0>='\u037F' && LA1_0<='\u1FFF')||(LA1_0>='\u200C' && LA1_0<='\u200D')||(LA1_0>='\u2070' && LA1_0<='\u218F')||(LA1_0>='\u2C00' && LA1_0<='\u2FEF')||(LA1_0>='\u3001' && LA1_0<='\uD7FF')||(LA1_0>='\uF900' && LA1_0<='\uFDCF')||(LA1_0>='\uFDF0' && LA1_0<='\uFFFD')))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
						{
						DebugLocation(387, 18);
						input.Consume();


						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:388:4: '_' '\\'' ( StringChar )* '\\''
				{
				DebugLocation(388, 4);
				Match('_'); 
				DebugLocation(388, 8);
				Match('\''); 
				DebugLocation(388, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:388:13: ( StringChar )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if (((LA2_0>=' ' && LA2_0<='&')||(LA2_0>='(' && LA2_0<='\uD7FF')||(LA2_0>='\uE000' && LA2_0<='\uFFFD')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:388:13: StringChar
						{
						DebugLocation(388, 13);
						mStringChar(); 

						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(388, 25);
				Match('\''); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SimpleName", 70);
			LeaveRule("SimpleName", 70);
			LeaveRule_SimpleName();
		}
	}
	// $ANTLR end "SimpleName"

	partial void EnterRule_UnlimitedNaturalLiteralExp();
	partial void LeaveRule_UnlimitedNaturalLiteralExp();

	// $ANTLR start "UnlimitedNaturalLiteralExp"
	[GrammarRule("UnlimitedNaturalLiteralExp")]
	private void mUnlimitedNaturalLiteralExp()
	{
		EnterRule_UnlimitedNaturalLiteralExp();
		EnterRule("UnlimitedNaturalLiteralExp", 71);
		TraceIn("UnlimitedNaturalLiteralExp", 71);
		try
		{
			int _type = UnlimitedNaturalLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:393:2: ( '*' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:393:3: '*'
			{
			DebugLocation(393, 3);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UnlimitedNaturalLiteralExp", 71);
			LeaveRule("UnlimitedNaturalLiteralExp", 71);
			LeaveRule_UnlimitedNaturalLiteralExp();
		}
	}
	// $ANTLR end "UnlimitedNaturalLiteralExp"

	partial void EnterRule_IntegerLiteralExp();
	partial void LeaveRule_IntegerLiteralExp();

	// $ANTLR start "IntegerLiteralExp"
	[GrammarRule("IntegerLiteralExp")]
	private void mIntegerLiteralExp()
	{
		EnterRule_IntegerLiteralExp();
		EnterRule("IntegerLiteralExp", 72);
		TraceIn("IntegerLiteralExp", 72);
		try
		{
			int _type = IntegerLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:395:2: ( '0' | '1' .. '9' ( Num )* )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='0'))
			{
				alt5 = 1;
			}
			else if (((LA5_0>='1' && LA5_0<='9')))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:395:4: '0'
				{
				DebugLocation(395, 4);
				Match('0'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:396:4: '1' .. '9' ( Num )*
				{
				DebugLocation(396, 4);
				MatchRange('1','9'); 
				DebugLocation(396, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:396:13: ( Num )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if (((LA4_0>='0' && LA4_0<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
						{
						DebugLocation(396, 13);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IntegerLiteralExp", 72);
			LeaveRule("IntegerLiteralExp", 72);
			LeaveRule_IntegerLiteralExp();
		}
	}
	// $ANTLR end "IntegerLiteralExp"

	partial void EnterRule_RealLiteralExp();
	partial void LeaveRule_RealLiteralExp();

	// $ANTLR start "RealLiteralExp"
	[GrammarRule("RealLiteralExp")]
	private void mRealLiteralExp()
	{
		EnterRule_RealLiteralExp();
		EnterRule("RealLiteralExp", 73);
		TraceIn("RealLiteralExp", 73);
		try
		{
			int _type = RealLiteralExp;
			int _channel = DefaultTokenChannel;
			CommonToken n = default(CommonToken);
			CommonToken d = default(CommonToken);

			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:399:2: ( (n= Num )+ d= '..' | ( Num )+ ( ( '.' ( Num )+ ( ExponentPart )? ) | ( ExponentPart ) ) )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			try
			{
				alt11 = dfa11.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:399:4: (n= Num )+ d= '..'
				{
				DebugLocation(399, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:399:6: (n= Num )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='0' && LA6_0<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:399:6: n= Num
						{
						DebugLocation(399, 6);
						int nStart670 = CharIndex;
						int nStartLine670 = Line;
						int nStartCharPos670 = CharPositionInLine;
						mNum(); 
						n = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, nStart670, CharIndex-1);
						n.Line = nStartLine670;
						n.CharPositionInLine = nStartCharPos670;

						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(399, 14);
				int dStart = CharIndex;
				Match(".."); 
				int dStartLine675 = Line;
				int dStartCharPos675 = CharPositionInLine;
				d = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, dStart, CharIndex-1);
				d.Line = dStartLine675;
				d.CharPositionInLine = dStartCharPos675;
				DebugLocation(399, 20);

					      n.Type = IntegerLiteralExp; 
						  Emit(n);
						  d.Type = DoubleDot;
						  Emit(d); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:5: ( Num )+ ( ( '.' ( Num )+ ( ExponentPart )? ) | ( ExponentPart ) )
				{
				DebugLocation(404, 5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:5: ( Num )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='0' && LA7_0<='9')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
						{
						DebugLocation(404, 5);
						input.Consume();


						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(404, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:10: ( ( '.' ( Num )+ ( ExponentPart )? ) | ( ExponentPart ) )
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='.'))
				{
					alt10 = 1;
				}
				else if ((LA10_0=='E'||LA10_0=='e'))
				{
					alt10 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:11: ( '.' ( Num )+ ( ExponentPart )? )
					{
					DebugLocation(404, 11);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:11: ( '.' ( Num )+ ( ExponentPart )? )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:12: '.' ( Num )+ ( ExponentPart )?
					{
					DebugLocation(404, 12);
					Match('.'); 
					DebugLocation(404, 15);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:15: ( Num )+
					int cnt8=0;
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if (((LA8_0>='0' && LA8_0<='9')))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch (alt8)
						{
						case 1:
							DebugEnterAlt(1);
							// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
							{
							DebugLocation(404, 15);
							input.Consume();


							}
							break;

						default:
							if (cnt8 >= 1)
								goto loop8;

							EarlyExitException eee8 = new EarlyExitException( 8, input );
							DebugRecognitionException(eee8);
							throw eee8;
						}
						cnt8++;
					}
					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(404, 20);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:20: ( ExponentPart )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0=='E'||LA9_0=='e'))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:21: ExponentPart
						{
						DebugLocation(404, 21);
						mExponentPart(); 

						}
						break;

					}
					} finally { DebugExitSubRule(9); }


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:38: ( ExponentPart )
					{
					DebugLocation(404, 38);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:38: ( ExponentPart )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:404:39: ExponentPart
					{
					DebugLocation(404, 39);
					mExponentPart(); 

					}


					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RealLiteralExp", 73);
			LeaveRule("RealLiteralExp", 73);
			LeaveRule_RealLiteralExp();
		}
	}
	// $ANTLR end "RealLiteralExp"

	partial void EnterRule_StringLiteralExp();
	partial void LeaveRule_StringLiteralExp();

	// $ANTLR start "StringLiteralExp"
	[GrammarRule("StringLiteralExp")]
	private void mStringLiteralExp()
	{
		EnterRule_StringLiteralExp();
		EnterRule("StringLiteralExp", 74);
		TraceIn("StringLiteralExp", 74);
		try
		{
			int _type = StringLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:408:2: ( '\\'' ( StringChar )* '\\'' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:408:4: '\\'' ( StringChar )* '\\''
			{
			DebugLocation(408, 4);
			Match('\''); 
			DebugLocation(408, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:408:9: ( StringChar )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if (((LA12_0>=' ' && LA12_0<='&')||(LA12_0>='(' && LA12_0<='\uD7FF')||(LA12_0>='\uE000' && LA12_0<='\uFFFD')))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:408:9: StringChar
					{
					DebugLocation(408, 9);
					mStringChar(); 

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(408, 21);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("StringLiteralExp", 74);
			LeaveRule("StringLiteralExp", 74);
			LeaveRule_StringLiteralExp();
		}
	}
	// $ANTLR end "StringLiteralExp"

	partial void EnterRule_NESTED_ML_COMMENT();
	partial void LeaveRule_NESTED_ML_COMMENT();

	// $ANTLR start "NESTED_ML_COMMENT"
	[GrammarRule("NESTED_ML_COMMENT")]
	private void mNESTED_ML_COMMENT()
	{
		EnterRule_NESTED_ML_COMMENT();
		EnterRule("NESTED_ML_COMMENT", 75);
		TraceIn("NESTED_ML_COMMENT", 75);
		try
		{
			int _type = NESTED_ML_COMMENT;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:413:5: ( '/*' ( options {greedy=false; } : NESTED_ML_COMMENT | . )* '*/' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:413:9: '/*' ( options {greedy=false; } : NESTED_ML_COMMENT | . )* '*/'
			{
			DebugLocation(413, 9);
			Match("/*"); 

			DebugLocation(414, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:414:9: ( options {greedy=false; } : NESTED_ML_COMMENT | . )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=3;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0=='*'))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1=='/'))
					{
						alt13 = 3;
					}
					else if (((LA13_1>='\u0000' && LA13_1<='.')||(LA13_1>='0' && LA13_1<='\uFFFF')))
					{
						alt13 = 2;
					}


				}
				else if ((LA13_0=='/'))
				{
					int LA13_2 = input.LA(2);

					if ((LA13_2=='*'))
					{
						alt13 = 1;
					}
					else if (((LA13_2>='\u0000' && LA13_2<=')')||(LA13_2>='+' && LA13_2<='\uFFFF')))
					{
						alt13 = 2;
					}


				}
				else if (((LA13_0>='\u0000' && LA13_0<=')')||(LA13_0>='+' && LA13_0<='.')||(LA13_0>='0' && LA13_0<='\uFFFF')))
				{
					alt13 = 2;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:414:36: NESTED_ML_COMMENT
					{
					DebugLocation(414, 36);
					mNESTED_ML_COMMENT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:414:56: .
					{
					DebugLocation(414, 56);
					MatchAny(); 

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(415, 9);
			Match("*/"); 

			DebugLocation(415, 14);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NESTED_ML_COMMENT", 75);
			LeaveRule("NESTED_ML_COMMENT", 75);
			LeaveRule_NESTED_ML_COMMENT();
		}
	}
	// $ANTLR end "NESTED_ML_COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 76);
		TraceIn("LINE_COMMENT", 76);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:2: ( '--' (~ ( '\\n' | '\\r' ) )* ( ( ( '\\r' )? '\\n' ) | EOF ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:3: '--' (~ ( '\\n' | '\\r' ) )* ( ( ( '\\r' )? '\\n' ) | EOF )
			{
			DebugLocation(419, 3);
			Match("--"); 

			DebugLocation(419, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:9: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if (((LA14_0>='\u0000' && LA14_0<='\t')||(LA14_0>='\u000B' && LA14_0<='\f')||(LA14_0>='\u000E' && LA14_0<='\uFFFF')))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
					{
					DebugLocation(419, 9);
					input.Consume();


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(419, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:23: ( ( ( '\\r' )? '\\n' ) | EOF )
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0=='\n'||LA16_0=='\r'))
			{
				alt16 = 1;
			}
			else
			{
				alt16 = 2;}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:24: ( ( '\\r' )? '\\n' )
				{
				DebugLocation(419, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:24: ( ( '\\r' )? '\\n' )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:25: ( '\\r' )? '\\n'
				{
				DebugLocation(419, 25);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:25: ( '\\r' )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0=='\r'))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:25: '\\r'
					{
					DebugLocation(419, 25);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(419, 31);
				Match('\n'); 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:419:37: EOF
				{
				DebugLocation(419, 37);
				Match(EOF); 

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(419, 42);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 76);
			LeaveRule("LINE_COMMENT", 76);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 77);
		TraceIn("WS", 77);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:423:5: ( WhiteSpaceChar )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:423:9: WhiteSpaceChar
			{
			DebugLocation(423, 9);
			mWhiteSpaceChar(); 
			DebugLocation(423, 24);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 77);
			LeaveRule("WS", 77);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_NameStartChar();
	partial void LeaveRule_NameStartChar();

	// $ANTLR start "NameStartChar"
	[GrammarRule("NameStartChar")]
	private void mNameStartChar()
	{
		EnterRule_NameStartChar();
		EnterRule("NameStartChar", 78);
		TraceIn("NameStartChar", 78);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:432:2: ( 'A' .. 'Z' | '_' | '$' | 'a' .. 'z' | '\\u00C0' .. '\\u00D6' | '\\u00D8' .. '\\u00F6' | '\\u00F8' .. '\\u02FF' | '\\u0370' .. '\\u037D' | '\\u037F' .. '\\u1FFF' | '\\u200C' .. '\\u200D' | '\\u2070' .. '\\u218F' | '\\u2C00' .. '\\u2FEF' | '\\u3001' .. '\\uD7FF' | '\\uF900' .. '\\uFDCF' | '\\uFDF0' .. '\\uFFFD' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			DebugLocation(432, 2);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("NameStartChar", 78);
			LeaveRule("NameStartChar", 78);
			LeaveRule_NameStartChar();
		}
	}
	// $ANTLR end "NameStartChar"

	partial void EnterRule_NameChar();
	partial void LeaveRule_NameChar();

	// $ANTLR start "NameChar"
	[GrammarRule("NameChar")]
	private void mNameChar()
	{
		EnterRule_NameChar();
		EnterRule("NameChar", 79);
		TraceIn("NameChar", 79);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:441:2: ( NameStartChar | Num )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			DebugLocation(441, 2);
			if (input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("NameChar", 79);
			LeaveRule("NameChar", 79);
			LeaveRule_NameChar();
		}
	}
	// $ANTLR end "NameChar"

	partial void EnterRule_StringChar();
	partial void LeaveRule_StringChar();

	// $ANTLR start "StringChar"
	[GrammarRule("StringChar")]
	private void mStringChar()
	{
		EnterRule_StringChar();
		EnterRule("StringChar", 80);
		TraceIn("StringChar", 80);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:447:2: ( Char | EscapeSequence )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if (((LA17_0>=' ' && LA17_0<='&')||(LA17_0>='(' && LA17_0<='[')||(LA17_0>=']' && LA17_0<='\uD7FF')||(LA17_0>='\uE000' && LA17_0<='\uFFFD')))
			{
				alt17 = 1;
			}
			else if ((LA17_0=='\\'))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:447:4: Char
				{
				DebugLocation(447, 4);
				mChar(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:447:11: EscapeSequence
				{
				DebugLocation(447, 11);
				mEscapeSequence(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("StringChar", 80);
			LeaveRule("StringChar", 80);
			LeaveRule_StringChar();
		}
	}
	// $ANTLR end "StringChar"

	partial void EnterRule_WhiteSpaceChar();
	partial void LeaveRule_WhiteSpaceChar();

	// $ANTLR start "WhiteSpaceChar"
	[GrammarRule("WhiteSpaceChar")]
	private void mWhiteSpaceChar()
	{
		EnterRule_WhiteSpaceChar();
		EnterRule("WhiteSpaceChar", 81);
		TraceIn("WhiteSpaceChar", 81);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:452:2: ( '\\t' | '\\n' | '\\f' | '\\r' | ' ' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			DebugLocation(452, 2);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("WhiteSpaceChar", 81);
			LeaveRule("WhiteSpaceChar", 81);
			LeaveRule_WhiteSpaceChar();
		}
	}
	// $ANTLR end "WhiteSpaceChar"

	partial void EnterRule_Char();
	partial void LeaveRule_Char();

	// $ANTLR start "Char"
	[GrammarRule("Char")]
	private void mChar()
	{
		EnterRule_Char();
		EnterRule("Char", 82);
		TraceIn("Char", 82);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:459:2: ( '\\u0020' .. '\\u0026' | '\\u0028' .. '\\u005B' | '\\u005D' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			DebugLocation(459, 2);
			if ((input.LA(1)>=' ' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uE000' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("Char", 82);
			LeaveRule("Char", 82);
			LeaveRule_Char();
		}
	}
	// $ANTLR end "Char"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 83);
		TraceIn("EscapeSequence", 83);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:465:2: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' | 'x' Hex Hex | 'u' Hex Hex Hex Hex ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:465:4: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' | 'x' Hex Hex | 'u' Hex Hex Hex Hex )
			{
			DebugLocation(465, 4);
			Match('\\'); 
			DebugLocation(466, 3);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:466:3: ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' | 'x' Hex Hex | 'u' Hex Hex Hex Hex )
			int alt18=10;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case 'b':
				{
				alt18 = 1;
				}
				break;
			case 't':
				{
				alt18 = 2;
				}
				break;
			case 'n':
				{
				alt18 = 3;
				}
				break;
			case 'f':
				{
				alt18 = 4;
				}
				break;
			case 'r':
				{
				alt18 = 5;
				}
				break;
			case '\"':
				{
				alt18 = 6;
				}
				break;
			case '\'':
				{
				alt18 = 7;
				}
				break;
			case '\\':
				{
				alt18 = 8;
				}
				break;
			case 'x':
				{
				alt18 = 9;
				}
				break;
			case 'u':
				{
				alt18 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:466:4: 'b'
				{
				DebugLocation(466, 4);
				Match('b'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:467:5: 't'
				{
				DebugLocation(467, 5);
				Match('t'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:468:5: 'n'
				{
				DebugLocation(468, 5);
				Match('n'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:469:5: 'f'
				{
				DebugLocation(469, 5);
				Match('f'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:470:5: 'r'
				{
				DebugLocation(470, 5);
				Match('r'); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:471:5: '\\\"'
				{
				DebugLocation(471, 5);
				Match('\"'); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:472:5: '\\''
				{
				DebugLocation(472, 5);
				Match('\''); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:473:5: '\\\\'
				{
				DebugLocation(473, 5);
				Match('\\'); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:474:5: 'x' Hex Hex
				{
				DebugLocation(474, 5);
				Match('x'); 
				DebugLocation(474, 9);
				mHex(); 
				DebugLocation(474, 13);
				mHex(); 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:475:5: 'u' Hex Hex Hex Hex
				{
				DebugLocation(475, 5);
				Match('u'); 
				DebugLocation(475, 9);
				mHex(); 
				DebugLocation(475, 13);
				mHex(); 
				DebugLocation(475, 17);
				mHex(); 
				DebugLocation(475, 21);
				mHex(); 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

		}
		finally
		{
			TraceOut("EscapeSequence", 83);
			LeaveRule("EscapeSequence", 83);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_Hex();
	partial void LeaveRule_Hex();

	// $ANTLR start "Hex"
	[GrammarRule("Hex")]
	private void mHex()
	{
		EnterRule_Hex();
		EnterRule("Hex", 84);
		TraceIn("Hex", 84);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:480:5: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			DebugLocation(480, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("Hex", 84);
			LeaveRule("Hex", 84);
			LeaveRule_Hex();
		}
	}
	// $ANTLR end "Hex"

	partial void EnterRule_Num();
	partial void LeaveRule_Num();

	// $ANTLR start "Num"
	[GrammarRule("Num")]
	private void mNum()
	{
		EnterRule_Num();
		EnterRule("Num", 85);
		TraceIn("Num", 85);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:485:2: ( '0' .. '9' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			DebugLocation(485, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("Num", 85);
			LeaveRule("Num", 85);
			LeaveRule_Num();
		}
	}
	// $ANTLR end "Num"

	partial void EnterRule_ExponentPart();
	partial void LeaveRule_ExponentPart();

	// $ANTLR start "ExponentPart"
	[GrammarRule("ExponentPart")]
	private void mExponentPart()
	{
		EnterRule_ExponentPart();
		EnterRule("ExponentPart", 86);
		TraceIn("ExponentPart", 86);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:490:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( Num )+ )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:490:3: ( 'e' | 'E' ) ( '+' | '-' )? ( Num )+
			{
			DebugLocation(490, 3);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(490, 13);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:490:13: ( '+' | '-' )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0=='+'||LA19_0=='-'))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
				{
				DebugLocation(490, 13);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(490, 24);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:490:24: ( Num )+
			int cnt20=0;
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if (((LA20_0>='0' && LA20_0<='9')))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
					{
					DebugLocation(490, 24);
					input.Consume();


					}
					break;

				default:
					if (cnt20 >= 1)
						goto loop20;

					EarlyExitException eee20 = new EarlyExitException( 20, input );
					DebugRecognitionException(eee20);
					throw eee20;
				}
				cnt20++;
			}
			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

		}
		finally
		{
			TraceOut("ExponentPart", 86);
			LeaveRule("ExponentPart", 86);
			LeaveRule_ExponentPart();
		}
	}
	// $ANTLR end "ExponentPart"

	public override void mTokens()
	{
		// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:8: ( T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | DoubleDot | NullLiteralExp | InvalidLiteralExp | SimpleName | UnlimitedNaturalLiteralExp | IntegerLiteralExp | RealLiteralExp | StringLiteralExp | NESTED_ML_COMMENT | LINE_COMMENT | WS )
		int alt21=77;
		try { DebugEnterDecision(21, false);
		try
		{
			alt21 = dfa21.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(21); }
		switch (alt21)
		{
		case 1:
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:10: T__62
			{
			DebugLocation(1, 10);
			mT__62(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:16: T__63
			{
			DebugLocation(1, 16);
			mT__63(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:22: T__64
			{
			DebugLocation(1, 22);
			mT__64(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:28: T__65
			{
			DebugLocation(1, 28);
			mT__65(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:34: T__66
			{
			DebugLocation(1, 34);
			mT__66(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:40: T__67
			{
			DebugLocation(1, 40);
			mT__67(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:46: T__68
			{
			DebugLocation(1, 46);
			mT__68(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:52: T__69
			{
			DebugLocation(1, 52);
			mT__69(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:58: T__70
			{
			DebugLocation(1, 58);
			mT__70(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:64: T__71
			{
			DebugLocation(1, 64);
			mT__71(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:70: T__72
			{
			DebugLocation(1, 70);
			mT__72(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:76: T__73
			{
			DebugLocation(1, 76);
			mT__73(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:82: T__74
			{
			DebugLocation(1, 82);
			mT__74(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:88: T__75
			{
			DebugLocation(1, 88);
			mT__75(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:94: T__76
			{
			DebugLocation(1, 94);
			mT__76(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:100: T__77
			{
			DebugLocation(1, 100);
			mT__77(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:106: T__78
			{
			DebugLocation(1, 106);
			mT__78(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:112: T__79
			{
			DebugLocation(1, 112);
			mT__79(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:118: T__80
			{
			DebugLocation(1, 118);
			mT__80(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:124: T__81
			{
			DebugLocation(1, 124);
			mT__81(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:130: T__82
			{
			DebugLocation(1, 130);
			mT__82(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:136: T__83
			{
			DebugLocation(1, 136);
			mT__83(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:142: T__84
			{
			DebugLocation(1, 142);
			mT__84(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:148: T__85
			{
			DebugLocation(1, 148);
			mT__85(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:154: T__86
			{
			DebugLocation(1, 154);
			mT__86(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:160: T__87
			{
			DebugLocation(1, 160);
			mT__87(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:166: T__88
			{
			DebugLocation(1, 166);
			mT__88(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:172: T__89
			{
			DebugLocation(1, 172);
			mT__89(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:178: T__90
			{
			DebugLocation(1, 178);
			mT__90(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:184: T__91
			{
			DebugLocation(1, 184);
			mT__91(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:190: T__92
			{
			DebugLocation(1, 190);
			mT__92(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:196: T__93
			{
			DebugLocation(1, 196);
			mT__93(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:202: T__94
			{
			DebugLocation(1, 202);
			mT__94(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:208: T__95
			{
			DebugLocation(1, 208);
			mT__95(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:214: T__96
			{
			DebugLocation(1, 214);
			mT__96(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:220: T__97
			{
			DebugLocation(1, 220);
			mT__97(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:226: T__98
			{
			DebugLocation(1, 226);
			mT__98(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:232: T__99
			{
			DebugLocation(1, 232);
			mT__99(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:238: T__100
			{
			DebugLocation(1, 238);
			mT__100(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:245: T__101
			{
			DebugLocation(1, 245);
			mT__101(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:252: T__102
			{
			DebugLocation(1, 252);
			mT__102(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:259: T__103
			{
			DebugLocation(1, 259);
			mT__103(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:266: T__104
			{
			DebugLocation(1, 266);
			mT__104(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:273: T__105
			{
			DebugLocation(1, 273);
			mT__105(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:280: T__106
			{
			DebugLocation(1, 280);
			mT__106(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:287: T__107
			{
			DebugLocation(1, 287);
			mT__107(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:294: T__108
			{
			DebugLocation(1, 294);
			mT__108(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:301: T__109
			{
			DebugLocation(1, 301);
			mT__109(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:308: T__110
			{
			DebugLocation(1, 308);
			mT__110(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:315: T__111
			{
			DebugLocation(1, 315);
			mT__111(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:322: T__112
			{
			DebugLocation(1, 322);
			mT__112(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:329: T__113
			{
			DebugLocation(1, 329);
			mT__113(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:336: T__114
			{
			DebugLocation(1, 336);
			mT__114(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:343: T__115
			{
			DebugLocation(1, 343);
			mT__115(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:350: T__116
			{
			DebugLocation(1, 350);
			mT__116(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:357: T__117
			{
			DebugLocation(1, 357);
			mT__117(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:364: T__118
			{
			DebugLocation(1, 364);
			mT__118(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:371: T__119
			{
			DebugLocation(1, 371);
			mT__119(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:378: T__120
			{
			DebugLocation(1, 378);
			mT__120(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:385: T__121
			{
			DebugLocation(1, 385);
			mT__121(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:392: T__122
			{
			DebugLocation(1, 392);
			mT__122(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:399: T__123
			{
			DebugLocation(1, 399);
			mT__123(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:406: T__124
			{
			DebugLocation(1, 406);
			mT__124(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:413: T__125
			{
			DebugLocation(1, 413);
			mT__125(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:420: T__126
			{
			DebugLocation(1, 420);
			mT__126(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:427: T__127
			{
			DebugLocation(1, 427);
			mT__127(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:434: DoubleDot
			{
			DebugLocation(1, 434);
			mDoubleDot(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:444: NullLiteralExp
			{
			DebugLocation(1, 444);
			mNullLiteralExp(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:459: InvalidLiteralExp
			{
			DebugLocation(1, 459);
			mInvalidLiteralExp(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:477: SimpleName
			{
			DebugLocation(1, 477);
			mSimpleName(); 

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:488: UnlimitedNaturalLiteralExp
			{
			DebugLocation(1, 488);
			mUnlimitedNaturalLiteralExp(); 

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:515: IntegerLiteralExp
			{
			DebugLocation(1, 515);
			mIntegerLiteralExp(); 

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:533: RealLiteralExp
			{
			DebugLocation(1, 533);
			mRealLiteralExp(); 

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:548: StringLiteralExp
			{
			DebugLocation(1, 548);
			mStringLiteralExp(); 

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:565: NESTED_ML_COMMENT
			{
			DebugLocation(1, 565);
			mNESTED_ML_COMMENT(); 

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:583: LINE_COMMENT
			{
			DebugLocation(1, 583);
			mLINE_COMMENT(); 

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:1:596: WS
			{
			DebugLocation(1, 596);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA11 dfa11;
	DFA21 dfa21;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa11 = new DFA11(this);
		dfa21 = new DFA21(this);
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\x5\xFFFF";
		private const string DFA11_eofS =
			"\x5\xFFFF";
		private const string DFA11_minS =
			"\x1\x30\x2\x2E\x2\xFFFF";
		private const string DFA11_maxS =
			"\x1\x39\x1\x65\x1\x39\x2\xFFFF";
		private const string DFA11_acceptS =
			"\x3\xFFFF\x1\x2\x1\x1";
		private const string DFA11_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\xA\x1",
				"\x1\x2\x1\xFFFF\xA\x1\xB\xFFFF\x1\x3\x1F\xFFFF\x1\x3",
				"\x1\x4\x1\xFFFF\xA\x3",
				"",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "398:1: RealLiteralExp : ( (n= Num )+ d= '..' | ( Num )+ ( ( '.' ( Num )+ ( ExponentPart )? ) | ( ExponentPart ) ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x5\xFFFF\x1\x34\x1\x36\x1\x38\x1\x3A\x1\xFFFF\x1\x3D\x1\xFFFF\x1\x3F"+
			"\x2\xFFFF\x8\x2C\x2\xFFFF\x1\x4C\xF\x2C\x5\xFFFF\x2\x64\x10\xFFFF\xB"+
			"\x2C\x2\xFFFF\x7\x2C\x1\x7B\x1\x2C\x1\x7F\x6\x2C\x1\x86\x6\x2C\x2\xFFFF"+
			"\x1\x64\x1\x8D\x7\x2C\x1\x98\x3\x2C\x1\x9C\x2\x2C\x1\x9F\x4\x2C\x1\xFFFF"+
			"\x2\x2C\x1\xA7\x1\xFFFF\x1\x2C\x1\xA9\x1\x2C\x1\xAB\x1\xAC\x1\x2C\x1"+
			"\xFFFF\x1\x2C\x1\xAF\x3\x2C\x1\xB3\x1\xFFFF\x8\x2C\x1\xBC\x1\x2C\x1\xFFFF"+
			"\x3\x2C\x1\xFFFF\x1\xC1\x1\x2C\x1\xFFFF\x1\x2C\x1\xC4\x3\x2C\x1\xC8\x1"+
			"\x2C\x1\xFFFF\x1\x2C\x1\xFFFF\x1\x2C\x2\xFFFF\x1\xCC\x1\xCD\x1\xFFFF"+
			"\x1\x2C\x1\xCF\x1\xD0\x1\xFFFF\x8\x2C\x1\xFFFF\x2\x2C\x1\xDB\x1\x2C\x1"+
			"\xFFFF\x2\x2C\x1\xFFFF\x1\xDF\x1\xE0\x1\x2C\x1\xFFFF\x3\x2C\x2\xFFFF"+
			"\x1\x2C\x2\xFFFF\x3\x2C\x1\xE9\x5\x2C\x1\xEF\x1\xFFFF\x2\x2C\x1\xF2\x2"+
			"\xFFFF\x4\x2C\x1\xF7\x1\xF8\x1\x2C\x1\xFA\x1\xFFFF\x2\x2C\x1\xFD\x2\x2C"+
			"\x1\xFFFF\x1\x2C\x1\x101\x1\xFFFF\x1\x102\x1\x103\x1\x104\x1\x105\x2"+
			"\xFFFF\x1\x2C\x1\xFFFF\x2\x2C\x1\xFFFF\x1\x2C\x1\x10A\x1\x2C\x5\xFFFF"+
			"\x4\x2C\x1\xFFFF\x1\x2C\x1\x111\x1\x112\x1\x113\x1\x114\x1\x2C\x4\xFFFF"+
			"\x5\x2C\x1\x11B\x1\xFFFF";
		private const string DFA21_eofS =
			"\x11C\xFFFF";
		private const string DFA21_minS =
			"\x1\x9\x4\xFFFF\x1\x2D\x1\x2E\x1\x2A\x1\x3A\x1\xFFFF\x1\x3D\x1\xFFFF"+
			"\x1\x3D\x2\xFFFF\x1\x61\x1\x6F\x1\x6E\x1\x63\x2\x65\x1\x75\x1\x6E\x2"+
			"\xFFFF\x1\x5E\x1\x6E\x2\x6F\x1\x65\x1\x6C\x1\x61\x1\x66\x3\x65\x1\x72"+
			"\x1\x6F\x1\x74\x1\x68\x1\x6F\x5\xFFFF\x2\x2E\x10\xFFFF\x1\x67\x1\x6F"+
			"\x1\x6C\x1\x74\x1\x6C\x1\x64\x1\x61\x1\x71\x1\x72\x1\x70\x1\x6C\x2\xFFFF"+
			"\x2\x64\x1\x6E\x1\x66\x1\x73\x1\x64\x1\x6C\x1\x24\x1\x70\x1\x24\x1\x65"+
			"\x1\x74\x1\x73\x1\x77\x1\x74\x1\x6C\x1\x24\x1\x73\x1\x65\x1\x61\x1\x65"+
			"\x1\x75\x1\x72\x2\xFFFF\x1\x2E\x1\x24\x2\x6C\x1\x65\x1\x41\x1\x65\x1"+
			"\x6C\x1\x75\x1\x24\x1\x69\x1\x6C\x1\x69\x1\x24\x1\x79\x1\x74\x1\x24\x1"+
			"\x69\x1\x65\x1\x69\x1\x73\x1\xFFFF\x1\x6C\x1\x74\x1\x24\x1\xFFFF\x1\x72"+
			"\x1\x24\x1\x73\x2\x24\x1\x6C\x1\xFFFF\x1\x74\x1\x24\x1\x74\x1\x6E\x1"+
			"\x65\x1\x24\x1\xFFFF\x2\x65\x1\x67\x2\x6E\x1\x65\x1\x6F\x1\x72\x1\x24"+
			"\x1\x65\x1\xFFFF\x1\x6E\x1\x65\x1\x6D\x1\xFFFF\x1\x24\x1\x65\x1\xFFFF"+
			"\x1\x76\x1\x24\x1\x66\x1\x65\x1\x69\x1\x24\x1\x6C\x1\xFFFF\x1\x61\x1"+
			"\xFFFF\x1\x61\x2\xFFFF\x2\x24\x1\xFFFF\x1\x69\x2\x24\x1\xFFFF\x1\x61"+
			"\x1\x63\x1\x65\x1\x79\x1\x76\x1\x73\x1\x69\x1\x65\x1\xFFFF\x1\x6E\x1"+
			"\x67\x1\x24\x1\x69\x1\xFFFF\x1\x78\x1\x65\x1\xFFFF\x2\x24\x1\x65\x1\xFFFF"+
			"\x1\x69\x1\x74\x1\x67\x2\xFFFF\x1\x63\x2\xFFFF\x1\x6E\x1\x74\x1\x72\x1"+
			"\x24\x1\x61\x1\x73\x2\x64\x1\x63\x1\x24\x1\xFFFF\x2\x74\x1\x24\x2\xFFFF"+
			"\x1\x73\x1\x64\x2\x65\x2\x24\x1\x69\x1\x24\x1\xFFFF\x1\x6C\x1\x61\x1"+
			"\x24\x1\x53\x1\x65\x1\xFFFF\x1\x65\x1\x24\x1\xFFFF\x4\x24\x2\xFFFF\x1"+
			"\x6F\x1\xFFFF\x1\x69\x1\x67\x1\xFFFF\x1\x65\x1\x24\x1\x64\x5\xFFFF\x1"+
			"\x6E\x1\x64\x1\x65\x1\x74\x1\xFFFF\x1\x4E\x4\x24\x1\x61\x4\xFFFF\x1\x74"+
			"\x1\x75\x1\x72\x1\x61\x1\x6C\x1\x24\x1\xFFFF";
		private const string DFA21_maxS =
			"\x1\xFFFD\x4\xFFFF\x1\x3E\x1\x2E\x1\x2A\x1\x3A\x1\xFFFF\x1\x3E\x1\xFFFF"+
			"\x1\x3D\x2\xFFFF\x2\x6F\x1\x6E\x1\x72\x1\x65\x1\x74\x1\x75\x1\x6E\x2"+
			"\xFFFF\x1\x5E\x1\x6E\x2\x6F\x1\x65\x1\x6E\x1\x61\x1\x74\x2\x65\x1\x75"+
			"\x2\x72\x1\x74\x1\x72\x1\x6F\x5\xFFFF\x2\x65\x10\xFFFF\x1\x67\x1\x6F"+
			"\x1\x6C\x1\x74\x1\x6C\x1\x64\x1\x61\x1\x74\x1\x72\x1\x70\x1\x6C\x2\xFFFF"+
			"\x2\x64\x1\x6E\x1\x72\x1\x73\x1\x64\x1\x6C\x1\xFFFD\x1\x70\x1\xFFFD\x1"+
			"\x65\x1\x74\x1\x73\x1\x77\x1\x74\x1\x6C\x1\xFFFD\x1\x73\x1\x65\x1\x61"+
			"\x1\x65\x1\x75\x1\x72\x2\xFFFF\x1\x65\x1\xFFFD\x2\x6C\x1\x65\x1\x56\x1"+
			"\x65\x1\x6C\x1\x75\x1\xFFFD\x1\x69\x1\x6C\x1\x69\x1\xFFFD\x1\x79\x1\x74"+
			"\x1\xFFFD\x1\x69\x1\x65\x1\x69\x1\x73\x1\xFFFF\x1\x6C\x1\x74\x1\xFFFD"+
			"\x1\xFFFF\x1\x72\x1\xFFFD\x1\x73\x2\xFFFD\x1\x6C\x1\xFFFF\x1\x74\x1\xFFFD"+
			"\x1\x74\x1\x6E\x1\x65\x1\xFFFD\x1\xFFFF\x2\x65\x1\x67\x2\x6E\x1\x65\x1"+
			"\x6F\x1\x72\x1\xFFFD\x1\x65\x1\xFFFF\x1\x6E\x1\x65\x1\x6D\x1\xFFFF\x1"+
			"\xFFFD\x1\x65\x1\xFFFF\x1\x76\x1\xFFFD\x1\x66\x1\x65\x1\x69\x1\xFFFD"+
			"\x1\x6C\x1\xFFFF\x1\x61\x1\xFFFF\x1\x61\x2\xFFFF\x2\xFFFD\x1\xFFFF\x1"+
			"\x69\x2\xFFFD\x1\xFFFF\x1\x61\x1\x63\x1\x65\x1\x79\x1\x76\x1\x73\x1\x69"+
			"\x1\x65\x1\xFFFF\x1\x6E\x1\x67\x1\xFFFD\x1\x69\x1\xFFFF\x1\x78\x1\x65"+
			"\x1\xFFFF\x2\xFFFD\x1\x65\x1\xFFFF\x1\x69\x1\x74\x1\x67\x2\xFFFF\x1\x63"+
			"\x2\xFFFF\x1\x6E\x1\x74\x1\x72\x1\xFFFD\x1\x61\x1\x73\x2\x64\x1\x63\x1"+
			"\xFFFD\x1\xFFFF\x2\x74\x1\xFFFD\x2\xFFFF\x1\x73\x1\x64\x2\x65\x2\xFFFD"+
			"\x1\x69\x1\xFFFD\x1\xFFFF\x1\x6C\x1\x61\x1\xFFFD\x1\x53\x1\x65\x1\xFFFF"+
			"\x1\x65\x1\xFFFD\x1\xFFFF\x4\xFFFD\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x69\x1"+
			"\x67\x1\xFFFF\x1\x65\x1\xFFFD\x1\x64\x5\xFFFF\x1\x6E\x1\x64\x1\x65\x1"+
			"\x74\x1\xFFFF\x1\x4E\x4\xFFFD\x1\x61\x4\xFFFF\x1\x74\x1\x75\x1\x72\x1"+
			"\x61\x1\x6C\x1\xFFFD\x1\xFFFF";
		private const string DFA21_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x4\xFFFF\x1\xB\x1\xFFFF\x1\xF\x1\xFFFF"+
			"\x1\x12\x1\x13\x8\xFFFF\x1\x23\x1\x24\x10\xFFFF\x1\x40\x1\x41\x1\x42"+
			"\x1\x46\x1\x47\x2\xFFFF\x1\x4A\x1\x4D\x1\x6\x1\x4C\x1\x5\x1\x43\x1\x7"+
			"\x1\x4B\x1\x8\x1\xA\x1\x9\x1\xD\x1\xE\x1\xC\x1\x11\x1\x10\xB\xFFFF\x1"+
			"\x26\x1\x25\x17\xFFFF\x1\x48\x1\x49\x15\xFFFF\x1\x2F\x3\xFFFF\x1\x31"+
			"\x6\xFFFF\x1\x39\x6\xFFFF\x1\x14\xA\xFFFF\x1\x1F\x3\xFFFF\x1\x27\x2\xFFFF"+
			"\x1\x2A\x7\xFFFF\x1\x33\x1\xFFFF\x1\x35\x1\xFFFF\x1\x37\x1\x38\x2\xFFFF"+
			"\x1\x3B\x3\xFFFF\x1\x3F\x8\xFFFF\x1\x1D\x4\xFFFF\x1\x28\x2\xFFFF\x1\x2C"+
			"\x3\xFFFF\x1\x32\x3\xFFFF\x1\x44\x1\x3A\x1\xFFFF\x1\x3D\x1\x3E\xA\xFFFF"+
			"\x1\x21\x3\xFFFF\x1\x2D\x1\x2E\x8\xFFFF\x1\x18\x5\xFFFF\x1\x20\x2\xFFFF"+
			"\x1\x2B\x4\xFFFF\x1\x3C\x1\x15\x1\xFFFF\x1\x17\x2\xFFFF\x1\x1B\x3\xFFFF"+
			"\x1\x29\x1\x30\x1\x45\x1\x34\x1\x36\x4\xFFFF\x1\x1E\x6\xFFFF\x1\x16\x1"+
			"\x19\x1\x1A\x1\x1C\x6\xFFFF\x1\x22";
		private const string DFA21_specialS =
			"\x11C\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x2\x31\x1\xFFFF\x2\x31\x12\xFFFF\x1\x31\x3\xFFFF\x1\x2C\x2\xFFFF\x1"+
				"\x30\x1\x1\x1\x2\x1\x2D\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x2E\x9\x2F"+
				"\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\x2C\x1\xF\x1\x10\x5\x2C"+
				"\x1\x11\x5\x2C\x1\x12\x2\x2C\x1\x13\x1\x14\x1\x15\x1\x16\x5\x2C\x1\x17"+
				"\x1\xFFFF\x1\x18\x1\x19\x1\x2C\x1\xFFFF\x1\x1A\x1\x1B\x1\x1C\x1\x1D"+
				"\x1\x1E\x1\x1F\x2\x2C\x1\x20\x2\x2C\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25"+
				"\x2\x2C\x1\x26\x1\x27\x3\x2C\x1\x28\x2\x2C\x1\x29\x1\x2A\x1\x2B\x42"+
				"\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF\xE\x2C\x1"+
				"\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF\x3F0"+
				"\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"",
				"",
				"",
				"\x1\x33\x10\xFFFF\x1\x32",
				"\x1\x35",
				"\x1\x37",
				"\x1\x39",
				"",
				"\x1\x3B\x1\x3C",
				"",
				"\x1\x3E",
				"",
				"",
				"\x1\x40\xD\xFFFF\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44\xE\xFFFF\x1\x45",
				"\x1\x46",
				"\x1\x47\xE\xFFFF\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"",
				"",
				"\x1\x4B",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51\x1\xFFFF\x1\x52",
				"\x1\x53",
				"\x1\x54\x6\xFFFF\x1\x55\x1\x56\x5\xFFFF\x1\x57",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A\x9\xFFFF\x1\x5B\x5\xFFFF\x1\x5C",
				"\x1\x5D",
				"\x1\x5E\x2\xFFFF\x1\x5F",
				"\x1\x60",
				"\x1\x61\x9\xFFFF\x1\x62",
				"\x1\x63",
				"",
				"",
				"",
				"",
				"",
				"\x1\x65\x1\xFFFF\xA\x65\xB\xFFFF\x1\x65\x1F\xFFFF\x1\x65",
				"\x1\x65\x1\xFFFF\xA\x66\xB\xFFFF\x1\x65\x1F\xFFFF\x1\x65",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E\x2\xFFFF\x1\x6F",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"",
				"",
				"\x1\x73",
				"\x1\x74",
				"\x1\x75",
				"\x1\x76\xB\xFFFF\x1\x77",
				"\x1\x78",
				"\x1\x79",
				"\x1\x7A",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x7C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x8"+
				"\x2C\x1\x7D\xC\x2C\x1\x7E\x4\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C"+
				"\x1\xFFFF\x208\x2C\x70\xFFFF\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C"+
				"\x62\xFFFF\x120\x2C\xA70\xFFFF\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF"+
				"\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x80",
				"\x1\x81",
				"\x1\x82",
				"\x1\x83",
				"\x1\x84",
				"\x1\x85",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x87",
				"\x1\x88",
				"\x1\x89",
				"\x1\x8A",
				"\x1\x8B",
				"\x1\x8C",
				"",
				"",
				"\x1\x65\x1\xFFFF\xA\x66\xB\xFFFF\x1\x65\x1F\xFFFF\x1\x65",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x8E",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91\x7\xFFFF\x1\x92\x3\xFFFF\x1\x93\x8\xFFFF\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x97",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x99",
				"\x1\x9A",
				"\x1\x9B",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xA0",
				"\x1\xA1",
				"\x1\xA2",
				"\x1\xA3",
				"",
				"\x1\xA4",
				"\x1\xA5",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1"+
				"\xA6\x19\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70"+
				"\xFFFF\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C"+
				"\xA70\xFFFF\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF"+
				"\x20E\x2C",
				"",
				"\x1\xA8",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xAA",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xAD",
				"",
				"\x1\xAE",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xB0",
				"\x1\xB1",
				"\x1\xB2",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"\x1\xB4",
				"\x1\xB5",
				"\x1\xB6",
				"\x1\xB7",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\xBA",
				"\x1\xBB",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xBD",
				"",
				"\x1\xBE",
				"\x1\xBF",
				"\x1\xC0",
				"",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xC2",
				"",
				"\x1\xC3",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xC9",
				"",
				"\x1\xCA",
				"",
				"\x1\xCB",
				"",
				"",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"\x1\xCE",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"\x1\xD1",
				"\x1\xD2",
				"\x1\xD3",
				"\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\xD7",
				"\x1\xD8",
				"",
				"\x1\xD9",
				"\x1\xDA",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xDC",
				"",
				"\x1\xDD",
				"\x1\xDE",
				"",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xE1",
				"",
				"\x1\xE2",
				"\x1\xE3",
				"\x1\xE4",
				"",
				"",
				"\x1\xE5",
				"",
				"",
				"\x1\xE6",
				"\x1\xE7",
				"\x1\xE8",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xEA",
				"\x1\xEB",
				"\x1\xEC",
				"\x1\xED",
				"\x1\xEE",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"\x1\xF0",
				"\x1\xF1",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"",
				"\x1\xF3",
				"\x1\xF4",
				"\x1\xF5",
				"\x1\xF6",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xF9",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"\x1\xFB",
				"\x1\xFC",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\xFE",
				"\x1\xFF",
				"",
				"\x1\x100",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"",
				"",
				"\x1\x106",
				"",
				"\x1\x107",
				"\x1\x108",
				"",
				"\x1\x109",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x10B",
				"",
				"",
				"",
				"",
				"",
				"\x1\x10C",
				"\x1\x10D",
				"\x1\x10E",
				"\x1\x10F",
				"",
				"\x1\x110",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				"\x1\x115",
				"",
				"",
				"",
				"",
				"\x1\x116",
				"\x1\x117",
				"\x1\x118",
				"\x1\x119",
				"\x1\x11A",
				"\x1\x2C\xB\xFFFF\xA\x2C\x7\xFFFF\x1A\x2C\x4\xFFFF\x1\x2C\x1\xFFFF\x1A"+
				"\x2C\x45\xFFFF\x17\x2C\x1\xFFFF\x1F\x2C\x1\xFFFF\x208\x2C\x70\xFFFF"+
				"\xE\x2C\x1\xFFFF\x1C81\x2C\xC\xFFFF\x2\x2C\x62\xFFFF\x120\x2C\xA70\xFFFF"+
				"\x3F0\x2C\x11\xFFFF\xA7FF\x2C\x2100\xFFFF\x4D0\x2C\x20\xFFFF\x20E\x2C",
				""
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | DoubleDot | NullLiteralExp | InvalidLiteralExp | SimpleName | UnlimitedNaturalLiteralExp | IntegerLiteralExp | RealLiteralExp | StringLiteralExp | NESTED_ML_COMMENT | LINE_COMMENT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Exolutio.Model.OCL.Compiler
