//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3 2012-05-30 11:10:18

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLSyntaxParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACC", "ARGS", "BODY", "CALL", "CALLARGS", "CLASSIFIERCONDITION", "CLASSIFIERHEAD", "CLASSLITERAL", "COLLECTIONLITERAL", "COLLECTIONTYPE", "COLLPART", "COLLPARTRANGE", "COLLTYPE", "CONDITION", "Char", "DECL", "DEF", "DERIVATE", "DoubleDot", "EscapeSequence", "ExponentPart", "Hex", "IF", "INDEX", "INFIX", "INIT", "INV", "ITERATE", "IntegerLiteralExp", "InvalidLiteralExp", "LET", "LINE_COMMENT", "MESSAGE", "NESTED_ML_COMMENT", "NameChar", "NameStartChar", "NullLiteralExp", "Num", "OPERATION", "OPERATIONCONDITION", "OPERATIONHEAD", "PATH", "POST", "PRE", "PRIMITIVELITERAL", "PROPERTYCONDITION", "PROPERTYHEAD", "RealLiteralExp", "SimpleName", "StringChar", "StringLiteralExp", "TUPLELITERAL", "TYPE", "UNARY", "UnlimitedNaturalLiteralExp", "VARDECL", "WS", "WhiteSpaceChar", "'('", "')'", "'+'", "','", "'-'", "'->'", "'.'", "'/'", "':'", "'::'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'?'", "'@'", "'Bag'", "'Boolean'", "'Collection'", "'Integer'", "'OclAny'", "'OclInvalid'", "'OclMessage'", "'OclVoid'", "'OrderedSet'", "'Real'", "'Sequence'", "'Set'", "'String'", "'Tuple'", "'UnlimitedNatural'", "'['", "']'", "'^'", "'^^'", "'and'", "'body'", "'context'", "'def'", "'derive'", "'else'", "'endif'", "'false'", "'if'", "'implies'", "'in'", "'init'", "'inv'", "'iterate'", "'let'", "'message'", "'new'", "'not'", "'or'", "'post'", "'pre'", "'static'", "'then'", "'true'", "'xor'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int ACC=4;
	public const int ARGS=5;
	public const int BODY=6;
	public const int CALL=7;
	public const int CALLARGS=8;
	public const int CLASSIFIERCONDITION=9;
	public const int CLASSIFIERHEAD=10;
	public const int CLASSLITERAL=11;
	public const int COLLECTIONLITERAL=12;
	public const int COLLECTIONTYPE=13;
	public const int COLLPART=14;
	public const int COLLPARTRANGE=15;
	public const int COLLTYPE=16;
	public const int CONDITION=17;
	public const int Char=18;
	public const int DECL=19;
	public const int DEF=20;
	public const int DERIVATE=21;
	public const int DoubleDot=22;
	public const int EscapeSequence=23;
	public const int ExponentPart=24;
	public const int Hex=25;
	public const int IF=26;
	public const int INDEX=27;
	public const int INFIX=28;
	public const int INIT=29;
	public const int INV=30;
	public const int ITERATE=31;
	public const int IntegerLiteralExp=32;
	public const int InvalidLiteralExp=33;
	public const int LET=34;
	public const int LINE_COMMENT=35;
	public const int MESSAGE=36;
	public const int NESTED_ML_COMMENT=37;
	public const int NameChar=38;
	public const int NameStartChar=39;
	public const int NullLiteralExp=40;
	public const int Num=41;
	public const int OPERATION=42;
	public const int OPERATIONCONDITION=43;
	public const int OPERATIONHEAD=44;
	public const int PATH=45;
	public const int POST=46;
	public const int PRE=47;
	public const int PRIMITIVELITERAL=48;
	public const int PROPERTYCONDITION=49;
	public const int PROPERTYHEAD=50;
	public const int RealLiteralExp=51;
	public const int SimpleName=52;
	public const int StringChar=53;
	public const int StringLiteralExp=54;
	public const int TUPLELITERAL=55;
	public const int TYPE=56;
	public const int UNARY=57;
	public const int UnlimitedNaturalLiteralExp=58;
	public const int VARDECL=59;
	public const int WS=60;
	public const int WhiteSpaceChar=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;

	// delegates
	// delegators

	public OCLSyntaxParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public OCLSyntaxParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return OCLSyntaxParser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class contextDeclarationList_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public contextDeclarationList_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_contextDeclarationList();
	partial void LeaveRule_contextDeclarationList();

	// $ANTLR start "contextDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:26:1: public contextDeclarationList : ( contextDeclaration )* EOF -> ^( CONDITION ( contextDeclaration )* ) ;
	[GrammarRule("contextDeclarationList")]
	public OCLSyntaxParser.contextDeclarationList_return contextDeclarationList()
	{
		EnterRule_contextDeclarationList();
		EnterRule("contextDeclarationList", 1);
		TraceIn("contextDeclarationList", 1);
		OCLSyntaxParser.contextDeclarationList_return retval = new OCLSyntaxParser.contextDeclarationList_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken EOF2 = default(CommonToken);
		OCLSyntaxParser.contextDeclaration_return contextDeclaration1 = default(OCLSyntaxParser.contextDeclaration_return);

		object EOF2_tree = default(object);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_contextDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule contextDeclaration");
		try { DebugEnterRule(GrammarFileName, "contextDeclarationList");
		DebugLocation(26, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:2: ( ( contextDeclaration )* EOF -> ^( CONDITION ( contextDeclaration )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:3: ( contextDeclaration )* EOF
			{
			DebugLocation(27, 3);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:3: ( contextDeclaration )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==102))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:3: contextDeclaration
					{
					DebugLocation(27, 3);
					PushFollow(Follow._contextDeclaration_in_contextDeclarationList174);
					contextDeclaration1=contextDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_contextDeclaration.Add(contextDeclaration1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(27, 23);
			EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_contextDeclarationList177); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF2);



			{
			// AST REWRITE
			// elements: contextDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 27:27: -> ^( CONDITION ( contextDeclaration )* )
			{
				DebugLocation(27, 30);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:30: ^( CONDITION ( contextDeclaration )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(27, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CONDITION, "CONDITION"), root_1);

				DebugLocation(27, 42);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:42: ( contextDeclaration )*
				while ( stream_contextDeclaration.HasNext )
				{
					DebugLocation(27, 42);
					adaptor.AddChild(root_1, stream_contextDeclaration.NextTree());

				}
				stream_contextDeclaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("contextDeclarationList", 1);
			LeaveRule("contextDeclarationList", 1);
			LeaveRule_contextDeclarationList();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclarationList"); }
		return retval;

	}
	// $ANTLR end "contextDeclarationList"

	public sealed partial class contextDeclaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public contextDeclaration_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_contextDeclaration();
	partial void LeaveRule_contextDeclaration();

	// $ANTLR start "contextDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:31:1: public contextDeclaration : ( propertyContextDecl | classifierContextDecl | operationContextDecl );
	[GrammarRule("contextDeclaration")]
	public OCLSyntaxParser.contextDeclaration_return contextDeclaration()
	{
		EnterRule_contextDeclaration();
		EnterRule("contextDeclaration", 2);
		TraceIn("contextDeclaration", 2);
		OCLSyntaxParser.contextDeclaration_return retval = new OCLSyntaxParser.contextDeclaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.propertyContextDecl_return propertyContextDecl3 = default(OCLSyntaxParser.propertyContextDecl_return);
		OCLSyntaxParser.classifierContextDecl_return classifierContextDecl4 = default(OCLSyntaxParser.classifierContextDecl_return);
		OCLSyntaxParser.operationContextDecl_return operationContextDecl5 = default(OCLSyntaxParser.operationContextDecl_return);


		try { DebugEnterRule(GrammarFileName, "contextDeclaration");
		DebugLocation(31, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:32:2: ( propertyContextDecl | classifierContextDecl | operationContextDecl )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			try
			{
				alt2 = dfa2.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:32:3: propertyContextDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(32, 3);
				PushFollow(Follow._propertyContextDecl_in_contextDeclaration199);
				propertyContextDecl3=propertyContextDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyContextDecl3.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:33:3: classifierContextDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(33, 3);
				PushFollow(Follow._classifierContextDecl_in_contextDeclaration203);
				classifierContextDecl4=classifierContextDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classifierContextDecl4.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:34:3: operationContextDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(34, 3);
				PushFollow(Follow._operationContextDecl_in_contextDeclaration207);
				operationContextDecl5=operationContextDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, operationContextDecl5.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("contextDeclaration", 2);
			LeaveRule("contextDeclaration", 2);
			LeaveRule_contextDeclaration();
		}
		DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclaration"); }
		return retval;

	}
	// $ANTLR end "contextDeclaration"

	private sealed partial class propertyContextDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyContextDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyContextDecl();
	partial void LeaveRule_propertyContextDecl();

	// $ANTLR start "propertyContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:37:1: propertyContextDecl : propertyContextHead ( initOrDerValue )* -> ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) ;
	[GrammarRule("propertyContextDecl")]
	private OCLSyntaxParser.propertyContextDecl_return propertyContextDecl()
	{
		EnterRule_propertyContextDecl();
		EnterRule("propertyContextDecl", 3);
		TraceIn("propertyContextDecl", 3);
		OCLSyntaxParser.propertyContextDecl_return retval = new OCLSyntaxParser.propertyContextDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.propertyContextHead_return propertyContextHead6 = default(OCLSyntaxParser.propertyContextHead_return);
		OCLSyntaxParser.initOrDerValue_return initOrDerValue7 = default(OCLSyntaxParser.initOrDerValue_return);

		RewriteRuleSubtreeStream stream_propertyContextHead=new RewriteRuleSubtreeStream(adaptor,"rule propertyContextHead");
		RewriteRuleSubtreeStream stream_initOrDerValue=new RewriteRuleSubtreeStream(adaptor,"rule initOrDerValue");
		try { DebugEnterRule(GrammarFileName, "propertyContextDecl");
		DebugLocation(37, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:2: ( propertyContextHead ( initOrDerValue )* -> ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:3: propertyContextHead ( initOrDerValue )*
			{
			DebugLocation(38, 3);
			PushFollow(Follow._propertyContextHead_in_propertyContextDecl217);
			propertyContextHead6=propertyContextHead();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_propertyContextHead.Add(propertyContextHead6.Tree);
			DebugLocation(38, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:23: ( initOrDerValue )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==104||LA3_0==111))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:23: initOrDerValue
					{
					DebugLocation(38, 23);
					PushFollow(Follow._initOrDerValue_in_propertyContextDecl219);
					initOrDerValue7=initOrDerValue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_initOrDerValue.Add(initOrDerValue7.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: propertyContextHead, initOrDerValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 38:39: -> ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* )
			{
				DebugLocation(38, 41);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:41: ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(38, 43);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTYCONDITION, "PROPERTYCONDITION"), root_1);

				DebugLocation(38, 61);
				adaptor.AddChild(root_1, stream_propertyContextHead.NextTree());
				DebugLocation(38, 81);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:81: ( initOrDerValue )*
				while ( stream_initOrDerValue.HasNext )
				{
					DebugLocation(38, 81);
					adaptor.AddChild(root_1, stream_initOrDerValue.NextTree());

				}
				stream_initOrDerValue.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyContextDecl", 3);
			LeaveRule("propertyContextDecl", 3);
			LeaveRule_propertyContextDecl();
		}
		DebugLocation(39, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextDecl"); }
		return retval;

	}
	// $ANTLR end "propertyContextDecl"

	private sealed partial class propertyContextHead_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyContextHead_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyContextHead();
	partial void LeaveRule_propertyContextHead();

	// $ANTLR start "propertyContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:41:1: propertyContextHead : c= 'context' SimpleName ( '::' SimpleName )* '::' SimpleName ':' type -> ^( PROPERTYHEAD[$c] ( SimpleName )+ type ) ;
	[GrammarRule("propertyContextHead")]
	private OCLSyntaxParser.propertyContextHead_return propertyContextHead()
	{
		EnterRule_propertyContextHead();
		EnterRule("propertyContextHead", 4);
		TraceIn("propertyContextHead", 4);
		OCLSyntaxParser.propertyContextHead_return retval = new OCLSyntaxParser.propertyContextHead_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken c = default(CommonToken);
		CommonToken SimpleName8 = default(CommonToken);
		CommonToken string_literal9 = default(CommonToken);
		CommonToken SimpleName10 = default(CommonToken);
		CommonToken string_literal11 = default(CommonToken);
		CommonToken SimpleName12 = default(CommonToken);
		CommonToken char_literal13 = default(CommonToken);
		OCLSyntaxParser.type_return type14 = default(OCLSyntaxParser.type_return);

		object c_tree = default(object);
		object SimpleName8_tree = default(object);
		object string_literal9_tree = default(object);
		object SimpleName10_tree = default(object);
		object string_literal11_tree = default(object);
		object SimpleName12_tree = default(object);
		object char_literal13_tree = default(object);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "propertyContextHead");
		DebugLocation(41, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:2: (c= 'context' SimpleName ( '::' SimpleName )* '::' SimpleName ':' type -> ^( PROPERTYHEAD[$c] ( SimpleName )+ type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:3: c= 'context' SimpleName ( '::' SimpleName )* '::' SimpleName ':' type
			{
			DebugLocation(42, 4);
			c=(CommonToken)Match(input,102,Follow._102_in_propertyContextHead242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(c);

			DebugLocation(42, 15);
			SimpleName8=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead244); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SimpleName.Add(SimpleName8);

			DebugLocation(42, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:26: ( '::' SimpleName )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==71))
				{
					int LA4_1 = input.LA(2);

					if ((LA4_1==SimpleName))
					{
						int LA4_2 = input.LA(3);

						if ((LA4_2==71))
						{
							alt4 = 1;
						}


					}


				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:27: '::' SimpleName
					{
					DebugLocation(42, 27);
					string_literal9=(CommonToken)Match(input,71,Follow._71_in_propertyContextHead247); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(string_literal9);

					DebugLocation(42, 32);
					SimpleName10=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead249); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName10);


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(42, 45);
			string_literal11=(CommonToken)Match(input,71,Follow._71_in_propertyContextHead253); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_71.Add(string_literal11);

			DebugLocation(42, 50);
			SimpleName12=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead255); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SimpleName.Add(SimpleName12);

			DebugLocation(42, 61);
			char_literal13=(CommonToken)Match(input,70,Follow._70_in_propertyContextHead257); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_70.Add(char_literal13);

			DebugLocation(42, 65);
			PushFollow(Follow._type_in_propertyContextHead259);
			type14=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type14.Tree);


			{
			// AST REWRITE
			// elements: SimpleName, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 43:3: -> ^( PROPERTYHEAD[$c] ( SimpleName )+ type )
			{
				DebugLocation(43, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:43:6: ^( PROPERTYHEAD[$c] ( SimpleName )+ type )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(43, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTYHEAD, c), root_1);

				DebugLocation(43, 25);
				if (!(stream_SimpleName.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_SimpleName.HasNext )
				{
					DebugLocation(43, 25);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());

				}
				stream_SimpleName.Reset();
				DebugLocation(43, 37);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyContextHead", 4);
			LeaveRule("propertyContextHead", 4);
			LeaveRule_propertyContextHead();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextHead"); }
		return retval;

	}
	// $ANTLR end "propertyContextHead"

	private sealed partial class operationContextDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operationContextDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_operationContextDecl();
	partial void LeaveRule_operationContextDecl();

	// $ANTLR start "operationContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:46:1: operationContextDecl : operationContextHead ( prePostOrBodyDecl )* -> ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) ;
	[GrammarRule("operationContextDecl")]
	private OCLSyntaxParser.operationContextDecl_return operationContextDecl()
	{
		EnterRule_operationContextDecl();
		EnterRule("operationContextDecl", 5);
		TraceIn("operationContextDecl", 5);
		OCLSyntaxParser.operationContextDecl_return retval = new OCLSyntaxParser.operationContextDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.operationContextHead_return operationContextHead15 = default(OCLSyntaxParser.operationContextHead_return);
		OCLSyntaxParser.prePostOrBodyDecl_return prePostOrBodyDecl16 = default(OCLSyntaxParser.prePostOrBodyDecl_return);

		RewriteRuleSubtreeStream stream_operationContextHead=new RewriteRuleSubtreeStream(adaptor,"rule operationContextHead");
		RewriteRuleSubtreeStream stream_prePostOrBodyDecl=new RewriteRuleSubtreeStream(adaptor,"rule prePostOrBodyDecl");
		try { DebugEnterRule(GrammarFileName, "operationContextDecl");
		DebugLocation(46, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:2: ( operationContextHead ( prePostOrBodyDecl )* -> ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:3: operationContextHead ( prePostOrBodyDecl )*
			{
			DebugLocation(47, 3);
			PushFollow(Follow._operationContextHead_in_operationContextDecl283);
			operationContextHead15=operationContextHead();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_operationContextHead.Add(operationContextHead15.Tree);
			DebugLocation(47, 24);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:24: ( prePostOrBodyDecl )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==101||(LA5_0>=119 && LA5_0<=120)))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:24: prePostOrBodyDecl
					{
					DebugLocation(47, 24);
					PushFollow(Follow._prePostOrBodyDecl_in_operationContextDecl285);
					prePostOrBodyDecl16=prePostOrBodyDecl();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_prePostOrBodyDecl.Add(prePostOrBodyDecl16.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }



			{
			// AST REWRITE
			// elements: operationContextHead, prePostOrBodyDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 47:43: -> ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* )
			{
				DebugLocation(47, 45);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:45: ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(47, 47);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATIONCONDITION, "OPERATIONCONDITION"), root_1);

				DebugLocation(47, 66);
				adaptor.AddChild(root_1, stream_operationContextHead.NextTree());
				DebugLocation(47, 87);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:87: ( prePostOrBodyDecl )*
				while ( stream_prePostOrBodyDecl.HasNext )
				{
					DebugLocation(47, 87);
					adaptor.AddChild(root_1, stream_prePostOrBodyDecl.NextTree());

				}
				stream_prePostOrBodyDecl.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operationContextDecl", 5);
			LeaveRule("operationContextDecl", 5);
			LeaveRule_operationContextDecl();
		}
		DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextDecl"); }
		return retval;

	}
	// $ANTLR end "operationContextDecl"

	private sealed partial class operationContextHead_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operationContextHead_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_operationContextHead();
	partial void LeaveRule_operationContextHead();

	// $ANTLR start "operationContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:50:1: operationContextHead : c= 'context' operation -> ^( OPERATIONHEAD[$c] operation ) ;
	[GrammarRule("operationContextHead")]
	private OCLSyntaxParser.operationContextHead_return operationContextHead()
	{
		EnterRule_operationContextHead();
		EnterRule("operationContextHead", 6);
		TraceIn("operationContextHead", 6);
		OCLSyntaxParser.operationContextHead_return retval = new OCLSyntaxParser.operationContextHead_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken c = default(CommonToken);
		OCLSyntaxParser.operation_return operation17 = default(OCLSyntaxParser.operation_return);

		object c_tree = default(object);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_operation=new RewriteRuleSubtreeStream(adaptor,"rule operation");
		try { DebugEnterRule(GrammarFileName, "operationContextHead");
		DebugLocation(50, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:2: (c= 'context' operation -> ^( OPERATIONHEAD[$c] operation ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:3: c= 'context' operation
			{
			DebugLocation(51, 4);
			c=(CommonToken)Match(input,102,Follow._102_in_operationContextHead308); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(c);

			DebugLocation(51, 15);
			PushFollow(Follow._operation_in_operationContextHead310);
			operation17=operation();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_operation.Add(operation17.Tree);


			{
			// AST REWRITE
			// elements: operation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 51:25: -> ^( OPERATIONHEAD[$c] operation )
			{
				DebugLocation(51, 27);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:27: ^( OPERATIONHEAD[$c] operation )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(51, 29);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATIONHEAD, c), root_1);

				DebugLocation(51, 47);
				adaptor.AddChild(root_1, stream_operation.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operationContextHead", 6);
			LeaveRule("operationContextHead", 6);
			LeaveRule_operationContextHead();
		}
		DebugLocation(52, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextHead"); }
		return retval;

	}
	// $ANTLR end "operationContextHead"

	private sealed partial class classifierContextDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public classifierContextDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_classifierContextDecl();
	partial void LeaveRule_classifierContextDecl();

	// $ANTLR start "classifierContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:54:1: classifierContextDecl : classifierContextHead ( invOrDef )* -> ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) ;
	[GrammarRule("classifierContextDecl")]
	private OCLSyntaxParser.classifierContextDecl_return classifierContextDecl()
	{
		EnterRule_classifierContextDecl();
		EnterRule("classifierContextDecl", 7);
		TraceIn("classifierContextDecl", 7);
		OCLSyntaxParser.classifierContextDecl_return retval = new OCLSyntaxParser.classifierContextDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.classifierContextHead_return classifierContextHead18 = default(OCLSyntaxParser.classifierContextHead_return);
		OCLSyntaxParser.invOrDef_return invOrDef19 = default(OCLSyntaxParser.invOrDef_return);

		RewriteRuleSubtreeStream stream_classifierContextHead=new RewriteRuleSubtreeStream(adaptor,"rule classifierContextHead");
		RewriteRuleSubtreeStream stream_invOrDef=new RewriteRuleSubtreeStream(adaptor,"rule invOrDef");
		try { DebugEnterRule(GrammarFileName, "classifierContextDecl");
		DebugLocation(54, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:2: ( classifierContextHead ( invOrDef )* -> ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:3: classifierContextHead ( invOrDef )*
			{
			DebugLocation(55, 3);
			PushFollow(Follow._classifierContextHead_in_classifierContextDecl328);
			classifierContextHead18=classifierContextHead();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classifierContextHead.Add(classifierContextHead18.Tree);
			DebugLocation(55, 25);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:25: ( invOrDef )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==103||LA6_0==112||LA6_0==121))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:26: invOrDef
					{
					DebugLocation(55, 26);
					PushFollow(Follow._invOrDef_in_classifierContextDecl331);
					invOrDef19=invOrDef();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_invOrDef.Add(invOrDef19.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }



			{
			// AST REWRITE
			// elements: classifierContextHead, invOrDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 55:37: -> ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* )
			{
				DebugLocation(55, 40);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:40: ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(55, 42);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSIFIERCONDITION, "CLASSIFIERCONDITION"), root_1);

				DebugLocation(55, 62);
				adaptor.AddChild(root_1, stream_classifierContextHead.NextTree());
				DebugLocation(55, 84);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:84: ( invOrDef )*
				while ( stream_invOrDef.HasNext )
				{
					DebugLocation(55, 84);
					adaptor.AddChild(root_1, stream_invOrDef.NextTree());

				}
				stream_invOrDef.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classifierContextDecl", 7);
			LeaveRule("classifierContextDecl", 7);
			LeaveRule_classifierContextDecl();
		}
		DebugLocation(56, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextDecl"); }
		return retval;

	}
	// $ANTLR end "classifierContextDecl"

	private sealed partial class classifierContextHead_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public classifierContextHead_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_classifierContextHead();
	partial void LeaveRule_classifierContextHead();

	// $ANTLR start "classifierContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:58:1: classifierContextHead : (c= 'context' pathName -> ^( CLASSIFIERHEAD[$c] pathName ) |c= 'context' SimpleName ':' pathName -> ^( CLASSIFIERHEAD[$c] pathName SimpleName ) );
	[GrammarRule("classifierContextHead")]
	private OCLSyntaxParser.classifierContextHead_return classifierContextHead()
	{
		EnterRule_classifierContextHead();
		EnterRule("classifierContextHead", 8);
		TraceIn("classifierContextHead", 8);
		OCLSyntaxParser.classifierContextHead_return retval = new OCLSyntaxParser.classifierContextHead_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken c = default(CommonToken);
		CommonToken SimpleName21 = default(CommonToken);
		CommonToken char_literal22 = default(CommonToken);
		OCLSyntaxParser.pathName_return pathName20 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.pathName_return pathName23 = default(OCLSyntaxParser.pathName_return);

		object c_tree = default(object);
		object SimpleName21_tree = default(object);
		object char_literal22_tree = default(object);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_pathName=new RewriteRuleSubtreeStream(adaptor,"rule pathName");
		try { DebugEnterRule(GrammarFileName, "classifierContextHead");
		DebugLocation(58, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:2: (c= 'context' pathName -> ^( CLASSIFIERHEAD[$c] pathName ) |c= 'context' SimpleName ':' pathName -> ^( CLASSIFIERHEAD[$c] pathName SimpleName ) )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==102))
			{
				int LA7_1 = input.LA(2);

				if ((LA7_1==SimpleName))
				{
					int LA7_2 = input.LA(3);

					if ((LA7_2==70))
					{
						alt7 = 2;
					}
					else if ((LA7_2==EOF||LA7_2==71||(LA7_2>=102 && LA7_2<=103)||LA7_2==112||LA7_2==121))
					{
						alt7 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:3: c= 'context' pathName
				{
				DebugLocation(59, 4);
				c=(CommonToken)Match(input,102,Follow._102_in_classifierContextHead356); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(c);

				DebugLocation(59, 15);
				PushFollow(Follow._pathName_in_classifierContextHead358);
				pathName20=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pathName.Add(pathName20.Tree);


				{
				// AST REWRITE
				// elements: pathName
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 59:25: -> ^( CLASSIFIERHEAD[$c] pathName )
				{
					DebugLocation(59, 27);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:27: ^( CLASSIFIERHEAD[$c] pathName )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(59, 29);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSIFIERHEAD, c), root_1);

					DebugLocation(59, 48);
					adaptor.AddChild(root_1, stream_pathName.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:60:3: c= 'context' SimpleName ':' pathName
				{
				DebugLocation(60, 4);
				c=(CommonToken)Match(input,102,Follow._102_in_classifierContextHead374); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(c);

				DebugLocation(60, 15);
				SimpleName21=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_classifierContextHead376); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SimpleName.Add(SimpleName21);

				DebugLocation(60, 25);
				char_literal22=(CommonToken)Match(input,70,Follow._70_in_classifierContextHead377); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal22);

				DebugLocation(60, 28);
				PushFollow(Follow._pathName_in_classifierContextHead378);
				pathName23=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pathName.Add(pathName23.Tree);


				{
				// AST REWRITE
				// elements: pathName, SimpleName
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 60:37: -> ^( CLASSIFIERHEAD[$c] pathName SimpleName )
				{
					DebugLocation(60, 39);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:60:39: ^( CLASSIFIERHEAD[$c] pathName SimpleName )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(60, 41);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSIFIERHEAD, c), root_1);

					DebugLocation(60, 60);
					adaptor.AddChild(root_1, stream_pathName.NextTree());
					DebugLocation(60, 69);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classifierContextHead", 8);
			LeaveRule("classifierContextHead", 8);
			LeaveRule_classifierContextHead();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextHead"); }
		return retval;

	}
	// $ANTLR end "classifierContextHead"

	private sealed partial class initOrDerValue_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public initOrDerValue_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_initOrDerValue();
	partial void LeaveRule_initOrDerValue();

	// $ANTLR start "initOrDerValue"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:63:1: initOrDerValue : (i= 'init' ':' oclExpression -> ^( INIT[$i] oclExpression ) |d= 'derive' ':' oclExpression -> ^( DERIVATE[$d] oclExpression ) );
	[GrammarRule("initOrDerValue")]
	private OCLSyntaxParser.initOrDerValue_return initOrDerValue()
	{
		EnterRule_initOrDerValue();
		EnterRule("initOrDerValue", 9);
		TraceIn("initOrDerValue", 9);
		OCLSyntaxParser.initOrDerValue_return retval = new OCLSyntaxParser.initOrDerValue_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken i = default(CommonToken);
		CommonToken d = default(CommonToken);
		CommonToken char_literal24 = default(CommonToken);
		CommonToken char_literal26 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return oclExpression25 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression27 = default(OCLSyntaxParser.oclExpression_return);

		object i_tree = default(object);
		object d_tree = default(object);
		object char_literal24_tree = default(object);
		object char_literal26_tree = default(object);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "initOrDerValue");
		DebugLocation(63, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:2: (i= 'init' ':' oclExpression -> ^( INIT[$i] oclExpression ) |d= 'derive' ':' oclExpression -> ^( DERIVATE[$d] oclExpression ) )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==111))
			{
				alt8 = 1;
			}
			else if ((LA8_0==104))
			{
				alt8 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:3: i= 'init' ':' oclExpression
				{
				DebugLocation(64, 4);
				i=(CommonToken)Match(input,111,Follow._111_in_initOrDerValue401); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(i);

				DebugLocation(64, 12);
				char_literal24=(CommonToken)Match(input,70,Follow._70_in_initOrDerValue403); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal24);

				DebugLocation(64, 16);
				PushFollow(Follow._oclExpression_in_initOrDerValue405);
				oclExpression25=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression25.Tree);


				{
				// AST REWRITE
				// elements: oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 64:30: -> ^( INIT[$i] oclExpression )
				{
					DebugLocation(64, 33);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:33: ^( INIT[$i] oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(64, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INIT, i), root_1);

					DebugLocation(64, 44);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:65:3: d= 'derive' ':' oclExpression
				{
				DebugLocation(65, 4);
				d=(CommonToken)Match(input,104,Follow._104_in_initOrDerValue420); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_104.Add(d);

				DebugLocation(65, 14);
				char_literal26=(CommonToken)Match(input,70,Follow._70_in_initOrDerValue422); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal26);

				DebugLocation(65, 18);
				PushFollow(Follow._oclExpression_in_initOrDerValue424);
				oclExpression27=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression27.Tree);


				{
				// AST REWRITE
				// elements: oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 65:32: -> ^( DERIVATE[$d] oclExpression )
				{
					DebugLocation(65, 34);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:65:34: ^( DERIVATE[$d] oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(65, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DERIVATE, d), root_1);

					DebugLocation(65, 49);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initOrDerValue", 9);
			LeaveRule("initOrDerValue", 9);
			LeaveRule_initOrDerValue();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "initOrDerValue"); }
		return retval;

	}
	// $ANTLR end "initOrDerValue"

	private sealed partial class invOrDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public invOrDef_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_invOrDef();
	partial void LeaveRule_invOrDef();

	// $ANTLR start "invOrDef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:68:1: invOrDef : (i= 'inv' ( SimpleName )? ':' oclExpression (m= 'message' ':' msgExp= oclExpression )? -> ^( INV[$i] ( SimpleName )? oclExpression ( MESSAGE[$m] $msgExp)? ) | ( 'static' )? d= 'def' ( SimpleName )? ':' defExpression -> ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression ) );
	[GrammarRule("invOrDef")]
	private OCLSyntaxParser.invOrDef_return invOrDef()
	{
		EnterRule_invOrDef();
		EnterRule("invOrDef", 10);
		TraceIn("invOrDef", 10);
		OCLSyntaxParser.invOrDef_return retval = new OCLSyntaxParser.invOrDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken i = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken d = default(CommonToken);
		CommonToken SimpleName28 = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		CommonToken char_literal31 = default(CommonToken);
		CommonToken string_literal32 = default(CommonToken);
		CommonToken SimpleName33 = default(CommonToken);
		CommonToken char_literal34 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return msgExp = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression30 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.defExpression_return defExpression35 = default(OCLSyntaxParser.defExpression_return);

		object i_tree = default(object);
		object m_tree = default(object);
		object d_tree = default(object);
		object SimpleName28_tree = default(object);
		object char_literal29_tree = default(object);
		object char_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object SimpleName33_tree = default(object);
		object char_literal34_tree = default(object);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		RewriteRuleSubtreeStream stream_defExpression=new RewriteRuleSubtreeStream(adaptor,"rule defExpression");
		try { DebugEnterRule(GrammarFileName, "invOrDef");
		DebugLocation(68, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:2: (i= 'inv' ( SimpleName )? ':' oclExpression (m= 'message' ':' msgExp= oclExpression )? -> ^( INV[$i] ( SimpleName )? oclExpression ( MESSAGE[$m] $msgExp)? ) | ( 'static' )? d= 'def' ( SimpleName )? ':' defExpression -> ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression ) )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==112))
			{
				alt13 = 1;
			}
			else if ((LA13_0==103||LA13_0==121))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:3: i= 'inv' ( SimpleName )? ':' oclExpression (m= 'message' ':' msgExp= oclExpression )?
				{
				DebugLocation(69, 4);
				i=(CommonToken)Match(input,112,Follow._112_in_invOrDef444); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(i);

				DebugLocation(69, 11);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:11: ( SimpleName )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==SimpleName))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:12: SimpleName
					{
					DebugLocation(69, 12);
					SimpleName28=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_invOrDef447); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(69, 26);
				char_literal29=(CommonToken)Match(input,70,Follow._70_in_invOrDef452); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal29);

				DebugLocation(69, 30);
				PushFollow(Follow._oclExpression_in_invOrDef454);
				oclExpression30=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression30.Tree);
				DebugLocation(70, 3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:70:3: (m= 'message' ':' msgExp= oclExpression )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==115))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:70:4: m= 'message' ':' msgExp= oclExpression
					{
					DebugLocation(70, 5);
					m=(CommonToken)Match(input,115,Follow._115_in_invOrDef462); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_115.Add(m);

					DebugLocation(70, 16);
					char_literal31=(CommonToken)Match(input,70,Follow._70_in_invOrDef464); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(char_literal31);

					DebugLocation(70, 27);
					PushFollow(Follow._oclExpression_in_invOrDef470);
					msgExp=oclExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_oclExpression.Add(msgExp.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }



				{
				// AST REWRITE
				// elements: SimpleName, oclExpression, msgExp
				// token labels: 
				// rule labels: msgExp, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_msgExp=new RewriteRuleSubtreeStream(adaptor,"rule msgExp",msgExp!=null?msgExp.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 71:3: -> ^( INV[$i] ( SimpleName )? oclExpression ( MESSAGE[$m] $msgExp)? )
				{
					DebugLocation(71, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:6: ^( INV[$i] ( SimpleName )? oclExpression ( MESSAGE[$m] $msgExp)? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(71, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INV, i), root_1);

					DebugLocation(71, 16);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:16: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(71, 16);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(71, 28);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());
					DebugLocation(71, 42);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:42: ( MESSAGE[$m] $msgExp)?
					if (stream_msgExp.HasNext)
					{
						DebugLocation(71, 43);
						adaptor.AddChild(root_1, (object)adaptor.Create(MESSAGE, m));
						DebugLocation(71, 56);
						adaptor.AddChild(root_1, stream_msgExp.NextTree());

					}
					stream_msgExp.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:4: ( 'static' )? d= 'def' ( SimpleName )? ':' defExpression
				{
				DebugLocation(72, 4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:4: ( 'static' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==121))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:4: 'static'
					{
					DebugLocation(72, 4);
					string_literal32=(CommonToken)Match(input,121,Follow._121_in_invOrDef500); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_121.Add(string_literal32);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(72, 15);
				d=(CommonToken)Match(input,103,Follow._103_in_invOrDef505); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(d);

				DebugLocation(72, 22);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:22: ( SimpleName )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==SimpleName))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:22: SimpleName
					{
					DebugLocation(72, 22);
					SimpleName33=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_invOrDef507); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName33);


					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(72, 34);
				char_literal34=(CommonToken)Match(input,70,Follow._70_in_invOrDef510); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal34);

				DebugLocation(72, 38);
				PushFollow(Follow._defExpression_in_invOrDef512);
				defExpression35=defExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_defExpression.Add(defExpression35.Tree);


				{
				// AST REWRITE
				// elements: 121, SimpleName, defExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 73:3: -> ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression )
				{
					DebugLocation(73, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:73:6: ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(73, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DEF, d), root_1);

					DebugLocation(73, 16);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:73:16: ( 'static' )?
					if (stream_121.HasNext)
					{
						DebugLocation(73, 16);
						adaptor.AddChild(root_1, stream_121.NextNode());

					}
					stream_121.Reset();
					DebugLocation(73, 26);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:73:26: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(73, 26);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(73, 38);
					adaptor.AddChild(root_1, stream_defExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invOrDef", 10);
			LeaveRule("invOrDef", 10);
			LeaveRule_invOrDef();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "invOrDef"); }
		return retval;

	}
	// $ANTLR end "invOrDef"

	private sealed partial class prePostOrBodyDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public prePostOrBodyDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_prePostOrBodyDecl();
	partial void LeaveRule_prePostOrBodyDecl();

	// $ANTLR start "prePostOrBodyDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:1: prePostOrBodyDecl : (h= 'pre' ( SimpleName )? ':' oclExpression -> ^( PRE[h] ( SimpleName )? oclExpression ) |h= 'post' ( SimpleName )? ':' oclExpression -> ^( POST[h] ( SimpleName )? oclExpression ) |h= 'body' ( SimpleName )? ':' oclExpression -> ^( BODY[h] ( SimpleName )? oclExpression ) );
	[GrammarRule("prePostOrBodyDecl")]
	private OCLSyntaxParser.prePostOrBodyDecl_return prePostOrBodyDecl()
	{
		EnterRule_prePostOrBodyDecl();
		EnterRule("prePostOrBodyDecl", 11);
		TraceIn("prePostOrBodyDecl", 11);
		OCLSyntaxParser.prePostOrBodyDecl_return retval = new OCLSyntaxParser.prePostOrBodyDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken h = default(CommonToken);
		CommonToken SimpleName36 = default(CommonToken);
		CommonToken char_literal37 = default(CommonToken);
		CommonToken SimpleName39 = default(CommonToken);
		CommonToken char_literal40 = default(CommonToken);
		CommonToken SimpleName42 = default(CommonToken);
		CommonToken char_literal43 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return oclExpression38 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression41 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression44 = default(OCLSyntaxParser.oclExpression_return);

		object h_tree = default(object);
		object SimpleName36_tree = default(object);
		object char_literal37_tree = default(object);
		object SimpleName39_tree = default(object);
		object char_literal40_tree = default(object);
		object SimpleName42_tree = default(object);
		object char_literal43_tree = default(object);
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "prePostOrBodyDecl");
		DebugLocation(77, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:2: (h= 'pre' ( SimpleName )? ':' oclExpression -> ^( PRE[h] ( SimpleName )? oclExpression ) |h= 'post' ( SimpleName )? ':' oclExpression -> ^( POST[h] ( SimpleName )? oclExpression ) |h= 'body' ( SimpleName )? ':' oclExpression -> ^( BODY[h] ( SimpleName )? oclExpression ) )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case 120:
				{
				alt17 = 1;
				}
				break;
			case 119:
				{
				alt17 = 2;
				}
				break;
			case 101:
				{
				alt17 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:3: h= 'pre' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(78, 4);
				h=(CommonToken)Match(input,120,Follow._120_in_prePostOrBodyDecl543); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_120.Add(h);

				DebugLocation(78, 11);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:11: ( SimpleName )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==SimpleName))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:12: SimpleName
					{
					DebugLocation(78, 12);
					SimpleName36=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl546); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName36);


					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(78, 25);
				char_literal37=(CommonToken)Match(input,70,Follow._70_in_prePostOrBodyDecl550); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal37);

				DebugLocation(78, 29);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl552);
				oclExpression38=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression38.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 78:43: -> ^( PRE[h] ( SimpleName )? oclExpression )
				{
					DebugLocation(78, 45);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:45: ^( PRE[h] ( SimpleName )? oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(78, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PRE, h), root_1);

					DebugLocation(78, 54);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:54: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(78, 54);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(78, 66);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:79:3: h= 'post' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(79, 4);
				h=(CommonToken)Match(input,119,Follow._119_in_prePostOrBodyDecl569); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(h);

				DebugLocation(79, 12);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:79:12: ( SimpleName )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==SimpleName))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:79:13: SimpleName
					{
					DebugLocation(79, 13);
					SimpleName39=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl572); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName39);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(79, 26);
				char_literal40=(CommonToken)Match(input,70,Follow._70_in_prePostOrBodyDecl576); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal40);

				DebugLocation(79, 30);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl578);
				oclExpression41=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression41.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 79:44: -> ^( POST[h] ( SimpleName )? oclExpression )
				{
					DebugLocation(79, 46);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:79:46: ^( POST[h] ( SimpleName )? oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(79, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(POST, h), root_1);

					DebugLocation(79, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:79:56: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(79, 56);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(79, 68);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:80:3: h= 'body' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(80, 4);
				h=(CommonToken)Match(input,101,Follow._101_in_prePostOrBodyDecl595); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(h);

				DebugLocation(80, 12);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:80:12: ( SimpleName )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==SimpleName))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:80:13: SimpleName
					{
					DebugLocation(80, 13);
					SimpleName42=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl598); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName42);


					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(80, 26);
				char_literal43=(CommonToken)Match(input,70,Follow._70_in_prePostOrBodyDecl602); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal43);

				DebugLocation(80, 30);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl604);
				oclExpression44=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression44.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 80:44: -> ^( BODY[h] ( SimpleName )? oclExpression )
				{
					DebugLocation(80, 46);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:80:46: ^( BODY[h] ( SimpleName )? oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(80, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BODY, h), root_1);

					DebugLocation(80, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:80:56: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(80, 56);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(80, 68);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prePostOrBodyDecl", 11);
			LeaveRule("prePostOrBodyDecl", 11);
			LeaveRule_prePostOrBodyDecl();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "prePostOrBodyDecl"); }
		return retval;

	}
	// $ANTLR end "prePostOrBodyDecl"

	private sealed partial class operation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operation_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_operation();
	partial void LeaveRule_operation();

	// $ANTLR start "operation"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:84:1: operation : pathName '(' ( parameters )? ')' ( ':' type )? -> ^( OPERATION pathName ( parameters )? ( type )? ) ;
	[GrammarRule("operation")]
	private OCLSyntaxParser.operation_return operation()
	{
		EnterRule_operation();
		EnterRule("operation", 12);
		TraceIn("operation", 12);
		OCLSyntaxParser.operation_return retval = new OCLSyntaxParser.operation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal46 = default(CommonToken);
		CommonToken char_literal48 = default(CommonToken);
		CommonToken char_literal49 = default(CommonToken);
		OCLSyntaxParser.pathName_return pathName45 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.parameters_return parameters47 = default(OCLSyntaxParser.parameters_return);
		OCLSyntaxParser.type_return type50 = default(OCLSyntaxParser.type_return);

		object char_literal46_tree = default(object);
		object char_literal48_tree = default(object);
		object char_literal49_tree = default(object);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_pathName=new RewriteRuleSubtreeStream(adaptor,"rule pathName");
		RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "operation");
		DebugLocation(84, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:85:2: ( pathName '(' ( parameters )? ')' ( ':' type )? -> ^( OPERATION pathName ( parameters )? ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:85:3: pathName '(' ( parameters )? ')' ( ':' type )?
			{
			DebugLocation(85, 3);
			PushFollow(Follow._pathName_in_operation626);
			pathName45=pathName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_pathName.Add(pathName45.Tree);
			DebugLocation(85, 32);
			char_literal46=(CommonToken)Match(input,62,Follow._62_in_operation630); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal46);

			DebugLocation(85, 36);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:85:36: ( parameters )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==SimpleName))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:85:36: parameters
				{
				DebugLocation(85, 36);
				PushFollow(Follow._parameters_in_operation632);
				parameters47=parameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parameters.Add(parameters47.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(85, 48);
			char_literal48=(CommonToken)Match(input,63,Follow._63_in_operation635); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal48);

			DebugLocation(85, 52);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:85:52: ( ':' type )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==70))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:85:53: ':' type
				{
				DebugLocation(85, 53);
				char_literal49=(CommonToken)Match(input,70,Follow._70_in_operation638); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal49);

				DebugLocation(85, 57);
				PushFollow(Follow._type_in_operation640);
				type50=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type50.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: pathName, parameters, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 86:3: -> ^( OPERATION pathName ( parameters )? ( type )? )
			{
				DebugLocation(86, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:86:6: ^( OPERATION pathName ( parameters )? ( type )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(86, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATION, "OPERATION"), root_1);

				DebugLocation(86, 18);
				adaptor.AddChild(root_1, stream_pathName.NextTree());
				DebugLocation(86, 27);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:86:27: ( parameters )?
				if (stream_parameters.HasNext)
				{
					DebugLocation(86, 27);
					adaptor.AddChild(root_1, stream_parameters.NextTree());

				}
				stream_parameters.Reset();
				DebugLocation(86, 39);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:86:39: ( type )?
				if (stream_type.HasNext)
				{
					DebugLocation(86, 39);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operation", 12);
			LeaveRule("operation", 12);
			LeaveRule_operation();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "operation"); }
		return retval;

	}
	// $ANTLR end "operation"

	private sealed partial class parameters_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public parameters_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();

	// $ANTLR start "parameters"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:89:1: parameters : variableDeclarationList[VariableDeclarationRequirement.OperationContext] ;
	[GrammarRule("parameters")]
	private OCLSyntaxParser.parameters_return parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 13);
		TraceIn("parameters", 13);
		OCLSyntaxParser.parameters_return retval = new OCLSyntaxParser.parameters_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.variableDeclarationList_return variableDeclarationList51 = default(OCLSyntaxParser.variableDeclarationList_return);


		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(89, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:90:2: ( variableDeclarationList[VariableDeclarationRequirement.OperationContext] )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:90:3: variableDeclarationList[VariableDeclarationRequirement.OperationContext]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(90, 3);
			PushFollow(Follow._variableDeclarationList_in_parameters668);
			variableDeclarationList51=variableDeclarationList(VariableDeclarationRequirement.OperationContext);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationList51.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameters", 13);
			LeaveRule("parameters", 13);
			LeaveRule_parameters();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return retval;

	}
	// $ANTLR end "parameters"

	private sealed partial class defExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public defExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_defExpression();
	partial void LeaveRule_defExpression();

	// $ANTLR start "defExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:93:1: defExpression : ( variableDeclaration[VariableDeclarationRequirement.Def] | operation '=' oclExpression -> ^( DECL operation oclExpression ) );
	[GrammarRule("defExpression")]
	private OCLSyntaxParser.defExpression_return defExpression()
	{
		EnterRule_defExpression();
		EnterRule("defExpression", 14);
		TraceIn("defExpression", 14);
		OCLSyntaxParser.defExpression_return retval = new OCLSyntaxParser.defExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal54 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration52 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.operation_return operation53 = default(OCLSyntaxParser.operation_return);
		OCLSyntaxParser.oclExpression_return oclExpression55 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal54_tree = default(object);
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_operation=new RewriteRuleSubtreeStream(adaptor,"rule operation");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "defExpression");
		DebugLocation(93, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:94:2: ( variableDeclaration[VariableDeclarationRequirement.Def] | operation '=' oclExpression -> ^( DECL operation oclExpression ) )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==SimpleName))
			{
				int LA20_1 = input.LA(2);

				if ((LA20_1==70||LA20_1==76))
				{
					alt20 = 1;
				}
				else if ((LA20_1==62||LA20_1==71))
				{
					alt20 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:94:4: variableDeclaration[VariableDeclarationRequirement.Def]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(94, 4);
				PushFollow(Follow._variableDeclaration_in_defExpression681);
				variableDeclaration52=variableDeclaration(VariableDeclarationRequirement.Def);
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration52.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:95:4: operation '=' oclExpression
				{
				DebugLocation(95, 4);
				PushFollow(Follow._operation_in_defExpression687);
				operation53=operation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operation.Add(operation53.Tree);
				DebugLocation(95, 14);
				char_literal54=(CommonToken)Match(input,76,Follow._76_in_defExpression689); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_76.Add(char_literal54);

				DebugLocation(95, 18);
				PushFollow(Follow._oclExpression_in_defExpression691);
				oclExpression55=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression55.Tree);


				{
				// AST REWRITE
				// elements: operation, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 96:3: -> ^( DECL operation oclExpression )
				{
					DebugLocation(96, 5);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:96:5: ^( DECL operation oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(96, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

					DebugLocation(96, 12);
					adaptor.AddChild(root_1, stream_operation.NextTree());
					DebugLocation(96, 22);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defExpression", 14);
			LeaveRule("defExpression", 14);
			LeaveRule_defExpression();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "defExpression"); }
		return retval;

	}
	// $ANTLR end "defExpression"

	public sealed partial class oclExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclExpression();
	partial void LeaveRule_oclExpression();

	// $ANTLR start "oclExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:100:1: public oclExpression : logicalImpliesExpression ;
	[GrammarRule("oclExpression")]
	public OCLSyntaxParser.oclExpression_return oclExpression()
	{
		EnterRule_oclExpression();
		EnterRule("oclExpression", 15);
		TraceIn("oclExpression", 15);
		OCLSyntaxParser.oclExpression_return retval = new OCLSyntaxParser.oclExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.logicalImpliesExpression_return logicalImpliesExpression56 = default(OCLSyntaxParser.logicalImpliesExpression_return);


		try { DebugEnterRule(GrammarFileName, "oclExpression");
		DebugLocation(100, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:101:2: ( logicalImpliesExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:101:3: logicalImpliesExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(101, 3);
			PushFollow(Follow._logicalImpliesExpression_in_oclExpression715);
			logicalImpliesExpression56=logicalImpliesExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalImpliesExpression56.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclExpression", 15);
			LeaveRule("oclExpression", 15);
			LeaveRule_oclExpression();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "oclExpression"); }
		return retval;

	}
	// $ANTLR end "oclExpression"

	private sealed partial class logicalImpliesExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalImpliesExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalImpliesExpression();
	partial void LeaveRule_logicalImpliesExpression();

	// $ANTLR start "logicalImpliesExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:105:1: logicalImpliesExpression : ( logicalXorExpression -> logicalXorExpression ) (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )* ;
	[GrammarRule("logicalImpliesExpression")]
	private OCLSyntaxParser.logicalImpliesExpression_return logicalImpliesExpression()
	{
		EnterRule_logicalImpliesExpression();
		EnterRule("logicalImpliesExpression", 16);
		TraceIn("logicalImpliesExpression", 16);
		OCLSyntaxParser.logicalImpliesExpression_return retval = new OCLSyntaxParser.logicalImpliesExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.logicalXorExpression_return expr = default(OCLSyntaxParser.logicalXorExpression_return);
		OCLSyntaxParser.logicalXorExpression_return logicalXorExpression57 = default(OCLSyntaxParser.logicalXorExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_logicalXorExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalXorExpression");
		try { DebugEnterRule(GrammarFileName, "logicalImpliesExpression");
		DebugLocation(105, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:2: ( ( logicalXorExpression -> logicalXorExpression ) (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:4: ( logicalXorExpression -> logicalXorExpression ) (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )*
			{
			DebugLocation(106, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:4: ( logicalXorExpression -> logicalXorExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:5: logicalXorExpression
			{
			DebugLocation(106, 5);
			PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression731);
			logicalXorExpression57=logicalXorExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_logicalXorExpression.Add(logicalXorExpression57.Tree);


			{
			// AST REWRITE
			// elements: logicalXorExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 106:25: -> logicalXorExpression
			{
				DebugLocation(106, 27);
				adaptor.AddChild(root_0, stream_logicalXorExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(106, 50);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:50: (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==109))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:51: opToken= 'implies' expr= logicalXorExpression
					{
					DebugLocation(106, 58);
					opToken=(CommonToken)Match(input,109,Follow._109_in_logicalImpliesExpression740); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(opToken);

					DebugLocation(106, 73);
					PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression744);
					expr=logicalXorExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_logicalXorExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalImpliesExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 106:94: -> ^( INFIX[$opToken] $logicalImpliesExpression $expr)
					{
						DebugLocation(106, 96);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:96: ^( INFIX[$opToken] $logicalImpliesExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(106, 98);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(106, 115);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(106, 141);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalImpliesExpression", 16);
			LeaveRule("logicalImpliesExpression", 16);
			LeaveRule_logicalImpliesExpression();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalImpliesExpression"); }
		return retval;

	}
	// $ANTLR end "logicalImpliesExpression"

	private sealed partial class logicalXorExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalXorExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalXorExpression();
	partial void LeaveRule_logicalXorExpression();

	// $ANTLR start "logicalXorExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:108:1: logicalXorExpression : ( logicalOrExpression -> logicalOrExpression ) (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )* ;
	[GrammarRule("logicalXorExpression")]
	private OCLSyntaxParser.logicalXorExpression_return logicalXorExpression()
	{
		EnterRule_logicalXorExpression();
		EnterRule("logicalXorExpression", 17);
		TraceIn("logicalXorExpression", 17);
		OCLSyntaxParser.logicalXorExpression_return retval = new OCLSyntaxParser.logicalXorExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.logicalOrExpression_return expr = default(OCLSyntaxParser.logicalOrExpression_return);
		OCLSyntaxParser.logicalOrExpression_return logicalOrExpression58 = default(OCLSyntaxParser.logicalOrExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_logicalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalOrExpression");
		try { DebugEnterRule(GrammarFileName, "logicalXorExpression");
		DebugLocation(108, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:2: ( ( logicalOrExpression -> logicalOrExpression ) (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:4: ( logicalOrExpression -> logicalOrExpression ) (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )*
			{
			DebugLocation(109, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:4: ( logicalOrExpression -> logicalOrExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:5: logicalOrExpression
			{
			DebugLocation(109, 5);
			PushFollow(Follow._logicalOrExpression_in_logicalXorExpression769);
			logicalOrExpression58=logicalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_logicalOrExpression.Add(logicalOrExpression58.Tree);


			{
			// AST REWRITE
			// elements: logicalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:24: -> logicalOrExpression
			{
				DebugLocation(109, 26);
				adaptor.AddChild(root_0, stream_logicalOrExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(109, 47);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:47: (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==124))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:48: opToken= 'xor' expr= logicalOrExpression
					{
					DebugLocation(109, 55);
					opToken=(CommonToken)Match(input,124,Follow._124_in_logicalXorExpression777); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(opToken);

					DebugLocation(109, 66);
					PushFollow(Follow._logicalOrExpression_in_logicalXorExpression781);
					expr=logicalOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_logicalOrExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalXorExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 109:86: -> ^( INFIX[$opToken] $logicalXorExpression $expr)
					{
						DebugLocation(109, 88);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:88: ^( INFIX[$opToken] $logicalXorExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(109, 90);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(109, 107);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(109, 129);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalXorExpression", 17);
			LeaveRule("logicalXorExpression", 17);
			LeaveRule_logicalXorExpression();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalXorExpression"); }
		return retval;

	}
	// $ANTLR end "logicalXorExpression"

	private sealed partial class logicalOrExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalOrExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();

	// $ANTLR start "logicalOrExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:111:1: logicalOrExpression : ( logicalAndExpression -> logicalAndExpression ) (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )* ;
	[GrammarRule("logicalOrExpression")]
	private OCLSyntaxParser.logicalOrExpression_return logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 18);
		TraceIn("logicalOrExpression", 18);
		OCLSyntaxParser.logicalOrExpression_return retval = new OCLSyntaxParser.logicalOrExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.logicalAndExpression_return expr = default(OCLSyntaxParser.logicalAndExpression_return);
		OCLSyntaxParser.logicalAndExpression_return logicalAndExpression59 = default(OCLSyntaxParser.logicalAndExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_logicalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalAndExpression");
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(111, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:2: ( ( logicalAndExpression -> logicalAndExpression ) (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:4: ( logicalAndExpression -> logicalAndExpression ) (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )*
			{
			DebugLocation(112, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:4: ( logicalAndExpression -> logicalAndExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:5: logicalAndExpression
			{
			DebugLocation(112, 5);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression805);
			logicalAndExpression59=logicalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_logicalAndExpression.Add(logicalAndExpression59.Tree);


			{
			// AST REWRITE
			// elements: logicalAndExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 112:25: -> logicalAndExpression
			{
				DebugLocation(112, 27);
				adaptor.AddChild(root_0, stream_logicalAndExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(112, 49);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:49: (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==118))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:50: opToken= 'or' expr= logicalAndExpression
					{
					DebugLocation(112, 57);
					opToken=(CommonToken)Match(input,118,Follow._118_in_logicalOrExpression813); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_118.Add(opToken);

					DebugLocation(112, 67);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression817);
					expr=logicalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_logicalAndExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalOrExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 112:88: -> ^( INFIX[$opToken] $logicalOrExpression $expr)
					{
						DebugLocation(112, 90);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:90: ^( INFIX[$opToken] $logicalOrExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(112, 92);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(112, 109);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(112, 130);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOrExpression", 18);
			LeaveRule("logicalOrExpression", 18);
			LeaveRule_logicalOrExpression();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	private sealed partial class logicalAndExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalAndExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();

	// $ANTLR start "logicalAndExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:114:1: logicalAndExpression : ( relationalEqExpression -> relationalEqExpression ) (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )* ;
	[GrammarRule("logicalAndExpression")]
	private OCLSyntaxParser.logicalAndExpression_return logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 19);
		TraceIn("logicalAndExpression", 19);
		OCLSyntaxParser.logicalAndExpression_return retval = new OCLSyntaxParser.logicalAndExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.relationalEqExpression_return expr = default(OCLSyntaxParser.relationalEqExpression_return);
		OCLSyntaxParser.relationalEqExpression_return relationalEqExpression60 = default(OCLSyntaxParser.relationalEqExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_relationalEqExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalEqExpression");
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(114, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:115:2: ( ( relationalEqExpression -> relationalEqExpression ) (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:115:4: ( relationalEqExpression -> relationalEqExpression ) (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )*
			{
			DebugLocation(115, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:115:4: ( relationalEqExpression -> relationalEqExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:115:5: relationalEqExpression
			{
			DebugLocation(115, 5);
			PushFollow(Follow._relationalEqExpression_in_logicalAndExpression841);
			relationalEqExpression60=relationalEqExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_relationalEqExpression.Add(relationalEqExpression60.Tree);


			{
			// AST REWRITE
			// elements: relationalEqExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 115:27: -> relationalEqExpression
			{
				DebugLocation(115, 29);
				adaptor.AddChild(root_0, stream_relationalEqExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(115, 54);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:115:54: (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==100))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:115:55: opToken= 'and' expr= relationalEqExpression
					{
					DebugLocation(115, 62);
					opToken=(CommonToken)Match(input,100,Follow._100_in_logicalAndExpression850); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(opToken);

					DebugLocation(115, 73);
					PushFollow(Follow._relationalEqExpression_in_logicalAndExpression854);
					expr=relationalEqExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_relationalEqExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalAndExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 115:96: -> ^( INFIX[$opToken] $logicalAndExpression $expr)
					{
						DebugLocation(115, 98);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:115:98: ^( INFIX[$opToken] $logicalAndExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(115, 100);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(115, 117);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(115, 139);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAndExpression", 19);
			LeaveRule("logicalAndExpression", 19);
			LeaveRule_logicalAndExpression();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	private sealed partial class relationalEqExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalEqExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_relationalEqExpression();
	partial void LeaveRule_relationalEqExpression();

	// $ANTLR start "relationalEqExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:118:1: relationalEqExpression : ( relationalNotEqExprassion -> relationalNotEqExprassion ) ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )* ;
	[GrammarRule("relationalEqExpression")]
	private OCLSyntaxParser.relationalEqExpression_return relationalEqExpression()
	{
		EnterRule_relationalEqExpression();
		EnterRule("relationalEqExpression", 20);
		TraceIn("relationalEqExpression", 20);
		OCLSyntaxParser.relationalEqExpression_return retval = new OCLSyntaxParser.relationalEqExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.relationalNotEqExprassion_return expr = default(OCLSyntaxParser.relationalNotEqExprassion_return);
		OCLSyntaxParser.relationalNotEqExprassion_return relationalNotEqExprassion61 = default(OCLSyntaxParser.relationalNotEqExprassion_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_relationalNotEqExprassion=new RewriteRuleSubtreeStream(adaptor,"rule relationalNotEqExprassion");
		try { DebugEnterRule(GrammarFileName, "relationalEqExpression");
		DebugLocation(118, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:2: ( ( relationalNotEqExprassion -> relationalNotEqExprassion ) ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:4: ( relationalNotEqExprassion -> relationalNotEqExprassion ) ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )*
			{
			DebugLocation(119, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:4: ( relationalNotEqExprassion -> relationalNotEqExprassion )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:5: relationalNotEqExprassion
			{
			DebugLocation(119, 5);
			PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression879);
			relationalNotEqExprassion61=relationalNotEqExprassion();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_relationalNotEqExprassion.Add(relationalNotEqExprassion61.Tree);


			{
			// AST REWRITE
			// elements: relationalNotEqExprassion
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 119:30: -> relationalNotEqExprassion
			{
				DebugLocation(119, 32);
				adaptor.AddChild(root_0, stream_relationalNotEqExprassion.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(119, 59);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:59: ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==76))
				{
					alt26 = 1;
				}
				else if ((LA26_0==75))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:60: (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion
					{
					DebugLocation(119, 60);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:60: (opToken= '=' |opToken= '<>' )
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==76))
					{
						alt25 = 1;
					}
					else if ((LA25_0==75))
					{
						alt25 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:61: opToken= '='
						{
						DebugLocation(119, 68);
						opToken=(CommonToken)Match(input,76,Follow._76_in_relationalEqExpression888); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_76.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:73: opToken= '<>'
						{
						DebugLocation(119, 80);
						opToken=(CommonToken)Match(input,75,Follow._75_in_relationalEqExpression892); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_75.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(25); }

					DebugLocation(119, 91);
					PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression897);
					expr=relationalNotEqExprassion();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_relationalNotEqExprassion.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: relationalEqExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 119:117: -> ^( INFIX[$opToken] $relationalEqExpression $expr)
					{
						DebugLocation(119, 119);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:119: ^( INFIX[$opToken] $relationalEqExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(119, 121);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(119, 138);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(119, 162);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalEqExpression", 20);
			LeaveRule("relationalEqExpression", 20);
			LeaveRule_relationalEqExpression();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalEqExpression"); }
		return retval;

	}
	// $ANTLR end "relationalEqExpression"

	private sealed partial class relationalNotEqExprassion_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalNotEqExprassion_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_relationalNotEqExprassion();
	partial void LeaveRule_relationalNotEqExprassion();

	// $ANTLR start "relationalNotEqExprassion"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:121:1: relationalNotEqExprassion : ( additiveExpression -> additiveExpression ) ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )* ;
	[GrammarRule("relationalNotEqExprassion")]
	private OCLSyntaxParser.relationalNotEqExprassion_return relationalNotEqExprassion()
	{
		EnterRule_relationalNotEqExprassion();
		EnterRule("relationalNotEqExprassion", 21);
		TraceIn("relationalNotEqExprassion", 21);
		OCLSyntaxParser.relationalNotEqExprassion_return retval = new OCLSyntaxParser.relationalNotEqExprassion_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.additiveExpression_return expr = default(OCLSyntaxParser.additiveExpression_return);
		OCLSyntaxParser.additiveExpression_return additiveExpression62 = default(OCLSyntaxParser.additiveExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
		try { DebugEnterRule(GrammarFileName, "relationalNotEqExprassion");
		DebugLocation(121, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:2: ( ( additiveExpression -> additiveExpression ) ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:4: ( additiveExpression -> additiveExpression ) ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )*
			{
			DebugLocation(122, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:4: ( additiveExpression -> additiveExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:5: additiveExpression
			{
			DebugLocation(122, 5);
			PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion924);
			additiveExpression62=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_additiveExpression.Add(additiveExpression62.Tree);


			{
			// AST REWRITE
			// elements: additiveExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 122:24: -> additiveExpression
			{
				DebugLocation(122, 26);
				adaptor.AddChild(root_0, stream_additiveExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(122, 46);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:46: ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				switch (input.LA(1))
				{
				case 73:
					{
					alt28 = 1;
					}
					break;
				case 77:
					{
					alt28 = 1;
					}
					break;
				case 74:
					{
					alt28 = 1;
					}
					break;
				case 78:
					{
					alt28 = 1;
					}
					break;

				}

				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:47: (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression
					{
					DebugLocation(122, 47);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:47: (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' )
					int alt27=4;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, false);
					switch (input.LA(1))
					{
					case 73:
						{
						alt27 = 1;
						}
						break;
					case 77:
						{
						alt27 = 2;
						}
						break;
					case 74:
						{
						alt27 = 3;
						}
						break;
					case 78:
						{
						alt27 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:48: opToken= '<'
						{
						DebugLocation(122, 55);
						opToken=(CommonToken)Match(input,73,Follow._73_in_relationalNotEqExprassion934); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_73.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:61: opToken= '>'
						{
						DebugLocation(122, 68);
						opToken=(CommonToken)Match(input,77,Follow._77_in_relationalNotEqExprassion939); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_77.Add(opToken);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:74: opToken= '<='
						{
						DebugLocation(122, 81);
						opToken=(CommonToken)Match(input,74,Follow._74_in_relationalNotEqExprassion944); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_74.Add(opToken);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:88: opToken= '>='
						{
						DebugLocation(122, 95);
						opToken=(CommonToken)Match(input,78,Follow._78_in_relationalNotEqExprassion949); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_78.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(27); }

					DebugLocation(122, 106);
					PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion954);
					expr=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_additiveExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: relationalNotEqExprassion, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 122:125: -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr)
					{
						DebugLocation(122, 127);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:122:127: ^( INFIX[$opToken] $relationalNotEqExprassion $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(122, 129);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(122, 146);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(122, 173);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalNotEqExprassion", 21);
			LeaveRule("relationalNotEqExprassion", 21);
			LeaveRule_relationalNotEqExprassion();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalNotEqExprassion"); }
		return retval;

	}
	// $ANTLR end "relationalNotEqExprassion"

	private sealed partial class additiveExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public additiveExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:125:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )* ;
	[GrammarRule("additiveExpression")]
	private OCLSyntaxParser.additiveExpression_return additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 22);
		TraceIn("additiveExpression", 22);
		OCLSyntaxParser.additiveExpression_return retval = new OCLSyntaxParser.additiveExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.multiplicativeExpression_return expr = default(OCLSyntaxParser.multiplicativeExpression_return);
		OCLSyntaxParser.multiplicativeExpression_return multiplicativeExpression63 = default(OCLSyntaxParser.multiplicativeExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(125, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:4: ( multiplicativeExpression -> multiplicativeExpression ) ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )*
			{
			DebugLocation(126, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:4: ( multiplicativeExpression -> multiplicativeExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:5: multiplicativeExpression
			{
			DebugLocation(126, 5);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression980);
			multiplicativeExpression63=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_multiplicativeExpression.Add(multiplicativeExpression63.Tree);


			{
			// AST REWRITE
			// elements: multiplicativeExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 126:29: -> multiplicativeExpression
			{
				DebugLocation(126, 31);
				adaptor.AddChild(root_0, stream_multiplicativeExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(126, 57);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:57: ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==64))
				{
					alt30 = 1;
				}
				else if ((LA30_0==66))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:58: (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression
					{
					DebugLocation(126, 58);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:58: (opToken= '+' |opToken= '-' )
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==64))
					{
						alt29 = 1;
					}
					else if ((LA29_0==66))
					{
						alt29 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:59: opToken= '+'
						{
						DebugLocation(126, 66);
						opToken=(CommonToken)Match(input,64,Follow._64_in_additiveExpression989); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_64.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:71: opToken= '-'
						{
						DebugLocation(126, 78);
						opToken=(CommonToken)Match(input,66,Follow._66_in_additiveExpression993); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_66.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(126, 88);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression999);
					expr=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_multiplicativeExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: additiveExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 126:114: -> ^( INFIX[$opToken] $additiveExpression $expr)
					{
						DebugLocation(126, 116);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:126:116: ^( INFIX[$opToken] $additiveExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(126, 118);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(126, 135);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(126, 155);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 22);
			LeaveRule("additiveExpression", 22);
			LeaveRule_additiveExpression();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	private sealed partial class multiplicativeExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public multiplicativeExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:129:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )* ;
	[GrammarRule("multiplicativeExpression")]
	private OCLSyntaxParser.multiplicativeExpression_return multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 23);
		TraceIn("multiplicativeExpression", 23);
		OCLSyntaxParser.multiplicativeExpression_return retval = new OCLSyntaxParser.multiplicativeExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.unaryExpression_return expr = default(OCLSyntaxParser.unaryExpression_return);
		OCLSyntaxParser.unaryExpression_return unaryExpression64 = default(OCLSyntaxParser.unaryExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_UnlimitedNaturalLiteralExp=new RewriteRuleITokenStream(adaptor,"token UnlimitedNaturalLiteralExp");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(129, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:2: ( ( unaryExpression -> unaryExpression ) ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:4: ( unaryExpression -> unaryExpression ) ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )*
			{
			DebugLocation(130, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:4: ( unaryExpression -> unaryExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:5: unaryExpression
			{
			DebugLocation(130, 5);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression1026);
			unaryExpression64=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression64.Tree);


			{
			// AST REWRITE
			// elements: unaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 130:20: -> unaryExpression
			{
				DebugLocation(130, 22);
				adaptor.AddChild(root_0, stream_unaryExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(130, 39);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:39: ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==UnlimitedNaturalLiteralExp))
				{
					alt32 = 1;
				}
				else if ((LA32_0==69))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:40: (opToken= '*' |opToken= '/' ) expr= unaryExpression
					{
					DebugLocation(130, 40);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:40: (opToken= '*' |opToken= '/' )
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==UnlimitedNaturalLiteralExp))
					{
						alt31 = 1;
					}
					else if ((LA31_0==69))
					{
						alt31 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:41: opToken= '*'
						{
						DebugLocation(130, 48);
						opToken=(CommonToken)Match(input,UnlimitedNaturalLiteralExp,Follow._UnlimitedNaturalLiteralExp_in_multiplicativeExpression1035); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_UnlimitedNaturalLiteralExp.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:53: opToken= '/'
						{
						DebugLocation(130, 60);
						opToken=(CommonToken)Match(input,69,Follow._69_in_multiplicativeExpression1039); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_69.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(130, 70);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression1044);
					expr=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_unaryExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: multiplicativeExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 130:86: -> ^( INFIX[$opToken] $multiplicativeExpression $expr)
					{
						DebugLocation(130, 88);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:130:88: ^( INFIX[$opToken] $multiplicativeExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(130, 90);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(130, 107);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(130, 133);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 23);
			LeaveRule("multiplicativeExpression", 23);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	private sealed partial class unaryExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:133:1: unaryExpression : ( (opToken= '-' |opToken= 'not' ) term= termExpression -> ^( UNARY[$opToken] $term) | termExpression );
	[GrammarRule("unaryExpression")]
	private OCLSyntaxParser.unaryExpression_return unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 24);
		TraceIn("unaryExpression", 24);
		OCLSyntaxParser.unaryExpression_return retval = new OCLSyntaxParser.unaryExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.termExpression_return term = default(OCLSyntaxParser.termExpression_return);
		OCLSyntaxParser.termExpression_return termExpression65 = default(OCLSyntaxParser.termExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleSubtreeStream stream_termExpression=new RewriteRuleSubtreeStream(adaptor,"rule termExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(133, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:134:2: ( (opToken= '-' |opToken= 'not' ) term= termExpression -> ^( UNARY[$opToken] $term) | termExpression )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==66||LA34_0==117))
			{
				alt34 = 1;
			}
			else if (((LA34_0>=IntegerLiteralExp && LA34_0<=InvalidLiteralExp)||LA34_0==NullLiteralExp||(LA34_0>=RealLiteralExp && LA34_0<=SimpleName)||LA34_0==StringLiteralExp||LA34_0==UnlimitedNaturalLiteralExp||LA34_0==62||(LA34_0>=81 && LA34_0<=95)||(LA34_0>=107 && LA34_0<=108)||(LA34_0>=113 && LA34_0<=114)||LA34_0==116||LA34_0==123))
			{
				alt34 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:134:4: (opToken= '-' |opToken= 'not' ) term= termExpression
				{
				DebugLocation(134, 4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:134:4: (opToken= '-' |opToken= 'not' )
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==66))
				{
					alt33 = 1;
				}
				else if ((LA33_0==117))
				{
					alt33 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:134:5: opToken= '-'
					{
					DebugLocation(134, 12);
					opToken=(CommonToken)Match(input,66,Follow._66_in_unaryExpression1072); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(opToken);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:134:17: opToken= 'not'
					{
					DebugLocation(134, 24);
					opToken=(CommonToken)Match(input,117,Follow._117_in_unaryExpression1076); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_117.Add(opToken);


					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(134, 36);
				PushFollow(Follow._termExpression_in_unaryExpression1081);
				term=termExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_termExpression.Add(term.Tree);


				{
				// AST REWRITE
				// elements: term
				// token labels: 
				// rule labels: term, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_term=new RewriteRuleSubtreeStream(adaptor,"rule term",term!=null?term.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 134:52: -> ^( UNARY[$opToken] $term)
				{
					DebugLocation(134, 54);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:134:54: ^( UNARY[$opToken] $term)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(134, 56);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNARY, opToken), root_1);

					DebugLocation(134, 73);
					adaptor.AddChild(root_1, stream_term.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:135:4: termExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._termExpression_in_unaryExpression1095);
				termExpression65=termExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, termExpression65.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 24);
			LeaveRule("unaryExpression", 24);
			LeaveRule_unaryExpression();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	private sealed partial class termExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public termExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_termExpression();
	partial void LeaveRule_termExpression();

	// $ANTLR start "termExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:138:1: termExpression : ( primaryExperession -> primaryExperession ) ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )* ;
	[GrammarRule("termExpression")]
	private OCLSyntaxParser.termExpression_return termExpression()
	{
		EnterRule_termExpression();
		EnterRule("termExpression", 25);
		TraceIn("termExpression", 25);
		OCLSyntaxParser.termExpression_return retval = new OCLSyntaxParser.termExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken token = default(CommonToken);
		OCLSyntaxParser.propertyCall_return expr = default(OCLSyntaxParser.propertyCall_return);
		OCLSyntaxParser.primaryExperession_return primaryExperession66 = default(OCLSyntaxParser.primaryExperession_return);
		OCLSyntaxParser.oclMessageExp_return oclMessageExp67 = default(OCLSyntaxParser.oclMessageExp_return);

		object token_tree = default(object);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleSubtreeStream stream_primaryExperession=new RewriteRuleSubtreeStream(adaptor,"rule primaryExperession");
		RewriteRuleSubtreeStream stream_propertyCall=new RewriteRuleSubtreeStream(adaptor,"rule propertyCall");
		RewriteRuleSubtreeStream stream_oclMessageExp=new RewriteRuleSubtreeStream(adaptor,"rule oclMessageExp");
		try { DebugEnterRule(GrammarFileName, "termExpression");
		DebugLocation(138, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:2: ( ( primaryExperession -> primaryExperession ) ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:4: ( primaryExperession -> primaryExperession ) ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )*
			{
			DebugLocation(139, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:4: ( primaryExperession -> primaryExperession )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:5: primaryExperession
			{
			DebugLocation(139, 5);
			PushFollow(Follow._primaryExperession_in_termExpression1109);
			primaryExperession66=primaryExperession();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primaryExperession.Add(primaryExperession66.Tree);


			{
			// AST REWRITE
			// elements: primaryExperession
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 139:23: -> primaryExperession
			{
				DebugLocation(139, 25);
				adaptor.AddChild(root_0, stream_primaryExperession.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(139, 45);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:45: ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=3;
				try { DebugEnterDecision(36, false);
				switch (input.LA(1))
				{
				case 68:
					{
					alt36 = 1;
					}
					break;
				case 67:
					{
					alt36 = 1;
					}
					break;
				case 99:
					{
					alt36 = 2;
					}
					break;
				case 98:
					{
					alt36 = 2;
					}
					break;

				}

				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:47: ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) )
					{
					DebugLocation(139, 47);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:47: ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:48: (token= '.' |token= '->' ) expr= propertyCall
					{
					DebugLocation(139, 48);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:48: (token= '.' |token= '->' )
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==68))
					{
						alt35 = 1;
					}
					else if ((LA35_0==67))
					{
						alt35 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:49: token= '.'
						{
						DebugLocation(139, 54);
						token=(CommonToken)Match(input,68,Follow._68_in_termExpression1120); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_68.Add(token);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:59: token= '->'
						{
						DebugLocation(139, 64);
						token=(CommonToken)Match(input,67,Follow._67_in_termExpression1124); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_67.Add(token);


						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(139, 75);
					PushFollow(Follow._propertyCall_in_termExpression1129);
					expr=propertyCall();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_propertyCall.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: token, termExpression, expr
					// token labels: token
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_token=new RewriteRuleITokenStream(adaptor,"token token",token);
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 139:89: -> ^( $token $termExpression $expr)
					{
						DebugLocation(139, 92);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:139:92: ^( $token $termExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(139, 95);
						root_1 = (object)adaptor.BecomeRoot(stream_token.NextNode(), root_1);

						DebugLocation(139, 102);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(139, 118);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:140:6: ( oclMessageExp -> MESSAGE oclMessageExp )
					{
					DebugLocation(140, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:140:6: ( oclMessageExp -> MESSAGE oclMessageExp )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:140:7: oclMessageExp
					{
					DebugLocation(140, 7);
					PushFollow(Follow._oclMessageExp_in_termExpression1153);
					oclMessageExp67=oclMessageExp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_oclMessageExp.Add(oclMessageExp67.Tree);


					{
					// AST REWRITE
					// elements: oclMessageExp
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 140:21: -> MESSAGE oclMessageExp
					{
						DebugLocation(140, 24);
						adaptor.AddChild(root_0, (object)adaptor.Create(MESSAGE, "MESSAGE"));
						DebugLocation(140, 32);
						adaptor.AddChild(root_0, stream_oclMessageExp.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}


					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("termExpression", 25);
			LeaveRule("termExpression", 25);
			LeaveRule_termExpression();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "termExpression"); }
		return retval;

	}
	// $ANTLR end "termExpression"

	private sealed partial class primaryExperession_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primaryExperession_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_primaryExperession();
	partial void LeaveRule_primaryExperession();

	// $ANTLR start "primaryExperession"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:145:1: primaryExperession : ( collectionLiteralExpAndType | tupleLiteralExp | classLiteralExp | primitiveLiteralExp -> ^( PRIMITIVELITERAL primitiveLiteralExp ) | enumAndType -> ^( TYPE enumAndType ) | propertyCall | '(' oclExpression ')' | ifExp | letExp );
	[GrammarRule("primaryExperession")]
	private OCLSyntaxParser.primaryExperession_return primaryExperession()
	{
		EnterRule_primaryExperession();
		EnterRule("primaryExperession", 26);
		TraceIn("primaryExperession", 26);
		OCLSyntaxParser.primaryExperession_return retval = new OCLSyntaxParser.primaryExperession_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal74 = default(CommonToken);
		CommonToken char_literal76 = default(CommonToken);
		OCLSyntaxParser.collectionLiteralExpAndType_return collectionLiteralExpAndType68 = default(OCLSyntaxParser.collectionLiteralExpAndType_return);
		OCLSyntaxParser.tupleLiteralExp_return tupleLiteralExp69 = default(OCLSyntaxParser.tupleLiteralExp_return);
		OCLSyntaxParser.classLiteralExp_return classLiteralExp70 = default(OCLSyntaxParser.classLiteralExp_return);
		OCLSyntaxParser.primitiveLiteralExp_return primitiveLiteralExp71 = default(OCLSyntaxParser.primitiveLiteralExp_return);
		OCLSyntaxParser.enumAndType_return enumAndType72 = default(OCLSyntaxParser.enumAndType_return);
		OCLSyntaxParser.propertyCall_return propertyCall73 = default(OCLSyntaxParser.propertyCall_return);
		OCLSyntaxParser.oclExpression_return oclExpression75 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.ifExp_return ifExp77 = default(OCLSyntaxParser.ifExp_return);
		OCLSyntaxParser.letExp_return letExp78 = default(OCLSyntaxParser.letExp_return);

		object char_literal74_tree = default(object);
		object char_literal76_tree = default(object);
		RewriteRuleSubtreeStream stream_primitiveLiteralExp=new RewriteRuleSubtreeStream(adaptor,"rule primitiveLiteralExp");
		RewriteRuleSubtreeStream stream_enumAndType=new RewriteRuleSubtreeStream(adaptor,"rule enumAndType");
		try { DebugEnterRule(GrammarFileName, "primaryExperession");
		DebugLocation(145, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:146:2: ( collectionLiteralExpAndType | tupleLiteralExp | classLiteralExp | primitiveLiteralExp -> ^( PRIMITIVELITERAL primitiveLiteralExp ) | enumAndType -> ^( TYPE enumAndType ) | propertyCall | '(' oclExpression ')' | ifExp | letExp )
			int alt37=9;
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:150:8: collectionLiteralExpAndType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(150, 8);
				PushFollow(Follow._collectionLiteralExpAndType_in_primaryExperession1195);
				collectionLiteralExpAndType68=collectionLiteralExpAndType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralExpAndType68.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:152:4: tupleLiteralExp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._tupleLiteralExp_in_primaryExperession1203);
				tupleLiteralExp69=tupleLiteralExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleLiteralExp69.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:153:4: classLiteralExp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(153, 4);
				PushFollow(Follow._classLiteralExp_in_primaryExperession1209);
				classLiteralExp70=classLiteralExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classLiteralExp70.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:154:4: primitiveLiteralExp
				{
				DebugLocation(154, 4);
				PushFollow(Follow._primitiveLiteralExp_in_primaryExperession1216);
				primitiveLiteralExp71=primitiveLiteralExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveLiteralExp.Add(primitiveLiteralExp71.Tree);


				{
				// AST REWRITE
				// elements: primitiveLiteralExp
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 155:4: -> ^( PRIMITIVELITERAL primitiveLiteralExp )
				{
					DebugLocation(155, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:155:6: ^( PRIMITIVELITERAL primitiveLiteralExp )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(155, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PRIMITIVELITERAL, "PRIMITIVELITERAL"), root_1);

					DebugLocation(155, 25);
					adaptor.AddChild(root_1, stream_primitiveLiteralExp.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:157:4: enumAndType
				{
				DebugLocation(157, 4);
				PushFollow(Follow._enumAndType_in_primaryExperession1234);
				enumAndType72=enumAndType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_enumAndType.Add(enumAndType72.Tree);


				{
				// AST REWRITE
				// elements: enumAndType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 158:4: -> ^( TYPE enumAndType )
				{
					DebugLocation(158, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:158:6: ^( TYPE enumAndType )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(158, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TYPE, "TYPE"), root_1);

					DebugLocation(158, 13);
					adaptor.AddChild(root_1, stream_enumAndType.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:159:4: propertyCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._propertyCall_in_primaryExperession1250);
				propertyCall73=propertyCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyCall73.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:160:4: '(' oclExpression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 7);
				char_literal74=(CommonToken)Match(input,62,Follow._62_in_primaryExperession1255); if (state.failed) return retval;
				DebugLocation(160, 8);
				PushFollow(Follow._oclExpression_in_primaryExperession1257);
				oclExpression75=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclExpression75.Tree);
				DebugLocation(160, 24);
				char_literal76=(CommonToken)Match(input,63,Follow._63_in_primaryExperession1258); if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:161:4: ifExp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._ifExp_in_primaryExperession1264);
				ifExp77=ifExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifExp77.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:162:4: letExp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._letExp_in_primaryExperession1269);
				letExp78=letExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, letExp78.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExperession", 26);
			LeaveRule("primaryExperession", 26);
			LeaveRule_primaryExperession();
		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExperession"); }
		return retval;

	}
	// $ANTLR end "primaryExperession"

	private sealed partial class propertyCall_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyCall_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyCall();
	partial void LeaveRule_propertyCall();

	// $ANTLR start "propertyCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:164:1: propertyCall : ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )? -> ^( CALL pathName ( propertyCallParametrs )? ( ^( INDEX arguments ) )? ( isMarkedPre )? ) |it= 'iterate' '(' ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) ) '|' body= oclExpression ')' -> ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body) );
	[GrammarRule("propertyCall")]
	private OCLSyntaxParser.propertyCall_return propertyCall()
	{
		EnterRule_propertyCall();
		EnterRule("propertyCall", 27);
		TraceIn("propertyCall", 27);
		OCLSyntaxParser.propertyCall_return retval = new OCLSyntaxParser.propertyCall_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken it = default(CommonToken);
		CommonToken itName = default(CommonToken);
		CommonToken accName = default(CommonToken);
		CommonToken char_literal80 = default(CommonToken);
		CommonToken char_literal82 = default(CommonToken);
		CommonToken char_literal84 = default(CommonToken);
		CommonToken char_literal86 = default(CommonToken);
		CommonToken char_literal87 = default(CommonToken);
		CommonToken char_literal88 = default(CommonToken);
		CommonToken char_literal89 = default(CommonToken);
		CommonToken char_literal90 = default(CommonToken);
		CommonToken char_literal91 = default(CommonToken);
		CommonToken char_literal92 = default(CommonToken);
		CommonToken char_literal93 = default(CommonToken);
		CommonToken char_literal94 = default(CommonToken);
		CommonToken char_literal95 = default(CommonToken);
		OCLSyntaxParser.type_return itType = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.type_return accType = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.oclExpression_return accExpr = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return body = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.pathName_return pathName79 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.arguments_return arguments81 = default(OCLSyntaxParser.arguments_return);
		OCLSyntaxParser.isMarkedPre_return isMarkedPre83 = default(OCLSyntaxParser.isMarkedPre_return);
		OCLSyntaxParser.propertyCallParametrs_return propertyCallParametrs85 = default(OCLSyntaxParser.propertyCallParametrs_return);

		object it_tree = default(object);
		object itName_tree = default(object);
		object accName_tree = default(object);
		object char_literal80_tree = default(object);
		object char_literal82_tree = default(object);
		object char_literal84_tree = default(object);
		object char_literal86_tree = default(object);
		object char_literal87_tree = default(object);
		object char_literal88_tree = default(object);
		object char_literal89_tree = default(object);
		object char_literal90_tree = default(object);
		object char_literal91_tree = default(object);
		object char_literal92_tree = default(object);
		object char_literal93_tree = default(object);
		object char_literal94_tree = default(object);
		object char_literal95_tree = default(object);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleSubtreeStream stream_pathName=new RewriteRuleSubtreeStream(adaptor,"rule pathName");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_isMarkedPre=new RewriteRuleSubtreeStream(adaptor,"rule isMarkedPre");
		RewriteRuleSubtreeStream stream_propertyCallParametrs=new RewriteRuleSubtreeStream(adaptor,"rule propertyCallParametrs");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "propertyCall");
		DebugLocation(164, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:2: ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )? -> ^( CALL pathName ( propertyCallParametrs )? ( ^( INDEX arguments ) )? ( isMarkedPre )? ) |it= 'iterate' '(' ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) ) '|' body= oclExpression ')' -> ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body) )
			int alt45=2;
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==SimpleName))
			{
				alt45 = 1;
			}
			else if ((LA45_0==113))
			{
				alt45 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:4: pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )?
				{
				DebugLocation(165, 4);
				PushFollow(Follow._pathName_in_propertyCall1279);
				pathName79=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pathName.Add(pathName79.Tree);
				DebugLocation(165, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:13: ( '[' arguments ']' )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==96))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:14: '[' arguments ']'
					{
					DebugLocation(165, 14);
					char_literal80=(CommonToken)Match(input,96,Follow._96_in_propertyCall1282); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(char_literal80);

					DebugLocation(165, 17);
					PushFollow(Follow._arguments_in_propertyCall1283);
					arguments81=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments81.Tree);
					DebugLocation(165, 26);
					char_literal82=(CommonToken)Match(input,97,Follow._97_in_propertyCall1284); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal82);


					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(165, 32);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:32: ( isMarkedPre )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==80))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:32: isMarkedPre
					{
					DebugLocation(165, 32);
					PushFollow(Follow._isMarkedPre_in_propertyCall1288);
					isMarkedPre83=isMarkedPre();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_isMarkedPre.Add(isMarkedPre83.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(165, 45);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:45: ( '(' propertyCallParametrs ')' )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==62))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:165:46: '(' propertyCallParametrs ')'
					{
					DebugLocation(165, 46);
					char_literal84=(CommonToken)Match(input,62,Follow._62_in_propertyCall1292); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal84);

					DebugLocation(165, 49);
					PushFollow(Follow._propertyCallParametrs_in_propertyCall1293);
					propertyCallParametrs85=propertyCallParametrs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_propertyCallParametrs.Add(propertyCallParametrs85.Tree);
					DebugLocation(165, 70);
					char_literal86=(CommonToken)Match(input,63,Follow._63_in_propertyCall1294); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal86);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }



				{
				// AST REWRITE
				// elements: pathName, propertyCallParametrs, arguments, isMarkedPre
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 168:4: -> ^( CALL pathName ( propertyCallParametrs )? ( ^( INDEX arguments ) )? ( isMarkedPre )? )
				{
					DebugLocation(168, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:168:6: ^( CALL pathName ( propertyCallParametrs )? ( ^( INDEX arguments ) )? ( isMarkedPre )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(168, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CALL, "CALL"), root_1);

					DebugLocation(168, 13);
					adaptor.AddChild(root_1, stream_pathName.NextTree());
					DebugLocation(168, 22);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:168:22: ( propertyCallParametrs )?
					if (stream_propertyCallParametrs.HasNext)
					{
						DebugLocation(168, 22);
						adaptor.AddChild(root_1, stream_propertyCallParametrs.NextTree());

					}
					stream_propertyCallParametrs.Reset();
					DebugLocation(168, 46);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:168:46: ( ^( INDEX arguments ) )?
					if (stream_arguments.HasNext)
					{
						DebugLocation(168, 46);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:168:46: ^( INDEX arguments )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(168, 48);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEX, "INDEX"), root_2);

						DebugLocation(168, 54);
						adaptor.AddChild(root_2, stream_arguments.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_arguments.Reset();
					DebugLocation(168, 66);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:168:66: ( isMarkedPre )?
					if (stream_isMarkedPre.HasNext)
					{
						DebugLocation(168, 66);
						adaptor.AddChild(root_1, stream_isMarkedPre.NextTree());

					}
					stream_isMarkedPre.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:173:3: it= 'iterate' '(' ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) ) '|' body= oclExpression ')'
				{
				DebugLocation(173, 5);
				it=(CommonToken)Match(input,113,Follow._113_in_propertyCall1343); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(it);

				DebugLocation(173, 16);
				char_literal87=(CommonToken)Match(input,62,Follow._62_in_propertyCall1345); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal87);

				DebugLocation(173, 20);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:173:20: ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) )
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==SimpleName))
				{
					int LA44_1 = input.LA(2);

					if ((EvaluatePredicate(synpred1_OCLSyntax_fragment)))
					{
						alt44 = 1;
					}
					else if ((true))
					{
						alt44 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:5: ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					{
					DebugLocation(174, 5);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:5: ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:6: ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression
					{
					DebugLocation(174, 44);
					itName=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyCall1372); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(itName);

					DebugLocation(174, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:56: ( ( ':' ) itType= type )?
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if ((LA41_0==70))
					{
						alt41 = 1;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:57: ( ':' ) itType= type
						{
						DebugLocation(174, 57);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:57: ( ':' )
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:58: ':'
						{
						DebugLocation(174, 58);
						char_literal88=(CommonToken)Match(input,70,Follow._70_in_propertyCall1376); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_70.Add(char_literal88);


						}

						DebugLocation(174, 70);
						PushFollow(Follow._type_in_propertyCall1383);
						itType=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(itType.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(41); }

					DebugLocation(174, 79);
					char_literal89=(CommonToken)Match(input,72,Follow._72_in_propertyCall1387); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal89);

					DebugLocation(174, 90);
					accName=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyCall1392); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(accName);

					DebugLocation(174, 103);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:103: ( ':' accType= type )?
					int alt42=2;
					try { DebugEnterSubRule(42);
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==70))
					{
						alt42 = 1;
					}
					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:104: ':' accType= type
						{
						DebugLocation(174, 104);
						char_literal90=(CommonToken)Match(input,70,Follow._70_in_propertyCall1395); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_70.Add(char_literal90);

						DebugLocation(174, 116);
						PushFollow(Follow._type_in_propertyCall1401);
						accType=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(accType.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(42); }

					DebugLocation(174, 124);
					char_literal91=(CommonToken)Match(input,76,Follow._76_in_propertyCall1404); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal91);

					DebugLocation(174, 136);
					PushFollow(Follow._oclExpression_in_propertyCall1410);
					accExpr=oclExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_oclExpression.Add(accExpr.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:175:7: (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					{
					DebugLocation(175, 7);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:175:7: (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:175:8: accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression
					{
					DebugLocation(175, 16);
					accName=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyCall1426); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(accName);

					DebugLocation(175, 29);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:175:29: ( ':' accType= type )?
					int alt43=2;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==70))
					{
						alt43 = 1;
					}
					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:175:30: ':' accType= type
						{
						DebugLocation(175, 30);
						char_literal92=(CommonToken)Match(input,70,Follow._70_in_propertyCall1429); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_70.Add(char_literal92);

						DebugLocation(175, 42);
						PushFollow(Follow._type_in_propertyCall1434);
						accType=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(accType.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(43); }

					DebugLocation(175, 49);
					char_literal93=(CommonToken)Match(input,76,Follow._76_in_propertyCall1437); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal93);

					DebugLocation(175, 62);
					PushFollow(Follow._oclExpression_in_propertyCall1443);
					accExpr=oclExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_oclExpression.Add(accExpr.Tree);

					}


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(177, 4);
				char_literal94=(CommonToken)Match(input,126,Follow._126_in_propertyCall1455); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_126.Add(char_literal94);

				DebugLocation(177, 13);
				PushFollow(Follow._oclExpression_in_propertyCall1461);
				body=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(body.Tree);
				DebugLocation(177, 29);
				char_literal95=(CommonToken)Match(input,63,Follow._63_in_propertyCall1463); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_63.Add(char_literal95);



				{
				// AST REWRITE
				// elements: itName, itType, accName, accType, accExpr, body
				// token labels: itName, accName
				// rule labels: itType, accType, accExpr, body, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_itName=new RewriteRuleITokenStream(adaptor,"token itName",itName);
				RewriteRuleITokenStream stream_accName=new RewriteRuleITokenStream(adaptor,"token accName",accName);
				RewriteRuleSubtreeStream stream_itType=new RewriteRuleSubtreeStream(adaptor,"rule itType",itType!=null?itType.Tree:null);
				RewriteRuleSubtreeStream stream_accType=new RewriteRuleSubtreeStream(adaptor,"rule accType",accType!=null?accType.Tree:null);
				RewriteRuleSubtreeStream stream_accExpr=new RewriteRuleSubtreeStream(adaptor,"rule accExpr",accExpr!=null?accExpr.Tree:null);
				RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body",body!=null?body.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 178:3: -> ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body)
				{
					DebugLocation(178, 5);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:178:5: ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(178, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ITERATE, it), root_1);

					DebugLocation(178, 21);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:178:21: ( ^( DECL $itName ( $itType)? ) )?
					if (stream_itName.HasNext||stream_itType.HasNext)
					{
						DebugLocation(178, 21);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:178:21: ^( DECL $itName ( $itType)? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(178, 23);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_2);

						DebugLocation(178, 29);
						adaptor.AddChild(root_2, stream_itName.NextNode());
						DebugLocation(178, 37);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:178:37: ( $itType)?
						if (stream_itType.HasNext)
						{
							DebugLocation(178, 37);
							adaptor.AddChild(root_2, stream_itType.NextTree());

						}
						stream_itType.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_itName.Reset();
					stream_itType.Reset();
					DebugLocation(178, 47);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:178:47: ^( ACC $accName ( $accType)? $accExpr)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(178, 49);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ACC, "ACC"), root_2);

					DebugLocation(178, 54);
					adaptor.AddChild(root_2, stream_accName.NextNode());
					DebugLocation(178, 63);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:178:63: ( $accType)?
					if (stream_accType.HasNext)
					{
						DebugLocation(178, 63);
						adaptor.AddChild(root_2, stream_accType.NextTree());

					}
					stream_accType.Reset();
					DebugLocation(178, 73);
					adaptor.AddChild(root_2, stream_accExpr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(178, 83);
					adaptor.AddChild(root_1, stream_body.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyCall", 27);
			LeaveRule("propertyCall", 27);
			LeaveRule_propertyCall();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCall"); }
		return retval;

	}
	// $ANTLR end "propertyCall"

	private sealed partial class propertyCallParametrs_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyCallParametrs_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyCallParametrs();
	partial void LeaveRule_propertyCallParametrs();

	// $ANTLR start "propertyCallParametrs"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:182:1: propertyCallParametrs : ( declarePropertyCallParametrs )? ( arguments )? -> ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? ) ;
	[GrammarRule("propertyCallParametrs")]
	private OCLSyntaxParser.propertyCallParametrs_return propertyCallParametrs()
	{
		EnterRule_propertyCallParametrs();
		EnterRule("propertyCallParametrs", 28);
		TraceIn("propertyCallParametrs", 28);
		OCLSyntaxParser.propertyCallParametrs_return retval = new OCLSyntaxParser.propertyCallParametrs_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.declarePropertyCallParametrs_return declarePropertyCallParametrs96 = default(OCLSyntaxParser.declarePropertyCallParametrs_return);
		OCLSyntaxParser.arguments_return arguments97 = default(OCLSyntaxParser.arguments_return);

		RewriteRuleSubtreeStream stream_declarePropertyCallParametrs=new RewriteRuleSubtreeStream(adaptor,"rule declarePropertyCallParametrs");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		try { DebugEnterRule(GrammarFileName, "propertyCallParametrs");
		DebugLocation(182, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:2: ( ( declarePropertyCallParametrs )? ( arguments )? -> ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:4: ( declarePropertyCallParametrs )? ( arguments )?
			{
			DebugLocation(183, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:4: ( declarePropertyCallParametrs )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==SimpleName))
			{
				int LA46_1 = input.LA(2);

				if ((LA46_1==70||LA46_1==126))
				{
					alt46 = 1;
				}
				else if ((LA46_1==65))
				{
					int LA46_4 = input.LA(3);

					if ((LA46_4==SimpleName))
					{
						int LA46_5 = input.LA(4);

						if ((LA46_5==70||LA46_5==126))
						{
							alt46 = 1;
						}
					}
				}
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:4: declarePropertyCallParametrs
				{
				DebugLocation(183, 4);
				PushFollow(Follow._declarePropertyCallParametrs_in_propertyCallParametrs1519);
				declarePropertyCallParametrs96=declarePropertyCallParametrs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declarePropertyCallParametrs.Add(declarePropertyCallParametrs96.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(183, 34);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:34: ( arguments )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if (((LA47_0>=IntegerLiteralExp && LA47_0<=InvalidLiteralExp)||LA47_0==NullLiteralExp||(LA47_0>=RealLiteralExp && LA47_0<=SimpleName)||LA47_0==StringLiteralExp||LA47_0==UnlimitedNaturalLiteralExp||LA47_0==62||LA47_0==66||(LA47_0>=81 && LA47_0<=95)||(LA47_0>=107 && LA47_0<=108)||(LA47_0>=113 && LA47_0<=114)||(LA47_0>=116 && LA47_0<=117)||LA47_0==123))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:34: arguments
				{
				DebugLocation(183, 34);
				PushFollow(Follow._arguments_in_propertyCallParametrs1522);
				arguments97=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments97.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: declarePropertyCallParametrs, arguments
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 183:45: -> ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? )
			{
				DebugLocation(183, 48);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:48: ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(183, 50);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARGS, "ARGS"), root_1);

				DebugLocation(183, 55);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:55: ( declarePropertyCallParametrs )?
				if (stream_declarePropertyCallParametrs.HasNext)
				{
					DebugLocation(183, 55);
					adaptor.AddChild(root_1, stream_declarePropertyCallParametrs.NextTree());

				}
				stream_declarePropertyCallParametrs.Reset();
				DebugLocation(183, 85);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:183:85: ( arguments )?
				if (stream_arguments.HasNext)
				{
					DebugLocation(183, 85);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

				}
				stream_arguments.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyCallParametrs", 28);
			LeaveRule("propertyCallParametrs", 28);
			LeaveRule_propertyCallParametrs();
		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCallParametrs"); }
		return retval;

	}
	// $ANTLR end "propertyCallParametrs"

	private sealed partial class declarePropertyCallParametrs_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public declarePropertyCallParametrs_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_declarePropertyCallParametrs();
	partial void LeaveRule_declarePropertyCallParametrs();

	// $ANTLR start "declarePropertyCallParametrs"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:187:1: declarePropertyCallParametrs : (t1= typedef ( ',' t2= typedef )? '|' ) -> ^( VARDECL $t1 ( $t2)? ) ;
	[GrammarRule("declarePropertyCallParametrs")]
	private OCLSyntaxParser.declarePropertyCallParametrs_return declarePropertyCallParametrs()
	{
		EnterRule_declarePropertyCallParametrs();
		EnterRule("declarePropertyCallParametrs", 29);
		TraceIn("declarePropertyCallParametrs", 29);
		OCLSyntaxParser.declarePropertyCallParametrs_return retval = new OCLSyntaxParser.declarePropertyCallParametrs_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal98 = default(CommonToken);
		CommonToken char_literal99 = default(CommonToken);
		OCLSyntaxParser.typedef_return t1 = default(OCLSyntaxParser.typedef_return);
		OCLSyntaxParser.typedef_return t2 = default(OCLSyntaxParser.typedef_return);

		object char_literal98_tree = default(object);
		object char_literal99_tree = default(object);
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleSubtreeStream stream_typedef=new RewriteRuleSubtreeStream(adaptor,"rule typedef");
		try { DebugEnterRule(GrammarFileName, "declarePropertyCallParametrs");
		DebugLocation(187, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:188:2: ( (t1= typedef ( ',' t2= typedef )? '|' ) -> ^( VARDECL $t1 ( $t2)? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:188:4: (t1= typedef ( ',' t2= typedef )? '|' )
			{
			DebugLocation(188, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:188:4: (t1= typedef ( ',' t2= typedef )? '|' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:188:6: t1= typedef ( ',' t2= typedef )? '|'
			{
			DebugLocation(188, 8);
			PushFollow(Follow._typedef_in_declarePropertyCallParametrs1556);
			t1=typedef();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typedef.Add(t1.Tree);
			DebugLocation(188, 17);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:188:17: ( ',' t2= typedef )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==65))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:188:18: ',' t2= typedef
				{
				DebugLocation(188, 18);
				char_literal98=(CommonToken)Match(input,65,Follow._65_in_declarePropertyCallParametrs1559); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_65.Add(char_literal98);

				DebugLocation(188, 24);
				PushFollow(Follow._typedef_in_declarePropertyCallParametrs1563);
				t2=typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_typedef.Add(t2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(188, 35);
			char_literal99=(CommonToken)Match(input,126,Follow._126_in_declarePropertyCallParametrs1567); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_126.Add(char_literal99);


			}



			{
			// AST REWRITE
			// elements: t1, t2
			// token labels: 
			// rule labels: t1, t2, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"rule t1",t1!=null?t1.Tree:null);
			RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"rule t2",t2!=null?t2.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 189:3: -> ^( VARDECL $t1 ( $t2)? )
			{
				DebugLocation(189, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:189:6: ^( VARDECL $t1 ( $t2)? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(189, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(VARDECL, "VARDECL"), root_1);

				DebugLocation(189, 17);
				adaptor.AddChild(root_1, stream_t1.NextTree());
				DebugLocation(189, 21);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:189:21: ( $t2)?
				if (stream_t2.HasNext)
				{
					DebugLocation(189, 21);
					adaptor.AddChild(root_1, stream_t2.NextTree());

				}
				stream_t2.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarePropertyCallParametrs", 29);
			LeaveRule("declarePropertyCallParametrs", 29);
			LeaveRule_declarePropertyCallParametrs();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "declarePropertyCallParametrs"); }
		return retval;

	}
	// $ANTLR end "declarePropertyCallParametrs"

	private sealed partial class typedef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public typedef_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_typedef();
	partial void LeaveRule_typedef();

	// $ANTLR start "typedef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:192:1: typedef : SimpleName ( ':' type )? -> ^( DECL SimpleName ( type )? ) ;
	[GrammarRule("typedef")]
	private OCLSyntaxParser.typedef_return typedef()
	{
		EnterRule_typedef();
		EnterRule("typedef", 30);
		TraceIn("typedef", 30);
		OCLSyntaxParser.typedef_return retval = new OCLSyntaxParser.typedef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken SimpleName100 = default(CommonToken);
		CommonToken char_literal101 = default(CommonToken);
		OCLSyntaxParser.type_return type102 = default(OCLSyntaxParser.type_return);

		object SimpleName100_tree = default(object);
		object char_literal101_tree = default(object);
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "typedef");
		DebugLocation(192, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:193:2: ( SimpleName ( ':' type )? -> ^( DECL SimpleName ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:193:4: SimpleName ( ':' type )?
			{
			DebugLocation(193, 4);
			SimpleName100=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_typedef1595); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SimpleName.Add(SimpleName100);

			DebugLocation(193, 14);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:193:14: ( ':' type )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==70))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:193:15: ':' type
				{
				DebugLocation(193, 15);
				char_literal101=(CommonToken)Match(input,70,Follow._70_in_typedef1597); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal101);

				DebugLocation(193, 18);
				PushFollow(Follow._type_in_typedef1598);
				type102=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type102.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: SimpleName, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 194:3: -> ^( DECL SimpleName ( type )? )
			{
				DebugLocation(194, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:194:6: ^( DECL SimpleName ( type )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(194, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

				DebugLocation(194, 13);
				adaptor.AddChild(root_1, stream_SimpleName.NextNode());
				DebugLocation(194, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:194:24: ( type )?
				if (stream_type.HasNext)
				{
					DebugLocation(194, 24);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typedef", 30);
			LeaveRule("typedef", 30);
			LeaveRule_typedef();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "typedef"); }
		return retval;

	}
	// $ANTLR end "typedef"

	private sealed partial class enumAndType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public enumAndType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_enumAndType();
	partial void LeaveRule_enumAndType();

	// $ANTLR start "enumAndType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:197:1: enumAndType : ( tupleType tupleType | primitiveType primitiveType | oclType oclType );
	[GrammarRule("enumAndType")]
	private OCLSyntaxParser.enumAndType_return enumAndType()
	{
		EnterRule_enumAndType();
		EnterRule("enumAndType", 31);
		TraceIn("enumAndType", 31);
		OCLSyntaxParser.enumAndType_return retval = new OCLSyntaxParser.enumAndType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.tupleType_return tupleType103 = default(OCLSyntaxParser.tupleType_return);
		OCLSyntaxParser.tupleType_return tupleType104 = default(OCLSyntaxParser.tupleType_return);
		OCLSyntaxParser.primitiveType_return primitiveType105 = default(OCLSyntaxParser.primitiveType_return);
		OCLSyntaxParser.primitiveType_return primitiveType106 = default(OCLSyntaxParser.primitiveType_return);
		OCLSyntaxParser.oclType_return oclType107 = default(OCLSyntaxParser.oclType_return);
		OCLSyntaxParser.oclType_return oclType108 = default(OCLSyntaxParser.oclType_return);


		try { DebugEnterRule(GrammarFileName, "enumAndType");
		DebugLocation(197, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:201:2: ( tupleType tupleType | primitiveType primitiveType | oclType oclType )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case 94:
				{
				alt50 = 1;
				}
				break;
			case 82:
			case 84:
			case 90:
			case 93:
			case 95:
				{
				alt50 = 2;
				}
				break;
			case 85:
			case 86:
			case 87:
			case 88:
				{
				alt50 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:201:4: tupleType tupleType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(201, 4);
				PushFollow(Follow._tupleType_in_enumAndType1635);
				tupleType103=tupleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleType103.Tree);
				DebugLocation(202, 4);
				PushFollow(Follow._tupleType_in_enumAndType1643);
				tupleType104=tupleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleType104.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:203:4: primitiveType primitiveType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(203, 4);
				PushFollow(Follow._primitiveType_in_enumAndType1648);
				primitiveType105=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType105.Tree);
				DebugLocation(204, 4);
				PushFollow(Follow._primitiveType_in_enumAndType1653);
				primitiveType106=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType106.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:205:4: oclType oclType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(205, 4);
				PushFollow(Follow._oclType_in_enumAndType1658);
				oclType107=oclType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclType107.Tree);
				DebugLocation(206, 3);
				PushFollow(Follow._oclType_in_enumAndType1662);
				oclType108=oclType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclType108.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumAndType", 31);
			LeaveRule("enumAndType", 31);
			LeaveRule_enumAndType();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "enumAndType"); }
		return retval;

	}
	// $ANTLR end "enumAndType"

	private sealed partial class pathName_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pathName_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_pathName();
	partial void LeaveRule_pathName();

	// $ANTLR start "pathName"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:212:1: pathName : SimpleName ( '::' SimpleName )* -> ^( PATH ( SimpleName )+ ) ;
	[GrammarRule("pathName")]
	private OCLSyntaxParser.pathName_return pathName()
	{
		EnterRule_pathName();
		EnterRule("pathName", 32);
		TraceIn("pathName", 32);
		OCLSyntaxParser.pathName_return retval = new OCLSyntaxParser.pathName_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken SimpleName109 = default(CommonToken);
		CommonToken string_literal110 = default(CommonToken);
		CommonToken SimpleName111 = default(CommonToken);

		object SimpleName109_tree = default(object);
		object string_literal110_tree = default(object);
		object SimpleName111_tree = default(object);
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");

		try { DebugEnterRule(GrammarFileName, "pathName");
		DebugLocation(212, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:214:2: ( SimpleName ( '::' SimpleName )* -> ^( PATH ( SimpleName )+ ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:214:4: SimpleName ( '::' SimpleName )*
			{
			DebugLocation(214, 4);
			SimpleName109=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_pathName1679); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SimpleName.Add(SimpleName109);

			DebugLocation(214, 15);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:214:15: ( '::' SimpleName )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==71))
				{
					int LA51_2 = input.LA(2);

					if ((LA51_2==SimpleName))
					{
						int LA51_3 = input.LA(3);

						if ((LA51_3==EOF))
						{
							int LA51_4 = input.LA(4);

							if ((LA51_4==EOF))
							{
								alt51 = 1;
							}


						}
						else if ((LA51_3==DoubleDot||LA51_3==UnlimitedNaturalLiteralExp||(LA51_3>=62 && LA51_3<=69)||(LA51_3>=71 && LA51_3<=78)||LA51_3==80||(LA51_3>=96 && LA51_3<=106)||(LA51_3>=109 && LA51_3<=112)||LA51_3==115||(LA51_3>=118 && LA51_3<=122)||(LA51_3>=124 && LA51_3<=127)))
						{
							alt51 = 1;
						}


					}


				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:214:16: '::' SimpleName
					{
					DebugLocation(214, 16);
					string_literal110=(CommonToken)Match(input,71,Follow._71_in_pathName1682); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(string_literal110);

					DebugLocation(214, 21);
					SimpleName111=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_pathName1684); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName111);


					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: SimpleName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 215:3: -> ^( PATH ( SimpleName )+ )
			{
				DebugLocation(215, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:215:6: ^( PATH ( SimpleName )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(215, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PATH, "PATH"), root_1);

				DebugLocation(215, 13);
				if (!(stream_SimpleName.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_SimpleName.HasNext )
				{
					DebugLocation(215, 13);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());

				}
				stream_SimpleName.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pathName", 32);
			LeaveRule("pathName", 32);
			LeaveRule_pathName();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "pathName"); }
		return retval;

	}
	// $ANTLR end "pathName"

	private sealed partial class collectionLiteralExpAndType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralExpAndType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralExpAndType();
	partial void LeaveRule_collectionLiteralExpAndType();

	// $ANTLR start "collectionLiteralExpAndType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:219:1: collectionLiteralExpAndType : ( collectionTypeIdentifier ( '{' ( collectionLiteralParts )? '}' )? -> ^( COLLECTIONLITERAL collectionTypeIdentifier ( collectionLiteralParts )? ) | collectionTypeIdentifier ( '(' type ')' ) ( ( '{' ( collectionLiteralParts )? '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) ) );
	[GrammarRule("collectionLiteralExpAndType")]
	private OCLSyntaxParser.collectionLiteralExpAndType_return collectionLiteralExpAndType()
	{
		EnterRule_collectionLiteralExpAndType();
		EnterRule("collectionLiteralExpAndType", 33);
		TraceIn("collectionLiteralExpAndType", 33);
		OCLSyntaxParser.collectionLiteralExpAndType_return retval = new OCLSyntaxParser.collectionLiteralExpAndType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal113 = default(CommonToken);
		CommonToken char_literal115 = default(CommonToken);
		CommonToken char_literal117 = default(CommonToken);
		CommonToken char_literal119 = default(CommonToken);
		CommonToken char_literal120 = default(CommonToken);
		CommonToken char_literal122 = default(CommonToken);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier112 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts114 = default(OCLSyntaxParser.collectionLiteralParts_return);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier116 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.type_return type118 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts121 = default(OCLSyntaxParser.collectionLiteralParts_return);

		object char_literal113_tree = default(object);
		object char_literal115_tree = default(object);
		object char_literal117_tree = default(object);
		object char_literal119_tree = default(object);
		object char_literal120_tree = default(object);
		object char_literal122_tree = default(object);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_collectionTypeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule collectionTypeIdentifier");
		RewriteRuleSubtreeStream stream_collectionLiteralParts=new RewriteRuleSubtreeStream(adaptor,"rule collectionLiteralParts");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "collectionLiteralExpAndType");
		DebugLocation(219, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:221:2: ( collectionTypeIdentifier ( '{' ( collectionLiteralParts )? '}' )? -> ^( COLLECTIONLITERAL collectionTypeIdentifier ( collectionLiteralParts )? ) | collectionTypeIdentifier ( '(' type ')' ) ( ( '{' ( collectionLiteralParts )? '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) ) )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==81||LA56_0==83||LA56_0==89||(LA56_0>=91 && LA56_0<=92)))
			{
				int LA56_1 = input.LA(2);

				if ((LA56_1==EOF||LA56_1==DoubleDot||LA56_1==UnlimitedNaturalLiteralExp||(LA56_1>=63 && LA56_1<=69)||(LA56_1>=73 && LA56_1<=78)||(LA56_1>=97 && LA56_1<=106)||(LA56_1>=109 && LA56_1<=112)||LA56_1==115||(LA56_1>=118 && LA56_1<=122)||(LA56_1>=124 && LA56_1<=127)))
				{
					alt56 = 1;
				}
				else if ((LA56_1==62))
				{
					alt56 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:221:3: collectionTypeIdentifier ( '{' ( collectionLiteralParts )? '}' )?
				{
				DebugLocation(221, 3);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExpAndType1713);
				collectionTypeIdentifier112=collectionTypeIdentifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_collectionTypeIdentifier.Add(collectionTypeIdentifier112.Tree);
				DebugLocation(221, 28);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:221:28: ( '{' ( collectionLiteralParts )? '}' )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==125))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:221:29: '{' ( collectionLiteralParts )? '}'
					{
					DebugLocation(221, 29);
					char_literal113=(CommonToken)Match(input,125,Follow._125_in_collectionLiteralExpAndType1716); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal113);

					DebugLocation(221, 33);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:221:33: ( collectionLiteralParts )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if (((LA52_0>=IntegerLiteralExp && LA52_0<=InvalidLiteralExp)||LA52_0==NullLiteralExp||(LA52_0>=RealLiteralExp && LA52_0<=SimpleName)||LA52_0==StringLiteralExp||LA52_0==UnlimitedNaturalLiteralExp||LA52_0==62||LA52_0==66||(LA52_0>=81 && LA52_0<=95)||(LA52_0>=107 && LA52_0<=108)||(LA52_0>=113 && LA52_0<=114)||(LA52_0>=116 && LA52_0<=117)||LA52_0==123))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:221:33: collectionLiteralParts
						{
						DebugLocation(221, 33);
						PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExpAndType1718);
						collectionLiteralParts114=collectionLiteralParts();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_collectionLiteralParts.Add(collectionLiteralParts114.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(221, 57);
					char_literal115=(CommonToken)Match(input,127,Follow._127_in_collectionLiteralExpAndType1721); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_127.Add(char_literal115);


					}
					break;

				}
				} finally { DebugExitSubRule(53); }



				{
				// AST REWRITE
				// elements: collectionTypeIdentifier, collectionLiteralParts
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 222:3: -> ^( COLLECTIONLITERAL collectionTypeIdentifier ( collectionLiteralParts )? )
				{
					DebugLocation(222, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:222:6: ^( COLLECTIONLITERAL collectionTypeIdentifier ( collectionLiteralParts )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(222, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLECTIONLITERAL, "COLLECTIONLITERAL"), root_1);

					DebugLocation(222, 26);
					adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
					DebugLocation(222, 51);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:222:51: ( collectionLiteralParts )?
					if (stream_collectionLiteralParts.HasNext)
					{
						DebugLocation(222, 51);
						adaptor.AddChild(root_1, stream_collectionLiteralParts.NextTree());

					}
					stream_collectionLiteralParts.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:224:4: collectionTypeIdentifier ( '(' type ')' ) ( ( '{' ( collectionLiteralParts )? '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) )
				{
				DebugLocation(224, 4);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExpAndType1743);
				collectionTypeIdentifier116=collectionTypeIdentifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_collectionTypeIdentifier.Add(collectionTypeIdentifier116.Tree);
				DebugLocation(224, 29);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:224:29: ( '(' type ')' )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:224:30: '(' type ')'
				{
				DebugLocation(224, 30);
				char_literal117=(CommonToken)Match(input,62,Follow._62_in_collectionLiteralExpAndType1746); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal117);

				DebugLocation(224, 34);
				PushFollow(Follow._type_in_collectionLiteralExpAndType1748);
				type118=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type118.Tree);
				DebugLocation(224, 40);
				char_literal119=(CommonToken)Match(input,63,Follow._63_in_collectionLiteralExpAndType1751); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_63.Add(char_literal119);


				}

				DebugLocation(225, 2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:225:2: ( ( '{' ( collectionLiteralParts )? '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==125))
				{
					alt55 = 1;
				}
				else if ((LA55_0==EOF||LA55_0==DoubleDot||LA55_0==UnlimitedNaturalLiteralExp||(LA55_0>=63 && LA55_0<=69)||(LA55_0>=73 && LA55_0<=78)||(LA55_0>=97 && LA55_0<=106)||(LA55_0>=109 && LA55_0<=112)||LA55_0==115||(LA55_0>=118 && LA55_0<=122)||LA55_0==124||(LA55_0>=126 && LA55_0<=127)))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:226:3: ( '{' ( collectionLiteralParts )? '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? ) )
					{
					DebugLocation(226, 3);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:226:3: ( '{' ( collectionLiteralParts )? '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? ) )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:226:4: '{' ( collectionLiteralParts )? '}'
					{
					DebugLocation(226, 4);
					char_literal120=(CommonToken)Match(input,125,Follow._125_in_collectionLiteralExpAndType1761); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal120);

					DebugLocation(226, 8);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:226:8: ( collectionLiteralParts )?
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if (((LA54_0>=IntegerLiteralExp && LA54_0<=InvalidLiteralExp)||LA54_0==NullLiteralExp||(LA54_0>=RealLiteralExp && LA54_0<=SimpleName)||LA54_0==StringLiteralExp||LA54_0==UnlimitedNaturalLiteralExp||LA54_0==62||LA54_0==66||(LA54_0>=81 && LA54_0<=95)||(LA54_0>=107 && LA54_0<=108)||(LA54_0>=113 && LA54_0<=114)||(LA54_0>=116 && LA54_0<=117)||LA54_0==123))
					{
						alt54 = 1;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:226:8: collectionLiteralParts
						{
						DebugLocation(226, 8);
						PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExpAndType1763);
						collectionLiteralParts121=collectionLiteralParts();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_collectionLiteralParts.Add(collectionLiteralParts121.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(54); }

					DebugLocation(226, 32);
					char_literal122=(CommonToken)Match(input,127,Follow._127_in_collectionLiteralExpAndType1766); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_127.Add(char_literal122);



					{
					// AST REWRITE
					// elements: collectionTypeIdentifier, type, collectionLiteralParts
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 227:4: -> ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? )
					{
						DebugLocation(227, 7);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:227:7: ^( COLLECTIONLITERAL collectionTypeIdentifier type ( collectionLiteralParts )? )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(227, 9);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLECTIONLITERAL, "COLLECTIONLITERAL"), root_1);

						DebugLocation(227, 27);
						adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
						DebugLocation(227, 52);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(227, 57);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:227:57: ( collectionLiteralParts )?
						if (stream_collectionLiteralParts.HasNext)
						{
							DebugLocation(227, 57);
							adaptor.AddChild(root_1, stream_collectionLiteralParts.NextTree());

						}
						stream_collectionLiteralParts.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:229:5: 
					{

					{
					// AST REWRITE
					// elements: collectionTypeIdentifier, type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 229:5: -> ^( COLLTYPE collectionTypeIdentifier type )
					{
						DebugLocation(229, 7);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:229:7: ^( COLLTYPE collectionTypeIdentifier type )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(229, 9);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLTYPE, "COLLTYPE"), root_1);

						DebugLocation(229, 18);
						adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
						DebugLocation(229, 43);
						adaptor.AddChild(root_1, stream_type.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralExpAndType", 33);
			LeaveRule("collectionLiteralExpAndType", 33);
			LeaveRule_collectionLiteralExpAndType();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExpAndType"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralExpAndType"

	private sealed partial class enumLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public enumLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_enumLiteralExp();
	partial void LeaveRule_enumLiteralExp();

	// $ANTLR start "enumLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:233:1: enumLiteralExp : pathName '::' SimpleName ;
	[GrammarRule("enumLiteralExp")]
	private OCLSyntaxParser.enumLiteralExp_return enumLiteralExp()
	{
		EnterRule_enumLiteralExp();
		EnterRule("enumLiteralExp", 34);
		TraceIn("enumLiteralExp", 34);
		OCLSyntaxParser.enumLiteralExp_return retval = new OCLSyntaxParser.enumLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal124 = default(CommonToken);
		CommonToken SimpleName125 = default(CommonToken);
		OCLSyntaxParser.pathName_return pathName123 = default(OCLSyntaxParser.pathName_return);

		object string_literal124_tree = default(object);
		object SimpleName125_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "enumLiteralExp");
		DebugLocation(233, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:234:2: ( pathName '::' SimpleName )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:234:3: pathName '::' SimpleName
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(234, 3);
			PushFollow(Follow._pathName_in_enumLiteralExp1814);
			pathName123=pathName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, pathName123.Tree);
			DebugLocation(234, 11);
			string_literal124=(CommonToken)Match(input,71,Follow._71_in_enumLiteralExp1815); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal124_tree = (object)adaptor.Create(string_literal124);
			adaptor.AddChild(root_0, string_literal124_tree);
			}
			DebugLocation(234, 16);
			SimpleName125=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_enumLiteralExp1817); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SimpleName125_tree = (object)adaptor.Create(SimpleName125);
			adaptor.AddChild(root_0, SimpleName125_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumLiteralExp", 34);
			LeaveRule("enumLiteralExp", 34);
			LeaveRule_enumLiteralExp();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "enumLiteralExp"); }
		return retval;

	}
	// $ANTLR end "enumLiteralExp"

	private sealed partial class collectionLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralExp();
	partial void LeaveRule_collectionLiteralExp();

	// $ANTLR start "collectionLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:237:1: collectionLiteralExp : ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' );
	[GrammarRule("collectionLiteralExp")]
	private OCLSyntaxParser.collectionLiteralExp_return collectionLiteralExp()
	{
		EnterRule_collectionLiteralExp();
		EnterRule("collectionLiteralExp", 35);
		TraceIn("collectionLiteralExp", 35);
		OCLSyntaxParser.collectionLiteralExp_return retval = new OCLSyntaxParser.collectionLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal127 = default(CommonToken);
		CommonToken char_literal129 = default(CommonToken);
		CommonToken char_literal131 = default(CommonToken);
		CommonToken char_literal133 = default(CommonToken);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier126 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts128 = default(OCLSyntaxParser.collectionLiteralParts_return);
		OCLSyntaxParser.collectionType_return collectionType130 = default(OCLSyntaxParser.collectionType_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts132 = default(OCLSyntaxParser.collectionLiteralParts_return);

		object char_literal127_tree = default(object);
		object char_literal129_tree = default(object);
		object char_literal131_tree = default(object);
		object char_literal133_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralExp");
		DebugLocation(237, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:238:2: ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==81||LA59_0==83||LA59_0==89||(LA59_0>=91 && LA59_0<=92)))
			{
				int LA59_1 = input.LA(2);

				if ((LA59_1==125))
				{
					alt59 = 1;
				}
				else if ((LA59_1==62))
				{
					alt59 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 59, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:238:3: collectionTypeIdentifier '{' ( collectionLiteralParts )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(238, 3);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp1829);
				collectionTypeIdentifier126=collectionTypeIdentifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionTypeIdentifier126.Tree);
				DebugLocation(238, 29);
				char_literal127=(CommonToken)Match(input,125,Follow._125_in_collectionLiteralExp1832); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal127_tree = (object)adaptor.Create(char_literal127);
				adaptor.AddChild(root_0, char_literal127_tree);
				}
				DebugLocation(238, 33);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:238:33: ( collectionLiteralParts )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if (((LA57_0>=IntegerLiteralExp && LA57_0<=InvalidLiteralExp)||LA57_0==NullLiteralExp||(LA57_0>=RealLiteralExp && LA57_0<=SimpleName)||LA57_0==StringLiteralExp||LA57_0==UnlimitedNaturalLiteralExp||LA57_0==62||LA57_0==66||(LA57_0>=81 && LA57_0<=95)||(LA57_0>=107 && LA57_0<=108)||(LA57_0>=113 && LA57_0<=114)||(LA57_0>=116 && LA57_0<=117)||LA57_0==123))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:238:33: collectionLiteralParts
					{
					DebugLocation(238, 33);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1834);
					collectionLiteralParts128=collectionLiteralParts();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralParts128.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(57); }

				DebugLocation(238, 57);
				char_literal129=(CommonToken)Match(input,127,Follow._127_in_collectionLiteralExp1837); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal129_tree = (object)adaptor.Create(char_literal129);
				adaptor.AddChild(root_0, char_literal129_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:239:3: collectionType '{' ( collectionLiteralParts )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(239, 3);
				PushFollow(Follow._collectionType_in_collectionLiteralExp1841);
				collectionType130=collectionType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionType130.Tree);
				DebugLocation(239, 18);
				char_literal131=(CommonToken)Match(input,125,Follow._125_in_collectionLiteralExp1843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal131_tree = (object)adaptor.Create(char_literal131);
				adaptor.AddChild(root_0, char_literal131_tree);
				}
				DebugLocation(239, 22);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:239:22: ( collectionLiteralParts )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if (((LA58_0>=IntegerLiteralExp && LA58_0<=InvalidLiteralExp)||LA58_0==NullLiteralExp||(LA58_0>=RealLiteralExp && LA58_0<=SimpleName)||LA58_0==StringLiteralExp||LA58_0==UnlimitedNaturalLiteralExp||LA58_0==62||LA58_0==66||(LA58_0>=81 && LA58_0<=95)||(LA58_0>=107 && LA58_0<=108)||(LA58_0>=113 && LA58_0<=114)||(LA58_0>=116 && LA58_0<=117)||LA58_0==123))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:239:22: collectionLiteralParts
					{
					DebugLocation(239, 22);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1845);
					collectionLiteralParts132=collectionLiteralParts();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralParts132.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(58); }

				DebugLocation(239, 46);
				char_literal133=(CommonToken)Match(input,127,Follow._127_in_collectionLiteralExp1848); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal133_tree = (object)adaptor.Create(char_literal133);
				adaptor.AddChild(root_0, char_literal133_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralExp", 35);
			LeaveRule("collectionLiteralExp", 35);
			LeaveRule_collectionLiteralExp();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExp"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralExp"

	private sealed partial class collectionTypeIdentifier_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionTypeIdentifier_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionTypeIdentifier();
	partial void LeaveRule_collectionTypeIdentifier();

	// $ANTLR start "collectionTypeIdentifier"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:247:1: collectionTypeIdentifier : ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' );
	[GrammarRule("collectionTypeIdentifier")]
	private OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier()
	{
		EnterRule_collectionTypeIdentifier();
		EnterRule("collectionTypeIdentifier", 36);
		TraceIn("collectionTypeIdentifier", 36);
		OCLSyntaxParser.collectionTypeIdentifier_return retval = new OCLSyntaxParser.collectionTypeIdentifier_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set134 = default(CommonToken);

		object set134_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collectionTypeIdentifier");
		DebugLocation(247, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:248:2: ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(248, 2);
			set134=(CommonToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==83||input.LA(1)==89||(input.LA(1)>=91 && input.LA(1)<=92))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set134));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionTypeIdentifier", 36);
			LeaveRule("collectionTypeIdentifier", 36);
			LeaveRule_collectionTypeIdentifier();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionTypeIdentifier"); }
		return retval;

	}
	// $ANTLR end "collectionTypeIdentifier"

	private sealed partial class collectionLiteralParts_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralParts_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralParts();
	partial void LeaveRule_collectionLiteralParts();

	// $ANTLR start "collectionLiteralParts"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:255:1: collectionLiteralParts : collectionLiteralPart ( ',' collectionLiteralPart )* ;
	[GrammarRule("collectionLiteralParts")]
	private OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts()
	{
		EnterRule_collectionLiteralParts();
		EnterRule("collectionLiteralParts", 37);
		TraceIn("collectionLiteralParts", 37);
		OCLSyntaxParser.collectionLiteralParts_return retval = new OCLSyntaxParser.collectionLiteralParts_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal136 = default(CommonToken);
		OCLSyntaxParser.collectionLiteralPart_return collectionLiteralPart135 = default(OCLSyntaxParser.collectionLiteralPart_return);
		OCLSyntaxParser.collectionLiteralPart_return collectionLiteralPart137 = default(OCLSyntaxParser.collectionLiteralPart_return);

		object char_literal136_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralParts");
		DebugLocation(255, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:256:2: ( collectionLiteralPart ( ',' collectionLiteralPart )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:256:4: collectionLiteralPart ( ',' collectionLiteralPart )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(256, 4);
			PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts1895);
			collectionLiteralPart135=collectionLiteralPart();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralPart135.Tree);
			DebugLocation(256, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:256:26: ( ',' collectionLiteralPart )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==65))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:256:28: ',' collectionLiteralPart
					{
					DebugLocation(256, 31);
					char_literal136=(CommonToken)Match(input,65,Follow._65_in_collectionLiteralParts1899); if (state.failed) return retval;
					DebugLocation(256, 33);
					PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts1902);
					collectionLiteralPart137=collectionLiteralPart();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralPart137.Tree);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralParts", 37);
			LeaveRule("collectionLiteralParts", 37);
			LeaveRule_collectionLiteralParts();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralParts"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralParts"

	private sealed partial class collectionLiteralPart_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralPart_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralPart();
	partial void LeaveRule_collectionLiteralPart();

	// $ANTLR start "collectionLiteralPart"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:259:1: collectionLiteralPart : exp1= oclExpression ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) ) ;
	[GrammarRule("collectionLiteralPart")]
	private OCLSyntaxParser.collectionLiteralPart_return collectionLiteralPart()
	{
		EnterRule_collectionLiteralPart();
		EnterRule("collectionLiteralPart", 38);
		TraceIn("collectionLiteralPart", 38);
		OCLSyntaxParser.collectionLiteralPart_return retval = new OCLSyntaxParser.collectionLiteralPart_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken DoubleDot138 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return exp1 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return exp2 = default(OCLSyntaxParser.oclExpression_return);

		object DoubleDot138_tree = default(object);
		RewriteRuleITokenStream stream_DoubleDot=new RewriteRuleITokenStream(adaptor,"token DoubleDot");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "collectionLiteralPart");
		DebugLocation(259, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:2: (exp1= oclExpression ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:4: exp1= oclExpression ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) )
			{
			DebugLocation(260, 8);
			PushFollow(Follow._oclExpression_in_collectionLiteralPart1919);
			exp1=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(exp1.Tree);
			DebugLocation(260, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:23: ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) )
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==DoubleDot))
			{
				alt61 = 1;
			}
			else if ((LA61_0==65||LA61_0==127))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:24: ( DoubleDot exp2= oclExpression )
				{
				DebugLocation(260, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:24: ( DoubleDot exp2= oclExpression )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:25: DoubleDot exp2= oclExpression
				{
				DebugLocation(260, 25);
				DoubleDot138=(CommonToken)Match(input,DoubleDot,Follow._DoubleDot_in_collectionLiteralPart1923); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DoubleDot.Add(DoubleDot138);

				DebugLocation(260, 39);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1927);
				exp2=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(exp2.Tree);

				}



				{
				// AST REWRITE
				// elements: exp1, exp2
				// token labels: 
				// rule labels: exp1, exp2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.Tree:null);
				RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 260:54: -> ^( COLLPARTRANGE $exp1 $exp2)
				{
					DebugLocation(260, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:56: ^( COLLPARTRANGE $exp1 $exp2)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(260, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLPARTRANGE, "COLLPARTRANGE"), root_1);

					DebugLocation(260, 73);
					adaptor.AddChild(root_1, stream_exp1.NextTree());
					DebugLocation(260, 79);
					adaptor.AddChild(root_1, stream_exp2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:85: 
				{

				{
				// AST REWRITE
				// elements: exp1
				// token labels: 
				// rule labels: exp1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 260:85: -> ^( COLLPART $exp1)
				{
					DebugLocation(260, 87);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:260:87: ^( COLLPART $exp1)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(260, 89);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLPART, "COLLPART"), root_1);

					DebugLocation(260, 99);
					adaptor.AddChild(root_1, stream_exp1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralPart", 38);
			LeaveRule("collectionLiteralPart", 38);
			LeaveRule_collectionLiteralPart();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralPart"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralPart"

	private sealed partial class primitiveLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primitiveLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_primitiveLiteralExp();
	partial void LeaveRule_primitiveLiteralExp();

	// $ANTLR start "primitiveLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:264:1: primitiveLiteralExp : ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | 'true' | 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp );
	[GrammarRule("primitiveLiteralExp")]
	private OCLSyntaxParser.primitiveLiteralExp_return primitiveLiteralExp()
	{
		EnterRule_primitiveLiteralExp();
		EnterRule("primitiveLiteralExp", 39);
		TraceIn("primitiveLiteralExp", 39);
		OCLSyntaxParser.primitiveLiteralExp_return retval = new OCLSyntaxParser.primitiveLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set139 = default(CommonToken);

		object set139_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primitiveLiteralExp");
		DebugLocation(264, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:265:2: ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | 'true' | 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(265, 2);
			set139=(CommonToken)input.LT(1);
			if ((input.LA(1)>=IntegerLiteralExp && input.LA(1)<=InvalidLiteralExp)||input.LA(1)==NullLiteralExp||input.LA(1)==RealLiteralExp||input.LA(1)==StringLiteralExp||input.LA(1)==UnlimitedNaturalLiteralExp||input.LA(1)==107||input.LA(1)==123)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set139));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveLiteralExp", 39);
			LeaveRule("primitiveLiteralExp", 39);
			LeaveRule_primitiveLiteralExp();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveLiteralExp"); }
		return retval;

	}
	// $ANTLR end "primitiveLiteralExp"

	private sealed partial class tupleLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tupleLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_tupleLiteralExp();
	partial void LeaveRule_tupleLiteralExp();

	// $ANTLR start "tupleLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:275:1: tupleLiteralExp : roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' -> ^( TUPLELITERAL[$roottoken] variableDeclarationList ) ;
	[GrammarRule("tupleLiteralExp")]
	private OCLSyntaxParser.tupleLiteralExp_return tupleLiteralExp()
	{
		EnterRule_tupleLiteralExp();
		EnterRule("tupleLiteralExp", 40);
		TraceIn("tupleLiteralExp", 40);
		OCLSyntaxParser.tupleLiteralExp_return retval = new OCLSyntaxParser.tupleLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken roottoken = default(CommonToken);
		CommonToken char_literal140 = default(CommonToken);
		CommonToken char_literal142 = default(CommonToken);
		OCLSyntaxParser.variableDeclarationList_return variableDeclarationList141 = default(OCLSyntaxParser.variableDeclarationList_return);

		object roottoken_tree = default(object);
		object char_literal140_tree = default(object);
		object char_literal142_tree = default(object);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleSubtreeStream stream_variableDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarationList");
		try { DebugEnterRule(GrammarFileName, "tupleLiteralExp");
		DebugLocation(275, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:276:2: (roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' -> ^( TUPLELITERAL[$roottoken] variableDeclarationList ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:276:4: roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}'
			{
			DebugLocation(276, 13);
			roottoken=(CommonToken)Match(input,94,Follow._94_in_tupleLiteralExp2015); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(roottoken);

			DebugLocation(276, 22);
			char_literal140=(CommonToken)Match(input,125,Follow._125_in_tupleLiteralExp2017); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(char_literal140);

			DebugLocation(276, 26);
			PushFollow(Follow._variableDeclarationList_in_tupleLiteralExp2019);
			variableDeclarationList141=variableDeclarationList(VariableDeclarationRequirement.TupleLiteral);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclarationList.Add(variableDeclarationList141.Tree);
			DebugLocation(276, 95);
			char_literal142=(CommonToken)Match(input,127,Follow._127_in_tupleLiteralExp2022); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_127.Add(char_literal142);



			{
			// AST REWRITE
			// elements: variableDeclarationList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 276:99: -> ^( TUPLELITERAL[$roottoken] variableDeclarationList )
			{
				DebugLocation(276, 102);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:276:102: ^( TUPLELITERAL[$roottoken] variableDeclarationList )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(276, 104);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TUPLELITERAL, roottoken), root_1);

				DebugLocation(276, 130);
				adaptor.AddChild(root_1, stream_variableDeclarationList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tupleLiteralExp", 40);
			LeaveRule("tupleLiteralExp", 40);
			LeaveRule_tupleLiteralExp();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleLiteralExp"); }
		return retval;

	}
	// $ANTLR end "tupleLiteralExp"

	private sealed partial class classLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public classLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_classLiteralExp();
	partial void LeaveRule_classLiteralExp();

	// $ANTLR start "classLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:279:1: classLiteralExp : roottoken= 'new' pathName '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' -> ^( CLASSLITERAL[$roottoken] variableDeclarationList pathName ) ;
	[GrammarRule("classLiteralExp")]
	private OCLSyntaxParser.classLiteralExp_return classLiteralExp()
	{
		EnterRule_classLiteralExp();
		EnterRule("classLiteralExp", 41);
		TraceIn("classLiteralExp", 41);
		OCLSyntaxParser.classLiteralExp_return retval = new OCLSyntaxParser.classLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken roottoken = default(CommonToken);
		CommonToken char_literal144 = default(CommonToken);
		CommonToken char_literal146 = default(CommonToken);
		OCLSyntaxParser.pathName_return pathName143 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.variableDeclarationList_return variableDeclarationList145 = default(OCLSyntaxParser.variableDeclarationList_return);

		object roottoken_tree = default(object);
		object char_literal144_tree = default(object);
		object char_literal146_tree = default(object);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleSubtreeStream stream_pathName=new RewriteRuleSubtreeStream(adaptor,"rule pathName");
		RewriteRuleSubtreeStream stream_variableDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarationList");
		try { DebugEnterRule(GrammarFileName, "classLiteralExp");
		DebugLocation(279, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:280:2: (roottoken= 'new' pathName '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' -> ^( CLASSLITERAL[$roottoken] variableDeclarationList pathName ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:280:4: roottoken= 'new' pathName '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}'
			{
			DebugLocation(280, 13);
			roottoken=(CommonToken)Match(input,116,Follow._116_in_classLiteralExp2046); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(roottoken);

			DebugLocation(280, 20);
			PushFollow(Follow._pathName_in_classLiteralExp2048);
			pathName143=pathName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_pathName.Add(pathName143.Tree);
			DebugLocation(280, 29);
			char_literal144=(CommonToken)Match(input,125,Follow._125_in_classLiteralExp2050); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(char_literal144);

			DebugLocation(280, 33);
			PushFollow(Follow._variableDeclarationList_in_classLiteralExp2052);
			variableDeclarationList145=variableDeclarationList(VariableDeclarationRequirement.TupleLiteral);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclarationList.Add(variableDeclarationList145.Tree);
			DebugLocation(280, 102);
			char_literal146=(CommonToken)Match(input,127,Follow._127_in_classLiteralExp2055); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_127.Add(char_literal146);



			{
			// AST REWRITE
			// elements: variableDeclarationList, pathName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 280:105: -> ^( CLASSLITERAL[$roottoken] variableDeclarationList pathName )
			{
				DebugLocation(280, 108);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:280:108: ^( CLASSLITERAL[$roottoken] variableDeclarationList pathName )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(280, 110);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSLITERAL, roottoken), root_1);

				DebugLocation(280, 136);
				adaptor.AddChild(root_1, stream_variableDeclarationList.NextTree());
				DebugLocation(280, 160);
				adaptor.AddChild(root_1, stream_pathName.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classLiteralExp", 41);
			LeaveRule("classLiteralExp", 41);
			LeaveRule_classLiteralExp();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "classLiteralExp"); }
		return retval;

	}
	// $ANTLR end "classLiteralExp"

	private sealed partial class typeLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public typeLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_typeLiteralExp();
	partial void LeaveRule_typeLiteralExp();

	// $ANTLR start "typeLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:283:1: typeLiteralExp : type ;
	[GrammarRule("typeLiteralExp")]
	private OCLSyntaxParser.typeLiteralExp_return typeLiteralExp()
	{
		EnterRule_typeLiteralExp();
		EnterRule("typeLiteralExp", 42);
		TraceIn("typeLiteralExp", 42);
		OCLSyntaxParser.typeLiteralExp_return retval = new OCLSyntaxParser.typeLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.type_return type147 = default(OCLSyntaxParser.type_return);


		try { DebugEnterRule(GrammarFileName, "typeLiteralExp");
		DebugLocation(283, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:284:2: ( type )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:284:3: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(284, 3);
			PushFollow(Follow._type_in_typeLiteralExp2077);
			type147=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type147.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeLiteralExp", 42);
			LeaveRule("typeLiteralExp", 42);
			LeaveRule_typeLiteralExp();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "typeLiteralExp"); }
		return retval;

	}
	// $ANTLR end "typeLiteralExp"

	private sealed partial class variableDeclaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclaration_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:287:1: variableDeclaration[VariableDeclarationRequirement requirement] : ({...}? SimpleName ':' type -> ^( DECL SimpleName ( type )? ) |{...}? SimpleName ( ':' type )? '=' oclExpression -> ^( DECL SimpleName ( type )? ( oclExpression )? ) );
	[GrammarRule("variableDeclaration")]
	private OCLSyntaxParser.variableDeclaration_return variableDeclaration(VariableDeclarationRequirement requirement)
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 43);
		TraceIn("variableDeclaration", 43);
		OCLSyntaxParser.variableDeclaration_return retval = new OCLSyntaxParser.variableDeclaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken SimpleName148 = default(CommonToken);
		CommonToken char_literal149 = default(CommonToken);
		CommonToken SimpleName151 = default(CommonToken);
		CommonToken char_literal152 = default(CommonToken);
		CommonToken char_literal154 = default(CommonToken);
		OCLSyntaxParser.type_return type150 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.type_return type153 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.oclExpression_return oclExpression155 = default(OCLSyntaxParser.oclExpression_return);

		object SimpleName148_tree = default(object);
		object char_literal149_tree = default(object);
		object SimpleName151_tree = default(object);
		object char_literal152_tree = default(object);
		object char_literal154_tree = default(object);
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(287, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:288:2: ({...}? SimpleName ':' type -> ^( DECL SimpleName ( type )? ) |{...}? SimpleName ( ':' type )? '=' oclExpression -> ^( DECL SimpleName ( type )? ( oclExpression )? ) )
			int alt63=2;
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==SimpleName))
			{
				int LA63_1 = input.LA(2);

				if (((requirement==VariableDeclarationRequirement.TupleType ||
						requirement==VariableDeclarationRequirement.Iterator)))
				{
					alt63 = 1;
				}
				else if (((requirement==VariableDeclarationRequirement.TupleLiteral ||
						requirement==VariableDeclarationRequirement.Let)))
				{
					alt63 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:288:3: {...}? SimpleName ':' type
				{
				DebugLocation(288, 3);
				if (!((requirement==VariableDeclarationRequirement.TupleType ||
						requirement==VariableDeclarationRequirement.Iterator)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "variableDeclaration", "$requirement==VariableDeclarationRequirement.TupleType ||\r\n\t\t$requirement==VariableDeclarationRequirement.Iterator");
				}
				DebugLocation(290, 3);
				SimpleName148=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration2092); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SimpleName.Add(SimpleName148);

				DebugLocation(290, 14);
				char_literal149=(CommonToken)Match(input,70,Follow._70_in_variableDeclaration2094); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_70.Add(char_literal149);

				DebugLocation(290, 18);
				PushFollow(Follow._type_in_variableDeclaration2096);
				type150=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type150.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 290:24: -> ^( DECL SimpleName ( type )? )
				{
					DebugLocation(290, 27);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:290:27: ^( DECL SimpleName ( type )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(290, 29);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

					DebugLocation(290, 34);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());
					DebugLocation(290, 45);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:290:45: ( type )?
					if (stream_type.HasNext)
					{
						DebugLocation(290, 45);
						adaptor.AddChild(root_1, stream_type.NextTree());

					}
					stream_type.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:291:3: {...}? SimpleName ( ':' type )? '=' oclExpression
				{
				DebugLocation(291, 3);
				if (!((requirement==VariableDeclarationRequirement.TupleLiteral ||
						requirement==VariableDeclarationRequirement.Let)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "variableDeclaration", "$requirement==VariableDeclarationRequirement.TupleLiteral ||\r\n\t\t$requirement==VariableDeclarationRequirement.Let");
				}
				DebugLocation(293, 3);
				SimpleName151=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration2119); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SimpleName.Add(SimpleName151);

				DebugLocation(293, 14);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:293:14: ( ':' type )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==70))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:293:15: ':' type
					{
					DebugLocation(293, 15);
					char_literal152=(CommonToken)Match(input,70,Follow._70_in_variableDeclaration2122); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(char_literal152);

					DebugLocation(293, 19);
					PushFollow(Follow._type_in_variableDeclaration2124);
					type153=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type153.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(62); }

				DebugLocation(293, 27);
				char_literal154=(CommonToken)Match(input,76,Follow._76_in_variableDeclaration2129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_76.Add(char_literal154);

				DebugLocation(293, 31);
				PushFollow(Follow._oclExpression_in_variableDeclaration2131);
				oclExpression155=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression155.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, type, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 293:46: -> ^( DECL SimpleName ( type )? ( oclExpression )? )
				{
					DebugLocation(293, 49);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:293:49: ^( DECL SimpleName ( type )? ( oclExpression )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(293, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

					DebugLocation(293, 56);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());
					DebugLocation(293, 67);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:293:67: ( type )?
					if (stream_type.HasNext)
					{
						DebugLocation(293, 67);
						adaptor.AddChild(root_1, stream_type.NextTree());

					}
					stream_type.Reset();
					DebugLocation(293, 73);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:293:73: ( oclExpression )?
					if (stream_oclExpression.HasNext)
					{
						DebugLocation(293, 73);
						adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					}
					stream_oclExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaration", 43);
			LeaveRule("variableDeclaration", 43);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return retval;

	}
	// $ANTLR end "variableDeclaration"

	private sealed partial class type_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public type_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:297:1: type : ( pathName | collectionType | tupleType | primitiveType | oclType );
	[GrammarRule("type")]
	private OCLSyntaxParser.type_return type()
	{
		EnterRule_type();
		EnterRule("type", 44);
		TraceIn("type", 44);
		OCLSyntaxParser.type_return retval = new OCLSyntaxParser.type_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.pathName_return pathName156 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.collectionType_return collectionType157 = default(OCLSyntaxParser.collectionType_return);
		OCLSyntaxParser.tupleType_return tupleType158 = default(OCLSyntaxParser.tupleType_return);
		OCLSyntaxParser.primitiveType_return primitiveType159 = default(OCLSyntaxParser.primitiveType_return);
		OCLSyntaxParser.oclType_return oclType160 = default(OCLSyntaxParser.oclType_return);


		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(297, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:298:2: ( pathName | collectionType | tupleType | primitiveType | oclType )
			int alt64=5;
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case SimpleName:
				{
				alt64 = 1;
				}
				break;
			case 81:
			case 83:
			case 89:
			case 91:
			case 92:
				{
				alt64 = 2;
				}
				break;
			case 94:
				{
				alt64 = 3;
				}
				break;
			case 82:
			case 84:
			case 90:
			case 93:
			case 95:
				{
				alt64 = 4;
				}
				break;
			case 85:
			case 86:
			case 87:
			case 88:
				{
				alt64 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:298:4: pathName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(298, 4);
				PushFollow(Follow._pathName_in_type2160);
				pathName156=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pathName156.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:299:4: collectionType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(299, 4);
				PushFollow(Follow._collectionType_in_type2168);
				collectionType157=collectionType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionType157.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:300:4: tupleType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(300, 4);
				PushFollow(Follow._tupleType_in_type2174);
				tupleType158=tupleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleType158.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:301:4: primitiveType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(301, 4);
				PushFollow(Follow._primitiveType_in_type2181);
				primitiveType159=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType159.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:302:4: oclType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(302, 4);
				PushFollow(Follow._oclType_in_type2188);
				oclType160=oclType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclType160.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 44);
			LeaveRule("type", 44);
			LeaveRule_type();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	private sealed partial class primitiveType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primitiveType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();

	// $ANTLR start "primitiveType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:305:1: primitiveType : ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' );
	[GrammarRule("primitiveType")]
	private OCLSyntaxParser.primitiveType_return primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 45);
		TraceIn("primitiveType", 45);
		OCLSyntaxParser.primitiveType_return retval = new OCLSyntaxParser.primitiveType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set161 = default(CommonToken);

		object set161_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(305, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:306:2: ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(306, 2);
			set161=(CommonToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==84||input.LA(1)==90||input.LA(1)==93||input.LA(1)==95)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set161));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 45);
			LeaveRule("primitiveType", 45);
			LeaveRule_primitiveType();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	private sealed partial class oclType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclType();
	partial void LeaveRule_oclType();

	// $ANTLR start "oclType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:313:1: oclType : ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' );
	[GrammarRule("oclType")]
	private OCLSyntaxParser.oclType_return oclType()
	{
		EnterRule_oclType();
		EnterRule("oclType", 46);
		TraceIn("oclType", 46);
		OCLSyntaxParser.oclType_return retval = new OCLSyntaxParser.oclType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set162 = default(CommonToken);

		object set162_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclType");
		DebugLocation(313, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:314:2: ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(314, 2);
			set162=(CommonToken)input.LT(1);
			if ((input.LA(1)>=85 && input.LA(1)<=88))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set162));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclType", 46);
			LeaveRule("oclType", 46);
			LeaveRule_oclType();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "oclType"); }
		return retval;

	}
	// $ANTLR end "oclType"

	private sealed partial class collectionType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionType();
	partial void LeaveRule_collectionType();

	// $ANTLR start "collectionType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:320:1: collectionType : collectionTypeIdentifier '(' type ')' -> ^( COLLTYPE collectionTypeIdentifier type ) ;
	[GrammarRule("collectionType")]
	private OCLSyntaxParser.collectionType_return collectionType()
	{
		EnterRule_collectionType();
		EnterRule("collectionType", 47);
		TraceIn("collectionType", 47);
		OCLSyntaxParser.collectionType_return retval = new OCLSyntaxParser.collectionType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal164 = default(CommonToken);
		CommonToken char_literal166 = default(CommonToken);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier163 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.type_return type165 = default(OCLSyntaxParser.type_return);

		object char_literal164_tree = default(object);
		object char_literal166_tree = default(object);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_collectionTypeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule collectionTypeIdentifier");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "collectionType");
		DebugLocation(320, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:321:2: ( collectionTypeIdentifier '(' type ')' -> ^( COLLTYPE collectionTypeIdentifier type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:321:4: collectionTypeIdentifier '(' type ')'
			{
			DebugLocation(321, 4);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionType2294);
			collectionTypeIdentifier163=collectionTypeIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_collectionTypeIdentifier.Add(collectionTypeIdentifier163.Tree);
			DebugLocation(321, 29);
			char_literal164=(CommonToken)Match(input,62,Follow._62_in_collectionType2296); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal164);

			DebugLocation(321, 33);
			PushFollow(Follow._type_in_collectionType2298);
			type165=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type165.Tree);
			DebugLocation(321, 39);
			char_literal166=(CommonToken)Match(input,63,Follow._63_in_collectionType2301); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal166);



			{
			// AST REWRITE
			// elements: collectionTypeIdentifier, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 321:43: -> ^( COLLTYPE collectionTypeIdentifier type )
			{
				DebugLocation(321, 46);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:321:46: ^( COLLTYPE collectionTypeIdentifier type )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(321, 48);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLTYPE, "COLLTYPE"), root_1);

				DebugLocation(321, 58);
				adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
				DebugLocation(321, 83);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionType", 47);
			LeaveRule("collectionType", 47);
			LeaveRule_collectionType();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionType"); }
		return retval;

	}
	// $ANTLR end "collectionType"

	private sealed partial class tupleType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tupleType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_tupleType();
	partial void LeaveRule_tupleType();

	// $ANTLR start "tupleType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:324:1: tupleType : 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')' ;
	[GrammarRule("tupleType")]
	private OCLSyntaxParser.tupleType_return tupleType()
	{
		EnterRule_tupleType();
		EnterRule("tupleType", 48);
		TraceIn("tupleType", 48);
		OCLSyntaxParser.tupleType_return retval = new OCLSyntaxParser.tupleType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal167 = default(CommonToken);
		CommonToken char_literal168 = default(CommonToken);
		CommonToken char_literal170 = default(CommonToken);
		OCLSyntaxParser.variableDeclarationList_return variableDeclarationList169 = default(OCLSyntaxParser.variableDeclarationList_return);

		object string_literal167_tree = default(object);
		object char_literal168_tree = default(object);
		object char_literal170_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "tupleType");
		DebugLocation(324, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:325:2: ( 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:325:4: 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(325, 11);
			string_literal167=(CommonToken)Match(input,94,Follow._94_in_tupleType2326); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal167_tree = (object)adaptor.Create(string_literal167);
			root_0 = (object)adaptor.BecomeRoot(string_literal167_tree, root_0);
			}
			DebugLocation(325, 16);
			char_literal168=(CommonToken)Match(input,62,Follow._62_in_tupleType2329); if (state.failed) return retval;
			DebugLocation(325, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:325:18: ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==SimpleName))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:325:18: variableDeclarationList[VariableDeclarationRequirement.TupleType]
				{
				DebugLocation(325, 18);
				PushFollow(Follow._variableDeclarationList_in_tupleType2332);
				variableDeclarationList169=variableDeclarationList(VariableDeclarationRequirement.TupleType);
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationList169.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(325, 88);
			char_literal170=(CommonToken)Match(input,63,Follow._63_in_tupleType2336); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tupleType", 48);
			LeaveRule("tupleType", 48);
			LeaveRule_tupleType();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleType"); }
		return retval;

	}
	// $ANTLR end "tupleType"

	private sealed partial class variableDeclarationList_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclarationList_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:329:1: variableDeclarationList[VariableDeclarationRequirement requirement] : variableDeclaration[requirement] ( ',' variableDeclaration[requirement] )* ;
	[GrammarRule("variableDeclarationList")]
	private OCLSyntaxParser.variableDeclarationList_return variableDeclarationList(VariableDeclarationRequirement requirement)
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 49);
		TraceIn("variableDeclarationList", 49);
		OCLSyntaxParser.variableDeclarationList_return retval = new OCLSyntaxParser.variableDeclarationList_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal172 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration171 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration173 = default(OCLSyntaxParser.variableDeclaration_return);

		object char_literal172_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(329, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:330:2: ( variableDeclaration[requirement] ( ',' variableDeclaration[requirement] )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:330:4: variableDeclaration[requirement] ( ',' variableDeclaration[requirement] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(330, 4);
			PushFollow(Follow._variableDeclaration_in_variableDeclarationList2352);
			variableDeclaration171=variableDeclaration(requirement);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration171.Tree);
			DebugLocation(330, 37);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:330:37: ( ',' variableDeclaration[requirement] )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==65))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:330:38: ',' variableDeclaration[requirement]
					{
					DebugLocation(330, 41);
					char_literal172=(CommonToken)Match(input,65,Follow._65_in_variableDeclarationList2356); if (state.failed) return retval;
					DebugLocation(330, 43);
					PushFollow(Follow._variableDeclaration_in_variableDeclarationList2359);
					variableDeclaration173=variableDeclaration(requirement);
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration173.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationList", 49);
			LeaveRule("variableDeclarationList", 49);
			LeaveRule_variableDeclarationList();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationList"

	private sealed partial class isMarkedPre_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public isMarkedPre_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_isMarkedPre();
	partial void LeaveRule_isMarkedPre();

	// $ANTLR start "isMarkedPre"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:332:1: isMarkedPre : '@' 'pre' ;
	[GrammarRule("isMarkedPre")]
	private OCLSyntaxParser.isMarkedPre_return isMarkedPre()
	{
		EnterRule_isMarkedPre();
		EnterRule("isMarkedPre", 50);
		TraceIn("isMarkedPre", 50);
		OCLSyntaxParser.isMarkedPre_return retval = new OCLSyntaxParser.isMarkedPre_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal174 = default(CommonToken);
		CommonToken string_literal175 = default(CommonToken);

		object char_literal174_tree = default(object);
		object string_literal175_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "isMarkedPre");
		DebugLocation(332, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:333:2: ( '@' 'pre' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:333:4: '@' 'pre'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(333, 7);
			char_literal174=(CommonToken)Match(input,80,Follow._80_in_isMarkedPre2375); if (state.failed) return retval;
			DebugLocation(333, 9);
			string_literal175=(CommonToken)Match(input,120,Follow._120_in_isMarkedPre2378); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal175_tree = (object)adaptor.Create(string_literal175);
			adaptor.AddChild(root_0, string_literal175_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("isMarkedPre", 50);
			LeaveRule("isMarkedPre", 50);
			LeaveRule_isMarkedPre();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "isMarkedPre"); }
		return retval;

	}
	// $ANTLR end "isMarkedPre"

	private sealed partial class arguments_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arguments_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:336:1: arguments : exp1= oclExpression ( ',' exp2= oclExpression )* ;
	[GrammarRule("arguments")]
	private OCLSyntaxParser.arguments_return arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 51);
		TraceIn("arguments", 51);
		OCLSyntaxParser.arguments_return retval = new OCLSyntaxParser.arguments_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal176 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return exp1 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return exp2 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal176_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(336, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:337:2: (exp1= oclExpression ( ',' exp2= oclExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:337:4: exp1= oclExpression ( ',' exp2= oclExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(337, 9);
			PushFollow(Follow._oclExpression_in_arguments2394);
			exp1=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exp1.Tree);
			DebugLocation(337, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:337:26: ( ',' exp2= oclExpression )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==65))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:337:28: ',' exp2= oclExpression
					{
					DebugLocation(337, 31);
					char_literal176=(CommonToken)Match(input,65,Follow._65_in_arguments2399); if (state.failed) return retval;
					DebugLocation(337, 37);
					PushFollow(Follow._oclExpression_in_arguments2404);
					exp2=oclExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exp2.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 51);
			LeaveRule("arguments", 51);
			LeaveRule_arguments();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	private sealed partial class letExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public letExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_letExp();
	partial void LeaveRule_letExp();

	// $ANTLR start "letExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:341:1: letExp : 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) ;
	[GrammarRule("letExp")]
	private OCLSyntaxParser.letExp_return letExp()
	{
		EnterRule_letExp();
		EnterRule("letExp", 52);
		TraceIn("letExp", 52);
		OCLSyntaxParser.letExp_return retval = new OCLSyntaxParser.letExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal177 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration178 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.letExpSub_return letExpSub179 = default(OCLSyntaxParser.letExpSub_return);

		object string_literal177_tree = default(object);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_variableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaration");
		RewriteRuleSubtreeStream stream_letExpSub=new RewriteRuleSubtreeStream(adaptor,"rule letExpSub");
		try { DebugEnterRule(GrammarFileName, "letExp");
		DebugLocation(341, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:342:2: ( 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:342:4: 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub
			{
			DebugLocation(342, 4);
			string_literal177=(CommonToken)Match(input,114,Follow._114_in_letExp2420); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(string_literal177);

			DebugLocation(342, 10);
			PushFollow(Follow._variableDeclaration_in_letExp2422);
			variableDeclaration178=variableDeclaration(VariableDeclarationRequirement.Let);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaration.Add(variableDeclaration178.Tree);
			DebugLocation(342, 66);
			PushFollow(Follow._letExpSub_in_letExp2425);
			letExpSub179=letExpSub();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_letExpSub.Add(letExpSub179.Tree);


			{
			// AST REWRITE
			// elements: variableDeclaration, letExpSub
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 342:76: -> ^( LET variableDeclaration letExpSub )
			{
				DebugLocation(342, 79);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:342:79: ^( LET variableDeclaration letExpSub )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(342, 81);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(LET, "LET"), root_1);

				DebugLocation(342, 85);
				adaptor.AddChild(root_1, stream_variableDeclaration.NextTree());
				DebugLocation(342, 105);
				adaptor.AddChild(root_1, stream_letExpSub.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("letExp", 52);
			LeaveRule("letExp", 52);
			LeaveRule_letExp();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "letExp"); }
		return retval;

	}
	// $ANTLR end "letExp"

	private sealed partial class letExpSub_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public letExpSub_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_letExpSub();
	partial void LeaveRule_letExpSub();

	// $ANTLR start "letExpSub"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:345:1: letExpSub : ( ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) | 'in' ( options {greedy=false; } : oclExpression ) -> oclExpression );
	[GrammarRule("letExpSub")]
	private OCLSyntaxParser.letExpSub_return letExpSub()
	{
		EnterRule_letExpSub();
		EnterRule("letExpSub", 53);
		TraceIn("letExpSub", 53);
		OCLSyntaxParser.letExpSub_return retval = new OCLSyntaxParser.letExpSub_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal180 = default(CommonToken);
		CommonToken string_literal183 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration181 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.letExpSub_return letExpSub182 = default(OCLSyntaxParser.letExpSub_return);
		OCLSyntaxParser.oclExpression_return oclExpression184 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal180_tree = default(object);
		object string_literal183_tree = default(object);
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_variableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaration");
		RewriteRuleSubtreeStream stream_letExpSub=new RewriteRuleSubtreeStream(adaptor,"rule letExpSub");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "letExpSub");
		DebugLocation(345, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:346:2: ( ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) | 'in' ( options {greedy=false; } : oclExpression ) -> oclExpression )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==65))
			{
				alt68 = 1;
			}
			else if ((LA68_0==110))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:346:4: ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub
				{
				DebugLocation(346, 4);
				char_literal180=(CommonToken)Match(input,65,Follow._65_in_letExpSub2447); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_65.Add(char_literal180);

				DebugLocation(346, 8);
				PushFollow(Follow._variableDeclaration_in_letExpSub2449);
				variableDeclaration181=variableDeclaration(VariableDeclarationRequirement.Let);
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableDeclaration.Add(variableDeclaration181.Tree);
				DebugLocation(346, 64);
				PushFollow(Follow._letExpSub_in_letExpSub2452);
				letExpSub182=letExpSub();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_letExpSub.Add(letExpSub182.Tree);


				{
				// AST REWRITE
				// elements: variableDeclaration, letExpSub
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 346:74: -> ^( LET variableDeclaration letExpSub )
				{
					DebugLocation(346, 77);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:346:77: ^( LET variableDeclaration letExpSub )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(346, 79);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(LET, "LET"), root_1);

					DebugLocation(346, 83);
					adaptor.AddChild(root_1, stream_variableDeclaration.NextTree());
					DebugLocation(346, 103);
					adaptor.AddChild(root_1, stream_letExpSub.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:347:4: 'in' ( options {greedy=false; } : oclExpression )
				{
				DebugLocation(347, 4);
				string_literal183=(CommonToken)Match(input,110,Follow._110_in_letExpSub2467); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(string_literal183);

				DebugLocation(347, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:347:9: ( options {greedy=false; } : oclExpression )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:347:35: oclExpression
				{
				DebugLocation(347, 35);
				PushFollow(Follow._oclExpression_in_letExpSub2478);
				oclExpression184=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression184.Tree);

				}



				{
				// AST REWRITE
				// elements: oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:50: -> oclExpression
				{
					DebugLocation(347, 53);
					adaptor.AddChild(root_0, stream_oclExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("letExpSub", 53);
			LeaveRule("letExpSub", 53);
			LeaveRule_letExpSub();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "letExpSub"); }
		return retval;

	}
	// $ANTLR end "letExpSub"

	private sealed partial class oclMessageExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclMessageExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclMessageExp();
	partial void LeaveRule_oclMessageExp();

	// $ANTLR start "oclMessageExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:350:1: oclMessageExp : ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' );
	[GrammarRule("oclMessageExp")]
	private OCLSyntaxParser.oclMessageExp_return oclMessageExp()
	{
		EnterRule_oclMessageExp();
		EnterRule("oclMessageExp", 54);
		TraceIn("oclMessageExp", 54);
		OCLSyntaxParser.oclMessageExp_return retval = new OCLSyntaxParser.oclMessageExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal185 = default(CommonToken);
		CommonToken SimpleName186 = default(CommonToken);
		CommonToken char_literal187 = default(CommonToken);
		CommonToken char_literal189 = default(CommonToken);
		CommonToken char_literal190 = default(CommonToken);
		CommonToken SimpleName191 = default(CommonToken);
		CommonToken char_literal192 = default(CommonToken);
		CommonToken char_literal194 = default(CommonToken);
		OCLSyntaxParser.oclMessageArguments_return oclMessageArguments188 = default(OCLSyntaxParser.oclMessageArguments_return);
		OCLSyntaxParser.oclMessageArguments_return oclMessageArguments193 = default(OCLSyntaxParser.oclMessageArguments_return);

		object string_literal185_tree = default(object);
		object SimpleName186_tree = default(object);
		object char_literal187_tree = default(object);
		object char_literal189_tree = default(object);
		object char_literal190_tree = default(object);
		object SimpleName191_tree = default(object);
		object char_literal192_tree = default(object);
		object char_literal194_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclMessageExp");
		DebugLocation(350, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:351:2: ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==99))
			{
				alt71 = 1;
			}
			else if ((LA71_0==98))
			{
				alt71 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:351:4: '^^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(351, 4);
				string_literal185=(CommonToken)Match(input,99,Follow._99_in_oclMessageExp2494); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal185_tree = (object)adaptor.Create(string_literal185);
				adaptor.AddChild(root_0, string_literal185_tree);
				}
				DebugLocation(351, 9);
				SimpleName186=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp2496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SimpleName186_tree = (object)adaptor.Create(SimpleName186);
				adaptor.AddChild(root_0, SimpleName186_tree);
				}
				DebugLocation(351, 20);
				char_literal187=(CommonToken)Match(input,62,Follow._62_in_oclMessageExp2498); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal187_tree = (object)adaptor.Create(char_literal187);
				adaptor.AddChild(root_0, char_literal187_tree);
				}
				DebugLocation(351, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:351:24: ( oclMessageArguments )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if (((LA69_0>=IntegerLiteralExp && LA69_0<=InvalidLiteralExp)||LA69_0==NullLiteralExp||(LA69_0>=RealLiteralExp && LA69_0<=SimpleName)||LA69_0==StringLiteralExp||LA69_0==UnlimitedNaturalLiteralExp||LA69_0==62||LA69_0==66||LA69_0==79||(LA69_0>=81 && LA69_0<=95)||(LA69_0>=107 && LA69_0<=108)||(LA69_0>=113 && LA69_0<=114)||(LA69_0>=116 && LA69_0<=117)||LA69_0==123))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:351:24: oclMessageArguments
					{
					DebugLocation(351, 24);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp2500);
					oclMessageArguments188=oclMessageArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArguments188.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(351, 45);
				char_literal189=(CommonToken)Match(input,63,Follow._63_in_oclMessageExp2503); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal189_tree = (object)adaptor.Create(char_literal189);
				adaptor.AddChild(root_0, char_literal189_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:352:4: '^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(352, 4);
				char_literal190=(CommonToken)Match(input,98,Follow._98_in_oclMessageExp2508); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal190_tree = (object)adaptor.Create(char_literal190);
				adaptor.AddChild(root_0, char_literal190_tree);
				}
				DebugLocation(352, 8);
				SimpleName191=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp2510); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SimpleName191_tree = (object)adaptor.Create(SimpleName191);
				adaptor.AddChild(root_0, SimpleName191_tree);
				}
				DebugLocation(352, 19);
				char_literal192=(CommonToken)Match(input,62,Follow._62_in_oclMessageExp2512); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal192_tree = (object)adaptor.Create(char_literal192);
				adaptor.AddChild(root_0, char_literal192_tree);
				}
				DebugLocation(352, 23);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:352:23: ( oclMessageArguments )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if (((LA70_0>=IntegerLiteralExp && LA70_0<=InvalidLiteralExp)||LA70_0==NullLiteralExp||(LA70_0>=RealLiteralExp && LA70_0<=SimpleName)||LA70_0==StringLiteralExp||LA70_0==UnlimitedNaturalLiteralExp||LA70_0==62||LA70_0==66||LA70_0==79||(LA70_0>=81 && LA70_0<=95)||(LA70_0>=107 && LA70_0<=108)||(LA70_0>=113 && LA70_0<=114)||(LA70_0>=116 && LA70_0<=117)||LA70_0==123))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:352:23: oclMessageArguments
					{
					DebugLocation(352, 23);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp2514);
					oclMessageArguments193=oclMessageArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArguments193.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(352, 44);
				char_literal194=(CommonToken)Match(input,63,Follow._63_in_oclMessageExp2517); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal194_tree = (object)adaptor.Create(char_literal194);
				adaptor.AddChild(root_0, char_literal194_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclMessageExp", 54);
			LeaveRule("oclMessageExp", 54);
			LeaveRule_oclMessageExp();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageExp"); }
		return retval;

	}
	// $ANTLR end "oclMessageExp"

	private sealed partial class oclMessageArguments_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclMessageArguments_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclMessageArguments();
	partial void LeaveRule_oclMessageArguments();

	// $ANTLR start "oclMessageArguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:354:1: oclMessageArguments : oclMessageArg ( ',' oclMessageArguments )? ;
	[GrammarRule("oclMessageArguments")]
	private OCLSyntaxParser.oclMessageArguments_return oclMessageArguments()
	{
		EnterRule_oclMessageArguments();
		EnterRule("oclMessageArguments", 55);
		TraceIn("oclMessageArguments", 55);
		OCLSyntaxParser.oclMessageArguments_return retval = new OCLSyntaxParser.oclMessageArguments_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal196 = default(CommonToken);
		OCLSyntaxParser.oclMessageArg_return oclMessageArg195 = default(OCLSyntaxParser.oclMessageArg_return);
		OCLSyntaxParser.oclMessageArguments_return oclMessageArguments197 = default(OCLSyntaxParser.oclMessageArguments_return);

		object char_literal196_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclMessageArguments");
		DebugLocation(354, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:355:2: ( oclMessageArg ( ',' oclMessageArguments )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:355:4: oclMessageArg ( ',' oclMessageArguments )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(355, 4);
			PushFollow(Follow._oclMessageArg_in_oclMessageArguments2527);
			oclMessageArg195=oclMessageArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArg195.Tree);
			DebugLocation(355, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:355:18: ( ',' oclMessageArguments )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==65))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:355:20: ',' oclMessageArguments
				{
				DebugLocation(355, 20);
				char_literal196=(CommonToken)Match(input,65,Follow._65_in_oclMessageArguments2531); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal196_tree = (object)adaptor.Create(char_literal196);
				adaptor.AddChild(root_0, char_literal196_tree);
				}
				DebugLocation(355, 24);
				PushFollow(Follow._oclMessageArguments_in_oclMessageArguments2533);
				oclMessageArguments197=oclMessageArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArguments197.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclMessageArguments", 55);
			LeaveRule("oclMessageArguments", 55);
			LeaveRule_oclMessageArguments();
		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArguments"); }
		return retval;

	}
	// $ANTLR end "oclMessageArguments"

	private sealed partial class oclMessageArg_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclMessageArg_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclMessageArg();
	partial void LeaveRule_oclMessageArg();

	// $ANTLR start "oclMessageArg"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:358:1: oclMessageArg : ( '?' ( ':' type )? | oclExpression );
	[GrammarRule("oclMessageArg")]
	private OCLSyntaxParser.oclMessageArg_return oclMessageArg()
	{
		EnterRule_oclMessageArg();
		EnterRule("oclMessageArg", 56);
		TraceIn("oclMessageArg", 56);
		OCLSyntaxParser.oclMessageArg_return retval = new OCLSyntaxParser.oclMessageArg_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal198 = default(CommonToken);
		CommonToken char_literal199 = default(CommonToken);
		OCLSyntaxParser.type_return type200 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.oclExpression_return oclExpression201 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal198_tree = default(object);
		object char_literal199_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclMessageArg");
		DebugLocation(358, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:359:2: ( '?' ( ':' type )? | oclExpression )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==79))
			{
				alt74 = 1;
			}
			else if (((LA74_0>=IntegerLiteralExp && LA74_0<=InvalidLiteralExp)||LA74_0==NullLiteralExp||(LA74_0>=RealLiteralExp && LA74_0<=SimpleName)||LA74_0==StringLiteralExp||LA74_0==UnlimitedNaturalLiteralExp||LA74_0==62||LA74_0==66||(LA74_0>=81 && LA74_0<=95)||(LA74_0>=107 && LA74_0<=108)||(LA74_0>=113 && LA74_0<=114)||(LA74_0>=116 && LA74_0<=117)||LA74_0==123))
			{
				alt74 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:359:4: '?' ( ':' type )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(359, 4);
				char_literal198=(CommonToken)Match(input,79,Follow._79_in_oclMessageArg2548); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal198_tree = (object)adaptor.Create(char_literal198);
				adaptor.AddChild(root_0, char_literal198_tree);
				}
				DebugLocation(359, 8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:359:8: ( ':' type )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==70))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:359:9: ':' type
					{
					DebugLocation(359, 9);
					char_literal199=(CommonToken)Match(input,70,Follow._70_in_oclMessageArg2551); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal199_tree = (object)adaptor.Create(char_literal199);
					adaptor.AddChild(root_0, char_literal199_tree);
					}
					DebugLocation(359, 13);
					PushFollow(Follow._type_in_oclMessageArg2553);
					type200=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type200.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:360:4: oclExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(360, 4);
				PushFollow(Follow._oclExpression_in_oclMessageArg2560);
				oclExpression201=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclExpression201.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclMessageArg", 56);
			LeaveRule("oclMessageArg", 56);
			LeaveRule_oclMessageArg();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArg"); }
		return retval;

	}
	// $ANTLR end "oclMessageArg"

	private sealed partial class ifExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ifExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_ifExp();
	partial void LeaveRule_ifExp();

	// $ANTLR start "ifExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:363:1: ifExp : i= 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' -> ^( IF[$i] ( oclExpression )+ ) ;
	[GrammarRule("ifExp")]
	private OCLSyntaxParser.ifExp_return ifExp()
	{
		EnterRule_ifExp();
		EnterRule("ifExp", 57);
		TraceIn("ifExp", 57);
		OCLSyntaxParser.ifExp_return retval = new OCLSyntaxParser.ifExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken i = default(CommonToken);
		CommonToken string_literal203 = default(CommonToken);
		CommonToken string_literal205 = default(CommonToken);
		CommonToken string_literal207 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return oclExpression202 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression204 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression206 = default(OCLSyntaxParser.oclExpression_return);

		object i_tree = default(object);
		object string_literal203_tree = default(object);
		object string_literal205_tree = default(object);
		object string_literal207_tree = default(object);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "ifExp");
		DebugLocation(363, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:364:2: (i= 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' -> ^( IF[$i] ( oclExpression )+ ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:364:4: i= 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif'
			{
			DebugLocation(364, 5);
			i=(CommonToken)Match(input,108,Follow._108_in_ifExp2574); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_108.Add(i);

			DebugLocation(364, 11);
			PushFollow(Follow._oclExpression_in_ifExp2576);
			oclExpression202=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(oclExpression202.Tree);
			DebugLocation(364, 25);
			string_literal203=(CommonToken)Match(input,122,Follow._122_in_ifExp2578); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_122.Add(string_literal203);

			DebugLocation(364, 32);
			PushFollow(Follow._oclExpression_in_ifExp2580);
			oclExpression204=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(oclExpression204.Tree);
			DebugLocation(364, 46);
			string_literal205=(CommonToken)Match(input,105,Follow._105_in_ifExp2582); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_105.Add(string_literal205);

			DebugLocation(364, 53);
			PushFollow(Follow._oclExpression_in_ifExp2584);
			oclExpression206=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(oclExpression206.Tree);
			DebugLocation(364, 67);
			string_literal207=(CommonToken)Match(input,106,Follow._106_in_ifExp2586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_106.Add(string_literal207);



			{
			// AST REWRITE
			// elements: oclExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 364:75: -> ^( IF[$i] ( oclExpression )+ )
			{
				DebugLocation(364, 78);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:364:78: ^( IF[$i] ( oclExpression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(364, 80);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IF, i), root_1);

				DebugLocation(364, 87);
				if (!(stream_oclExpression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_oclExpression.HasNext )
				{
					DebugLocation(364, 87);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

				}
				stream_oclExpression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifExp", 57);
			LeaveRule("ifExp", 57);
			LeaveRule_ifExp();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "ifExp"); }
		return retval;

	}
	// $ANTLR end "ifExp"

	partial void EnterRule_synpred1_OCLSyntax_fragment();
	partial void LeaveRule_synpred1_OCLSyntax_fragment();

	// $ANTLR start synpred1_OCLSyntax
	public void synpred1_OCLSyntax_fragment()
	{
		EnterRule_synpred1_OCLSyntax_fragment();
		EnterRule("synpred1_OCLSyntax_fragment", 58);
		TraceIn("synpred1_OCLSyntax_fragment", 58);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:6: ( SimpleName ( ( ':' ) type )? ';' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:7: SimpleName ( ( ':' ) type )? ';'
			{
			DebugLocation(174, 7);
			Match(input,SimpleName,Follow._SimpleName_in_synpred1_OCLSyntax1356); if (state.failed) return;
			DebugLocation(174, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:18: ( ( ':' ) type )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==70))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:19: ( ':' ) type
				{
				DebugLocation(174, 19);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:19: ( ':' )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:174:20: ':'
				{
				DebugLocation(174, 20);
				Match(input,70,Follow._70_in_synpred1_OCLSyntax1360); if (state.failed) return;

				}

				DebugLocation(174, 25);
				PushFollow(Follow._type_in_synpred1_OCLSyntax1363);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(174, 32);
			Match(input,72,Follow._72_in_synpred1_OCLSyntax1367); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_OCLSyntax_fragment", 58);
			LeaveRule("synpred1_OCLSyntax_fragment", 58);
			LeaveRule_synpred1_OCLSyntax_fragment();
		}
	}
	// $ANTLR end synpred1_OCLSyntax
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA2 dfa2;
	private DFA37 dfa37;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa2 = new DFA2( this );
		dfa37 = new DFA37( this );
	}

	private class DFA2 : DFA
	{
		private const string DFA2_eotS =
			"\xA\xFFFF";
		private const string DFA2_eofS =
			"\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3";
		private const string DFA2_minS =
			"\x1\x66\x1\x34\x1\x3E\x1\xFFFF\x1\x34\x1\xFFFF\x1\x3E\x1\xFFFF\x1\x34"+
			"\x1\x3E";
		private const string DFA2_maxS =
			"\x1\x66\x1\x34\x1\x79\x1\xFFFF\x1\x34\x1\xFFFF\x1\x79\x1\xFFFF\x1\x34"+
			"\x1\x79";
		private const string DFA2_acceptS =
			"\x3\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x2\xFFFF";
		private const string DFA2_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA2_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x5\x7\xFFFF\x1\x3\x1\x4\x1E\xFFFF\x2\x3\x8\xFFFF\x1\x3\x8\xFFFF"+
				"\x1\x3",
				"",
				"\x1\x6",
				"",
				"\x1\x5\x7\xFFFF\x1\x7\x1\x8\x1E\xFFFF\x2\x3\x8\xFFFF\x1\x3\x8\xFFFF"+
				"\x1\x3",
				"",
				"\x1\x9",
				"\x1\x5\x7\xFFFF\x1\x7\x1\x8\x1E\xFFFF\x2\x3\x8\xFFFF\x1\x3\x8\xFFFF"+
				"\x1\x3"
			};

		private static readonly short[] DFA2_eot = DFA.UnpackEncodedString(DFA2_eotS);
		private static readonly short[] DFA2_eof = DFA.UnpackEncodedString(DFA2_eofS);
		private static readonly char[] DFA2_min = DFA.UnpackEncodedStringToUnsignedChars(DFA2_minS);
		private static readonly char[] DFA2_max = DFA.UnpackEncodedStringToUnsignedChars(DFA2_maxS);
		private static readonly short[] DFA2_accept = DFA.UnpackEncodedString(DFA2_acceptS);
		private static readonly short[] DFA2_special = DFA.UnpackEncodedString(DFA2_specialS);
		private static readonly short[][] DFA2_transition;

		static DFA2()
		{
			int numStates = DFA2_transitionS.Length;
			DFA2_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA2_transition[i] = DFA.UnpackEncodedString(DFA2_transitionS[i]);
			}
		}

		public DFA2( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}

		public override string Description { get { return "31:1: public contextDeclaration : ( propertyContextDecl | classifierContextDecl | operationContextDecl );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\xB\xFFFF";
		private const string DFA37_eofS =
			"\xB\xFFFF";
		private const string DFA37_minS =
			"\x1\x20\x1\xFFFF\x1\x3E\x8\xFFFF";
		private const string DFA37_maxS =
			"\x1\x7B\x1\xFFFF\x1\x7D\x8\xFFFF";
		private const string DFA37_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1"+
			"\x2";
		private const string DFA37_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x2\x4\x6\xFFFF\x1\x4\xA\xFFFF\x1\x4\x1\x6\x1\xFFFF\x1\x4\x3\xFFFF\x1"+
				"\x4\x3\xFFFF\x1\x7\x12\xFFFF\x1\x1\x1\x5\x1\x1\x5\x5\x1\x1\x1\x5\x2"+
				"\x1\x1\x5\x1\x2\x1\x5\xB\xFFFF\x1\x4\x1\x8\x4\xFFFF\x1\x6\x1\x9\x1\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x4",
				"",
				"\x1\x5\x3E\xFFFF\x1\xA",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "145:1: primaryExperession : ( collectionLiteralExpAndType | tupleLiteralExp | classLiteralExp | primitiveLiteralExp -> ^( PRIMITIVELITERAL primitiveLiteralExp ) | enumAndType -> ^( TYPE enumAndType ) | propertyCall | '(' oclExpression ')' | ifExp | letExp );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _contextDeclaration_in_contextDeclarationList174 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _EOF_in_contextDeclarationList177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyContextDecl_in_contextDeclaration199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextDecl_in_contextDeclaration203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextDecl_in_contextDeclaration207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyContextHead_in_propertyContextDecl217 = new BitSet(new ulong[]{0x2UL,0x810000000000UL});
		public static readonly BitSet _initOrDerValue_in_propertyContextDecl219 = new BitSet(new ulong[]{0x2UL,0x810000000000UL});
		public static readonly BitSet _102_in_propertyContextHead242 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead244 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_propertyContextHead247 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead249 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_propertyContextHead253 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead255 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_propertyContextHead257 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_propertyContextHead259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextHead_in_operationContextDecl283 = new BitSet(new ulong[]{0x2UL,0x180002000000000UL});
		public static readonly BitSet _prePostOrBodyDecl_in_operationContextDecl285 = new BitSet(new ulong[]{0x2UL,0x180002000000000UL});
		public static readonly BitSet _102_in_operationContextHead308 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _operation_in_operationContextHead310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextHead_in_classifierContextDecl328 = new BitSet(new ulong[]{0x2UL,0x201008000000000UL});
		public static readonly BitSet _invOrDef_in_classifierContextDecl331 = new BitSet(new ulong[]{0x2UL,0x201008000000000UL});
		public static readonly BitSet _102_in_classifierContextHead356 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _pathName_in_classifierContextHead358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_classifierContextHead374 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_classifierContextHead376 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_classifierContextHead377 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _pathName_in_classifierContextHead378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_initOrDerValue401 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_initOrDerValue403 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_initOrDerValue420 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_initOrDerValue422 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_invOrDef444 = new BitSet(new ulong[]{0x10000000000000UL,0x40UL});
		public static readonly BitSet _SimpleName_in_invOrDef447 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_invOrDef452 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_invOrDef454 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_invOrDef462 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_invOrDef464 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_invOrDef470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_invOrDef500 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _103_in_invOrDef505 = new BitSet(new ulong[]{0x10000000000000UL,0x40UL});
		public static readonly BitSet _SimpleName_in_invOrDef507 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_invOrDef510 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _defExpression_in_invOrDef512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_prePostOrBodyDecl543 = new BitSet(new ulong[]{0x10000000000000UL,0x40UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl546 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_prePostOrBodyDecl550 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_prePostOrBodyDecl569 = new BitSet(new ulong[]{0x10000000000000UL,0x40UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl572 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_prePostOrBodyDecl576 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_prePostOrBodyDecl595 = new BitSet(new ulong[]{0x10000000000000UL,0x40UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl598 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_prePostOrBodyDecl602 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_operation626 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_operation630 = new BitSet(new ulong[]{0x8010000000000000UL});
		public static readonly BitSet _parameters_in_operation632 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_operation635 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_operation638 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_operation640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationList_in_parameters668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_defExpression681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operation_in_defExpression687 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_defExpression689 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_defExpression691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalImpliesExpression_in_oclExpression715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression731 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_logicalImpliesExpression740 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression744 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression769 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_logicalXorExpression777 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression781 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression805 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _118_in_logicalOrExpression813 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression817 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression841 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_logicalAndExpression850 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression854 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression879 = new BitSet(new ulong[]{0x2UL,0x1800UL});
		public static readonly BitSet _76_in_relationalEqExpression888 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _75_in_relationalEqExpression892 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression897 = new BitSet(new ulong[]{0x2UL,0x1800UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion924 = new BitSet(new ulong[]{0x2UL,0x6600UL});
		public static readonly BitSet _73_in_relationalNotEqExprassion934 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _77_in_relationalNotEqExprassion939 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _74_in_relationalNotEqExprassion944 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _78_in_relationalNotEqExprassion949 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion954 = new BitSet(new ulong[]{0x2UL,0x6600UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression980 = new BitSet(new ulong[]{0x2UL,0x5UL});
		public static readonly BitSet _64_in_additiveExpression989 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _66_in_additiveExpression993 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression999 = new BitSet(new ulong[]{0x2UL,0x5UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1026 = new BitSet(new ulong[]{0x400000000000002UL,0x20UL});
		public static readonly BitSet _UnlimitedNaturalLiteralExp_in_multiplicativeExpression1035 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _69_in_multiplicativeExpression1039 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1044 = new BitSet(new ulong[]{0x400000000000002UL,0x20UL});
		public static readonly BitSet _66_in_unaryExpression1072 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _117_in_unaryExpression1076 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _termExpression_in_unaryExpression1081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _termExpression_in_unaryExpression1095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExperession_in_termExpression1109 = new BitSet(new ulong[]{0x2UL,0xC00000018UL});
		public static readonly BitSet _68_in_termExpression1120 = new BitSet(new ulong[]{0x10000000000000UL,0x2000000000000UL});
		public static readonly BitSet _67_in_termExpression1124 = new BitSet(new ulong[]{0x10000000000000UL,0x2000000000000UL});
		public static readonly BitSet _propertyCall_in_termExpression1129 = new BitSet(new ulong[]{0x2UL,0xC00000018UL});
		public static readonly BitSet _oclMessageExp_in_termExpression1153 = new BitSet(new ulong[]{0x2UL,0xC00000018UL});
		public static readonly BitSet _collectionLiteralExpAndType_in_primaryExperession1195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleLiteralExp_in_primaryExperession1203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classLiteralExp_in_primaryExperession1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveLiteralExp_in_primaryExperession1216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumAndType_in_primaryExperession1234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyCall_in_primaryExperession1250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_primaryExperession1255 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_primaryExperession1257 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_primaryExperession1258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifExp_in_primaryExperession1264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _letExp_in_primaryExperession1269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_propertyCall1279 = new BitSet(new ulong[]{0x4000000000000002UL,0x100010000UL});
		public static readonly BitSet _96_in_propertyCall1282 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _arguments_in_propertyCall1283 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_propertyCall1284 = new BitSet(new ulong[]{0x4000000000000002UL,0x10000UL});
		public static readonly BitSet _isMarkedPre_in_propertyCall1288 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _62_in_propertyCall1292 = new BitSet(new ulong[]{0xC458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _propertyCallParametrs_in_propertyCall1293 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_propertyCall1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_propertyCall1343 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_propertyCall1345 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyCall1372 = new BitSet(new ulong[]{0x0UL,0x140UL});
		public static readonly BitSet _70_in_propertyCall1376 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_propertyCall1383 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_propertyCall1387 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyCall1392 = new BitSet(new ulong[]{0x0UL,0x1040UL});
		public static readonly BitSet _70_in_propertyCall1395 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_propertyCall1401 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_propertyCall1404 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_propertyCall1410 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyCall1426 = new BitSet(new ulong[]{0x0UL,0x1040UL});
		public static readonly BitSet _70_in_propertyCall1429 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_propertyCall1434 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_propertyCall1437 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_propertyCall1443 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_propertyCall1455 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_propertyCall1461 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_propertyCall1463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarePropertyCallParametrs_in_propertyCallParametrs1519 = new BitSet(new ulong[]{0x4458010300000002UL,0x8361800FFFE0004UL});
		public static readonly BitSet _arguments_in_propertyCallParametrs1522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs1556 = new BitSet(new ulong[]{0x0UL,0x4000000000000002UL});
		public static readonly BitSet _65_in_declarePropertyCallParametrs1559 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs1563 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_declarePropertyCallParametrs1567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_typedef1595 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_typedef1597 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_typedef1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_enumAndType1635 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _tupleType_in_enumAndType1643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_enumAndType1648 = new BitSet(new ulong[]{0x0UL,0xA4140000UL});
		public static readonly BitSet _primitiveType_in_enumAndType1653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_enumAndType1658 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _oclType_in_enumAndType1662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_pathName1679 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_pathName1682 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_pathName1684 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExpAndType1713 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_collectionLiteralExpAndType1716 = new BitSet(new ulong[]{0x4458010300000000UL,0x88361800FFFE0004UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExpAndType1718 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_collectionLiteralExpAndType1721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExpAndType1743 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_collectionLiteralExpAndType1746 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_collectionLiteralExpAndType1748 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_collectionLiteralExpAndType1751 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_collectionLiteralExpAndType1761 = new BitSet(new ulong[]{0x4458010300000000UL,0x88361800FFFE0004UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExpAndType1763 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_collectionLiteralExpAndType1766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_enumLiteralExp1814 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_enumLiteralExp1815 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_enumLiteralExp1817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp1829 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_collectionLiteralExp1832 = new BitSet(new ulong[]{0x4458010300000000UL,0x88361800FFFE0004UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1834 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_collectionLiteralExp1837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_collectionLiteralExp1841 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_collectionLiteralExp1843 = new BitSet(new ulong[]{0x4458010300000000UL,0x88361800FFFE0004UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1845 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_collectionLiteralExp1848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_collectionTypeIdentifier1864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts1895 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_collectionLiteralParts1899 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts1902 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1919 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _DoubleDot_in_collectionLiteralPart1923 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveLiteralExp1959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_tupleLiteralExp2015 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_tupleLiteralExp2017 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleLiteralExp2019 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_tupleLiteralExp2022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_classLiteralExp2046 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _pathName_in_classLiteralExp2048 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_classLiteralExp2050 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _variableDeclarationList_in_classLiteralExp2052 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_classLiteralExp2055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeLiteralExp2077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration2092 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_variableDeclaration2094 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_variableDeclaration2096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration2119 = new BitSet(new ulong[]{0x0UL,0x1040UL});
		public static readonly BitSet _70_in_variableDeclaration2122 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_variableDeclaration2124 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_variableDeclaration2129 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_variableDeclaration2131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_type2160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_type2168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_type2174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_type2181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_type2188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType2202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_oclType2252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionType2294 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_collectionType2296 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_collectionType2298 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_collectionType2301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_tupleType2326 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_tupleType2329 = new BitSet(new ulong[]{0x8010000000000000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleType2332 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_tupleType2336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList2352 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_variableDeclarationList2356 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList2359 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _80_in_isMarkedPre2375 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_isMarkedPre2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_arguments2394 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_arguments2399 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_arguments2404 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _114_in_letExp2420 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _variableDeclaration_in_letExp2422 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _letExpSub_in_letExp2425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_letExpSub2447 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _variableDeclaration_in_letExpSub2449 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _letExpSub_in_letExpSub2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_letExpSub2467 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_letExpSub2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_oclMessageExp2494 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp2496 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_oclMessageExp2498 = new BitSet(new ulong[]{0xC458010300000000UL,0x8361800FFFE8004UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp2500 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_oclMessageExp2503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_oclMessageExp2508 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp2510 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_oclMessageExp2512 = new BitSet(new ulong[]{0xC458010300000000UL,0x8361800FFFE8004UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp2514 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_oclMessageExp2517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclMessageArg_in_oclMessageArguments2527 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_oclMessageArguments2531 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE8004UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageArguments2533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_oclMessageArg2548 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_oclMessageArg2551 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_oclMessageArg2553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_oclMessageArg2560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_ifExp2574 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_ifExp2576 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_ifExp2578 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_ifExp2580 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_ifExp2582 = new BitSet(new ulong[]{0x4458010300000000UL,0x8361800FFFE0004UL});
		public static readonly BitSet _oclExpression_in_ifExp2584 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_ifExp2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_synpred1_OCLSyntax1356 = new BitSet(new ulong[]{0x0UL,0x140UL});
		public static readonly BitSet _70_in_synpred1_OCLSyntax1360 = new BitSet(new ulong[]{0x10000000000000UL,0xFFFE0000UL});
		public static readonly BitSet _type_in_synpred1_OCLSyntax1363 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_synpred1_OCLSyntax1367 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace Exolutio.Model.OCL.Compiler
