//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3 2012-02-26 22:10:06

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLSyntaxParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACC", "ARGS", "BODY", "CALL", "CALLARGS", "CLASSIFIERCONDITION", "CLASSIFIERHEAD", "COLLECTIONLITERAL", "COLLECTIONTYPE", "COLLPART", "COLLPARTRANGE", "COLLTYPE", "CONDITION", "Char", "DECL", "DEF", "DERIVATE", "DoubleDot", "EscapeSequence", "ExponentPart", "Hex", "IF", "INDEX", "INFIX", "INIT", "INV", "ITERATE", "IntegerLiteralExp", "InvalidLiteralExp", "LET", "LINE_COMMENT", "MESSAGE", "NESTED_ML_COMMENT", "NameChar", "NameStartChar", "NullLiteralExp", "Num", "OPERATION", "OPERATIONCONDITION", "OPERATIONHEAD", "PATH", "POST", "PRE", "PRIMITIVELITERAL", "PROPERTYCONDITION", "PROPERTYHEAD", "RealLiteralExp", "SimpleName", "StringChar", "StringLiteralExp", "TUPLELITERAL", "TYPE", "UNARY", "UnlimitedNaturalLiteralExp", "VARDECL", "WS", "WhiteSpaceChar", "'('", "')'", "'+'", "','", "'-'", "'->'", "'.'", "'/'", "':'", "'::'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'?'", "'@'", "'Bag'", "'Boolean'", "'Collection'", "'Integer'", "'OclAny'", "'OclInvalid'", "'OclMessage'", "'OclVoid'", "'OrderedSet'", "'Real'", "'Sequence'", "'Set'", "'String'", "'Tuple'", "'UnlimitedNatural'", "'['", "']'", "'^'", "'^^'", "'and'", "'body'", "'context'", "'def'", "'derivate'", "'else'", "'endif'", "'false'", "'if'", "'implies'", "'in'", "'init'", "'inv'", "'iterate'", "'let'", "'not'", "'or'", "'post'", "'pre'", "'static'", "'then'", "'true'", "'xor'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int ACC=4;
	public const int ARGS=5;
	public const int BODY=6;
	public const int CALL=7;
	public const int CALLARGS=8;
	public const int CLASSIFIERCONDITION=9;
	public const int CLASSIFIERHEAD=10;
	public const int COLLECTIONLITERAL=11;
	public const int COLLECTIONTYPE=12;
	public const int COLLPART=13;
	public const int COLLPARTRANGE=14;
	public const int COLLTYPE=15;
	public const int CONDITION=16;
	public const int Char=17;
	public const int DECL=18;
	public const int DEF=19;
	public const int DERIVATE=20;
	public const int DoubleDot=21;
	public const int EscapeSequence=22;
	public const int ExponentPart=23;
	public const int Hex=24;
	public const int IF=25;
	public const int INDEX=26;
	public const int INFIX=27;
	public const int INIT=28;
	public const int INV=29;
	public const int ITERATE=30;
	public const int IntegerLiteralExp=31;
	public const int InvalidLiteralExp=32;
	public const int LET=33;
	public const int LINE_COMMENT=34;
	public const int MESSAGE=35;
	public const int NESTED_ML_COMMENT=36;
	public const int NameChar=37;
	public const int NameStartChar=38;
	public const int NullLiteralExp=39;
	public const int Num=40;
	public const int OPERATION=41;
	public const int OPERATIONCONDITION=42;
	public const int OPERATIONHEAD=43;
	public const int PATH=44;
	public const int POST=45;
	public const int PRE=46;
	public const int PRIMITIVELITERAL=47;
	public const int PROPERTYCONDITION=48;
	public const int PROPERTYHEAD=49;
	public const int RealLiteralExp=50;
	public const int SimpleName=51;
	public const int StringChar=52;
	public const int StringLiteralExp=53;
	public const int TUPLELITERAL=54;
	public const int TYPE=55;
	public const int UNARY=56;
	public const int UnlimitedNaturalLiteralExp=57;
	public const int VARDECL=58;
	public const int WS=59;
	public const int WhiteSpaceChar=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;

	// delegates
	// delegators

	public OCLSyntaxParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public OCLSyntaxParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return OCLSyntaxParser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class contextDeclarationList_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public contextDeclarationList_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_contextDeclarationList();
	partial void LeaveRule_contextDeclarationList();

	// $ANTLR start "contextDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:26:1: public contextDeclarationList : ( contextDeclaration )* -> ^( CONDITION ( contextDeclaration )* ) ;
	[GrammarRule("contextDeclarationList")]
	public OCLSyntaxParser.contextDeclarationList_return contextDeclarationList()
	{
		EnterRule_contextDeclarationList();
		EnterRule("contextDeclarationList", 1);
		TraceIn("contextDeclarationList", 1);
		OCLSyntaxParser.contextDeclarationList_return retval = new OCLSyntaxParser.contextDeclarationList_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.contextDeclaration_return contextDeclaration1 = default(OCLSyntaxParser.contextDeclaration_return);

		RewriteRuleSubtreeStream stream_contextDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule contextDeclaration");
		try { DebugEnterRule(GrammarFileName, "contextDeclarationList");
		DebugLocation(26, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:2: ( ( contextDeclaration )* -> ^( CONDITION ( contextDeclaration )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:3: ( contextDeclaration )*
			{
			DebugLocation(27, 3);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:3: ( contextDeclaration )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==101))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:3: contextDeclaration
					{
					DebugLocation(27, 3);
					PushFollow(Follow._contextDeclaration_in_contextDeclarationList170);
					contextDeclaration1=contextDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_contextDeclaration.Add(contextDeclaration1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }



			{
			// AST REWRITE
			// elements: contextDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 27:23: -> ^( CONDITION ( contextDeclaration )* )
			{
				DebugLocation(27, 26);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:26: ^( CONDITION ( contextDeclaration )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(27, 28);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CONDITION, "CONDITION"), root_1);

				DebugLocation(27, 38);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:27:38: ( contextDeclaration )*
				while ( stream_contextDeclaration.HasNext )
				{
					DebugLocation(27, 38);
					adaptor.AddChild(root_1, stream_contextDeclaration.NextTree());

				}
				stream_contextDeclaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("contextDeclarationList", 1);
			LeaveRule("contextDeclarationList", 1);
			LeaveRule_contextDeclarationList();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclarationList"); }
		return retval;

	}
	// $ANTLR end "contextDeclarationList"

	public sealed partial class contextDeclaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public contextDeclaration_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_contextDeclaration();
	partial void LeaveRule_contextDeclaration();

	// $ANTLR start "contextDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:31:1: public contextDeclaration : ( propertyContextDecl | classifierContextDecl | operationContextDecl );
	[GrammarRule("contextDeclaration")]
	public OCLSyntaxParser.contextDeclaration_return contextDeclaration()
	{
		EnterRule_contextDeclaration();
		EnterRule("contextDeclaration", 2);
		TraceIn("contextDeclaration", 2);
		OCLSyntaxParser.contextDeclaration_return retval = new OCLSyntaxParser.contextDeclaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.propertyContextDecl_return propertyContextDecl2 = default(OCLSyntaxParser.propertyContextDecl_return);
		OCLSyntaxParser.classifierContextDecl_return classifierContextDecl3 = default(OCLSyntaxParser.classifierContextDecl_return);
		OCLSyntaxParser.operationContextDecl_return operationContextDecl4 = default(OCLSyntaxParser.operationContextDecl_return);


		try { DebugEnterRule(GrammarFileName, "contextDeclaration");
		DebugLocation(31, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:32:2: ( propertyContextDecl | classifierContextDecl | operationContextDecl )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			try
			{
				alt2 = dfa2.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:32:3: propertyContextDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(32, 3);
				PushFollow(Follow._propertyContextDecl_in_contextDeclaration193);
				propertyContextDecl2=propertyContextDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyContextDecl2.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:33:3: classifierContextDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(33, 3);
				PushFollow(Follow._classifierContextDecl_in_contextDeclaration197);
				classifierContextDecl3=classifierContextDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classifierContextDecl3.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:34:3: operationContextDecl
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(34, 3);
				PushFollow(Follow._operationContextDecl_in_contextDeclaration201);
				operationContextDecl4=operationContextDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, operationContextDecl4.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("contextDeclaration", 2);
			LeaveRule("contextDeclaration", 2);
			LeaveRule_contextDeclaration();
		}
		DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclaration"); }
		return retval;

	}
	// $ANTLR end "contextDeclaration"

	private sealed partial class propertyContextDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyContextDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyContextDecl();
	partial void LeaveRule_propertyContextDecl();

	// $ANTLR start "propertyContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:37:1: propertyContextDecl : propertyContextHead ( initOrDerValue )* -> ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) ;
	[GrammarRule("propertyContextDecl")]
	private OCLSyntaxParser.propertyContextDecl_return propertyContextDecl()
	{
		EnterRule_propertyContextDecl();
		EnterRule("propertyContextDecl", 3);
		TraceIn("propertyContextDecl", 3);
		OCLSyntaxParser.propertyContextDecl_return retval = new OCLSyntaxParser.propertyContextDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.propertyContextHead_return propertyContextHead5 = default(OCLSyntaxParser.propertyContextHead_return);
		OCLSyntaxParser.initOrDerValue_return initOrDerValue6 = default(OCLSyntaxParser.initOrDerValue_return);

		RewriteRuleSubtreeStream stream_propertyContextHead=new RewriteRuleSubtreeStream(adaptor,"rule propertyContextHead");
		RewriteRuleSubtreeStream stream_initOrDerValue=new RewriteRuleSubtreeStream(adaptor,"rule initOrDerValue");
		try { DebugEnterRule(GrammarFileName, "propertyContextDecl");
		DebugLocation(37, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:2: ( propertyContextHead ( initOrDerValue )* -> ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:3: propertyContextHead ( initOrDerValue )*
			{
			DebugLocation(38, 3);
			PushFollow(Follow._propertyContextHead_in_propertyContextDecl211);
			propertyContextHead5=propertyContextHead();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_propertyContextHead.Add(propertyContextHead5.Tree);
			DebugLocation(38, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:23: ( initOrDerValue )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==103||LA3_0==110))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:23: initOrDerValue
					{
					DebugLocation(38, 23);
					PushFollow(Follow._initOrDerValue_in_propertyContextDecl213);
					initOrDerValue6=initOrDerValue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_initOrDerValue.Add(initOrDerValue6.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: propertyContextHead, initOrDerValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 38:39: -> ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* )
			{
				DebugLocation(38, 41);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:41: ^( PROPERTYCONDITION propertyContextHead ( initOrDerValue )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(38, 43);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTYCONDITION, "PROPERTYCONDITION"), root_1);

				DebugLocation(38, 61);
				adaptor.AddChild(root_1, stream_propertyContextHead.NextTree());
				DebugLocation(38, 81);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:38:81: ( initOrDerValue )*
				while ( stream_initOrDerValue.HasNext )
				{
					DebugLocation(38, 81);
					adaptor.AddChild(root_1, stream_initOrDerValue.NextTree());

				}
				stream_initOrDerValue.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyContextDecl", 3);
			LeaveRule("propertyContextDecl", 3);
			LeaveRule_propertyContextDecl();
		}
		DebugLocation(39, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextDecl"); }
		return retval;

	}
	// $ANTLR end "propertyContextDecl"

	private sealed partial class propertyContextHead_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyContextHead_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyContextHead();
	partial void LeaveRule_propertyContextHead();

	// $ANTLR start "propertyContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:41:1: propertyContextHead : c= 'context' SimpleName ( '::' SimpleName )+ ':' type -> ^( PROPERTYHEAD[$c] ( SimpleName )+ type ) ;
	[GrammarRule("propertyContextHead")]
	private OCLSyntaxParser.propertyContextHead_return propertyContextHead()
	{
		EnterRule_propertyContextHead();
		EnterRule("propertyContextHead", 4);
		TraceIn("propertyContextHead", 4);
		OCLSyntaxParser.propertyContextHead_return retval = new OCLSyntaxParser.propertyContextHead_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken c = default(CommonToken);
		CommonToken SimpleName7 = default(CommonToken);
		CommonToken string_literal8 = default(CommonToken);
		CommonToken SimpleName9 = default(CommonToken);
		CommonToken char_literal10 = default(CommonToken);
		OCLSyntaxParser.type_return type11 = default(OCLSyntaxParser.type_return);

		object c_tree = default(object);
		object SimpleName7_tree = default(object);
		object string_literal8_tree = default(object);
		object SimpleName9_tree = default(object);
		object char_literal10_tree = default(object);
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "propertyContextHead");
		DebugLocation(41, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:2: (c= 'context' SimpleName ( '::' SimpleName )+ ':' type -> ^( PROPERTYHEAD[$c] ( SimpleName )+ type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:3: c= 'context' SimpleName ( '::' SimpleName )+ ':' type
			{
			DebugLocation(42, 4);
			c=(CommonToken)Match(input,101,Follow._101_in_propertyContextHead236); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(c);

			DebugLocation(42, 15);
			SimpleName7=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead238); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SimpleName.Add(SimpleName7);

			DebugLocation(42, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:26: ( '::' SimpleName )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==70))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:42:27: '::' SimpleName
					{
					DebugLocation(42, 27);
					string_literal8=(CommonToken)Match(input,70,Follow._70_in_propertyContextHead241); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal8);

					DebugLocation(42, 32);
					SimpleName9=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead243); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName9);


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(42, 45);
			char_literal10=(CommonToken)Match(input,69,Follow._69_in_propertyContextHead247); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_69.Add(char_literal10);

			DebugLocation(42, 49);
			PushFollow(Follow._type_in_propertyContextHead249);
			type11=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type11.Tree);


			{
			// AST REWRITE
			// elements: SimpleName, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 43:3: -> ^( PROPERTYHEAD[$c] ( SimpleName )+ type )
			{
				DebugLocation(43, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:43:6: ^( PROPERTYHEAD[$c] ( SimpleName )+ type )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(43, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROPERTYHEAD, c), root_1);

				DebugLocation(43, 25);
				if (!(stream_SimpleName.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_SimpleName.HasNext )
				{
					DebugLocation(43, 25);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());

				}
				stream_SimpleName.Reset();
				DebugLocation(43, 37);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyContextHead", 4);
			LeaveRule("propertyContextHead", 4);
			LeaveRule_propertyContextHead();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextHead"); }
		return retval;

	}
	// $ANTLR end "propertyContextHead"

	private sealed partial class operationContextDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operationContextDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_operationContextDecl();
	partial void LeaveRule_operationContextDecl();

	// $ANTLR start "operationContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:46:1: operationContextDecl : operationContextHead ( prePostOrBodyDecl )* -> ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) ;
	[GrammarRule("operationContextDecl")]
	private OCLSyntaxParser.operationContextDecl_return operationContextDecl()
	{
		EnterRule_operationContextDecl();
		EnterRule("operationContextDecl", 5);
		TraceIn("operationContextDecl", 5);
		OCLSyntaxParser.operationContextDecl_return retval = new OCLSyntaxParser.operationContextDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.operationContextHead_return operationContextHead12 = default(OCLSyntaxParser.operationContextHead_return);
		OCLSyntaxParser.prePostOrBodyDecl_return prePostOrBodyDecl13 = default(OCLSyntaxParser.prePostOrBodyDecl_return);

		RewriteRuleSubtreeStream stream_operationContextHead=new RewriteRuleSubtreeStream(adaptor,"rule operationContextHead");
		RewriteRuleSubtreeStream stream_prePostOrBodyDecl=new RewriteRuleSubtreeStream(adaptor,"rule prePostOrBodyDecl");
		try { DebugEnterRule(GrammarFileName, "operationContextDecl");
		DebugLocation(46, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:2: ( operationContextHead ( prePostOrBodyDecl )* -> ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:3: operationContextHead ( prePostOrBodyDecl )*
			{
			DebugLocation(47, 3);
			PushFollow(Follow._operationContextHead_in_operationContextDecl273);
			operationContextHead12=operationContextHead();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_operationContextHead.Add(operationContextHead12.Tree);
			DebugLocation(47, 24);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:24: ( prePostOrBodyDecl )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==100||(LA5_0>=116 && LA5_0<=117)))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:24: prePostOrBodyDecl
					{
					DebugLocation(47, 24);
					PushFollow(Follow._prePostOrBodyDecl_in_operationContextDecl275);
					prePostOrBodyDecl13=prePostOrBodyDecl();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_prePostOrBodyDecl.Add(prePostOrBodyDecl13.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }



			{
			// AST REWRITE
			// elements: operationContextHead, prePostOrBodyDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 47:43: -> ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* )
			{
				DebugLocation(47, 45);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:45: ^( OPERATIONCONDITION operationContextHead ( prePostOrBodyDecl )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(47, 47);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATIONCONDITION, "OPERATIONCONDITION"), root_1);

				DebugLocation(47, 66);
				adaptor.AddChild(root_1, stream_operationContextHead.NextTree());
				DebugLocation(47, 87);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:47:87: ( prePostOrBodyDecl )*
				while ( stream_prePostOrBodyDecl.HasNext )
				{
					DebugLocation(47, 87);
					adaptor.AddChild(root_1, stream_prePostOrBodyDecl.NextTree());

				}
				stream_prePostOrBodyDecl.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operationContextDecl", 5);
			LeaveRule("operationContextDecl", 5);
			LeaveRule_operationContextDecl();
		}
		DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextDecl"); }
		return retval;

	}
	// $ANTLR end "operationContextDecl"

	private sealed partial class operationContextHead_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operationContextHead_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_operationContextHead();
	partial void LeaveRule_operationContextHead();

	// $ANTLR start "operationContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:50:1: operationContextHead : c= 'context' operation -> ^( OPERATIONHEAD[$c] operation ) ;
	[GrammarRule("operationContextHead")]
	private OCLSyntaxParser.operationContextHead_return operationContextHead()
	{
		EnterRule_operationContextHead();
		EnterRule("operationContextHead", 6);
		TraceIn("operationContextHead", 6);
		OCLSyntaxParser.operationContextHead_return retval = new OCLSyntaxParser.operationContextHead_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken c = default(CommonToken);
		OCLSyntaxParser.operation_return operation14 = default(OCLSyntaxParser.operation_return);

		object c_tree = default(object);
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_operation=new RewriteRuleSubtreeStream(adaptor,"rule operation");
		try { DebugEnterRule(GrammarFileName, "operationContextHead");
		DebugLocation(50, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:2: (c= 'context' operation -> ^( OPERATIONHEAD[$c] operation ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:3: c= 'context' operation
			{
			DebugLocation(51, 4);
			c=(CommonToken)Match(input,101,Follow._101_in_operationContextHead298); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(c);

			DebugLocation(51, 15);
			PushFollow(Follow._operation_in_operationContextHead300);
			operation14=operation();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_operation.Add(operation14.Tree);


			{
			// AST REWRITE
			// elements: operation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 51:25: -> ^( OPERATIONHEAD[$c] operation )
			{
				DebugLocation(51, 27);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:51:27: ^( OPERATIONHEAD[$c] operation )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(51, 29);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATIONHEAD, c), root_1);

				DebugLocation(51, 47);
				adaptor.AddChild(root_1, stream_operation.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operationContextHead", 6);
			LeaveRule("operationContextHead", 6);
			LeaveRule_operationContextHead();
		}
		DebugLocation(52, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextHead"); }
		return retval;

	}
	// $ANTLR end "operationContextHead"

	private sealed partial class classifierContextDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public classifierContextDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_classifierContextDecl();
	partial void LeaveRule_classifierContextDecl();

	// $ANTLR start "classifierContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:54:1: classifierContextDecl : classifierContextHead ( invOrDef )* -> ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) ;
	[GrammarRule("classifierContextDecl")]
	private OCLSyntaxParser.classifierContextDecl_return classifierContextDecl()
	{
		EnterRule_classifierContextDecl();
		EnterRule("classifierContextDecl", 7);
		TraceIn("classifierContextDecl", 7);
		OCLSyntaxParser.classifierContextDecl_return retval = new OCLSyntaxParser.classifierContextDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.classifierContextHead_return classifierContextHead15 = default(OCLSyntaxParser.classifierContextHead_return);
		OCLSyntaxParser.invOrDef_return invOrDef16 = default(OCLSyntaxParser.invOrDef_return);

		RewriteRuleSubtreeStream stream_classifierContextHead=new RewriteRuleSubtreeStream(adaptor,"rule classifierContextHead");
		RewriteRuleSubtreeStream stream_invOrDef=new RewriteRuleSubtreeStream(adaptor,"rule invOrDef");
		try { DebugEnterRule(GrammarFileName, "classifierContextDecl");
		DebugLocation(54, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:2: ( classifierContextHead ( invOrDef )* -> ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:3: classifierContextHead ( invOrDef )*
			{
			DebugLocation(55, 3);
			PushFollow(Follow._classifierContextHead_in_classifierContextDecl318);
			classifierContextHead15=classifierContextHead();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_classifierContextHead.Add(classifierContextHead15.Tree);
			DebugLocation(55, 25);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:25: ( invOrDef )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==102||LA6_0==111||LA6_0==118))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:26: invOrDef
					{
					DebugLocation(55, 26);
					PushFollow(Follow._invOrDef_in_classifierContextDecl321);
					invOrDef16=invOrDef();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_invOrDef.Add(invOrDef16.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }



			{
			// AST REWRITE
			// elements: classifierContextHead, invOrDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 55:37: -> ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* )
			{
				DebugLocation(55, 40);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:40: ^( CLASSIFIERCONDITION classifierContextHead ( invOrDef )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(55, 42);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSIFIERCONDITION, "CLASSIFIERCONDITION"), root_1);

				DebugLocation(55, 62);
				adaptor.AddChild(root_1, stream_classifierContextHead.NextTree());
				DebugLocation(55, 84);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:55:84: ( invOrDef )*
				while ( stream_invOrDef.HasNext )
				{
					DebugLocation(55, 84);
					adaptor.AddChild(root_1, stream_invOrDef.NextTree());

				}
				stream_invOrDef.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classifierContextDecl", 7);
			LeaveRule("classifierContextDecl", 7);
			LeaveRule_classifierContextDecl();
		}
		DebugLocation(56, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextDecl"); }
		return retval;

	}
	// $ANTLR end "classifierContextDecl"

	private sealed partial class classifierContextHead_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public classifierContextHead_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_classifierContextHead();
	partial void LeaveRule_classifierContextHead();

	// $ANTLR start "classifierContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:58:1: classifierContextHead : (c= 'context' pathName -> ^( CLASSIFIERHEAD[$c] pathName ) |c= 'context' SimpleName ':' pathName -> ^( CLASSIFIERHEAD[$c] pathName SimpleName ) );
	[GrammarRule("classifierContextHead")]
	private OCLSyntaxParser.classifierContextHead_return classifierContextHead()
	{
		EnterRule_classifierContextHead();
		EnterRule("classifierContextHead", 8);
		TraceIn("classifierContextHead", 8);
		OCLSyntaxParser.classifierContextHead_return retval = new OCLSyntaxParser.classifierContextHead_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken c = default(CommonToken);
		CommonToken SimpleName18 = default(CommonToken);
		CommonToken char_literal19 = default(CommonToken);
		OCLSyntaxParser.pathName_return pathName17 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.pathName_return pathName20 = default(OCLSyntaxParser.pathName_return);

		object c_tree = default(object);
		object SimpleName18_tree = default(object);
		object char_literal19_tree = default(object);
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_pathName=new RewriteRuleSubtreeStream(adaptor,"rule pathName");
		try { DebugEnterRule(GrammarFileName, "classifierContextHead");
		DebugLocation(58, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:2: (c= 'context' pathName -> ^( CLASSIFIERHEAD[$c] pathName ) |c= 'context' SimpleName ':' pathName -> ^( CLASSIFIERHEAD[$c] pathName SimpleName ) )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==101))
			{
				int LA7_1 = input.LA(2);

				if ((LA7_1==SimpleName))
				{
					int LA7_2 = input.LA(3);

					if ((LA7_2==69))
					{
						alt7 = 2;
					}
					else if ((LA7_2==EOF||LA7_2==70||(LA7_2>=101 && LA7_2<=102)||LA7_2==111||LA7_2==118))
					{
						alt7 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 7, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:3: c= 'context' pathName
				{
				DebugLocation(59, 4);
				c=(CommonToken)Match(input,101,Follow._101_in_classifierContextHead346); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(c);

				DebugLocation(59, 15);
				PushFollow(Follow._pathName_in_classifierContextHead348);
				pathName17=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pathName.Add(pathName17.Tree);


				{
				// AST REWRITE
				// elements: pathName
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 59:25: -> ^( CLASSIFIERHEAD[$c] pathName )
				{
					DebugLocation(59, 27);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:59:27: ^( CLASSIFIERHEAD[$c] pathName )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(59, 29);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSIFIERHEAD, c), root_1);

					DebugLocation(59, 48);
					adaptor.AddChild(root_1, stream_pathName.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:60:3: c= 'context' SimpleName ':' pathName
				{
				DebugLocation(60, 4);
				c=(CommonToken)Match(input,101,Follow._101_in_classifierContextHead364); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(c);

				DebugLocation(60, 15);
				SimpleName18=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_classifierContextHead366); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SimpleName.Add(SimpleName18);

				DebugLocation(60, 25);
				char_literal19=(CommonToken)Match(input,69,Follow._69_in_classifierContextHead367); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal19);

				DebugLocation(60, 28);
				PushFollow(Follow._pathName_in_classifierContextHead368);
				pathName20=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pathName.Add(pathName20.Tree);


				{
				// AST REWRITE
				// elements: pathName, SimpleName
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 60:37: -> ^( CLASSIFIERHEAD[$c] pathName SimpleName )
				{
					DebugLocation(60, 39);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:60:39: ^( CLASSIFIERHEAD[$c] pathName SimpleName )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(60, 41);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CLASSIFIERHEAD, c), root_1);

					DebugLocation(60, 60);
					adaptor.AddChild(root_1, stream_pathName.NextTree());
					DebugLocation(60, 69);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classifierContextHead", 8);
			LeaveRule("classifierContextHead", 8);
			LeaveRule_classifierContextHead();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextHead"); }
		return retval;

	}
	// $ANTLR end "classifierContextHead"

	private sealed partial class initOrDerValue_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public initOrDerValue_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_initOrDerValue();
	partial void LeaveRule_initOrDerValue();

	// $ANTLR start "initOrDerValue"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:63:1: initOrDerValue : (i= 'init' ':' oclExpression -> ^( INIT[$i] oclExpression ) |d= 'derivate' ':' oclExpression -> ^( DERIVATE[$d] oclExpression ) );
	[GrammarRule("initOrDerValue")]
	private OCLSyntaxParser.initOrDerValue_return initOrDerValue()
	{
		EnterRule_initOrDerValue();
		EnterRule("initOrDerValue", 9);
		TraceIn("initOrDerValue", 9);
		OCLSyntaxParser.initOrDerValue_return retval = new OCLSyntaxParser.initOrDerValue_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken i = default(CommonToken);
		CommonToken d = default(CommonToken);
		CommonToken char_literal21 = default(CommonToken);
		CommonToken char_literal23 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return oclExpression22 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression24 = default(OCLSyntaxParser.oclExpression_return);

		object i_tree = default(object);
		object d_tree = default(object);
		object char_literal21_tree = default(object);
		object char_literal23_tree = default(object);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "initOrDerValue");
		DebugLocation(63, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:2: (i= 'init' ':' oclExpression -> ^( INIT[$i] oclExpression ) |d= 'derivate' ':' oclExpression -> ^( DERIVATE[$d] oclExpression ) )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==110))
			{
				alt8 = 1;
			}
			else if ((LA8_0==103))
			{
				alt8 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:3: i= 'init' ':' oclExpression
				{
				DebugLocation(64, 4);
				i=(CommonToken)Match(input,110,Follow._110_in_initOrDerValue391); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(i);

				DebugLocation(64, 12);
				char_literal21=(CommonToken)Match(input,69,Follow._69_in_initOrDerValue393); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal21);

				DebugLocation(64, 16);
				PushFollow(Follow._oclExpression_in_initOrDerValue395);
				oclExpression22=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression22.Tree);


				{
				// AST REWRITE
				// elements: oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 64:30: -> ^( INIT[$i] oclExpression )
				{
					DebugLocation(64, 33);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:64:33: ^( INIT[$i] oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(64, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INIT, i), root_1);

					DebugLocation(64, 44);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:65:3: d= 'derivate' ':' oclExpression
				{
				DebugLocation(65, 4);
				d=(CommonToken)Match(input,103,Follow._103_in_initOrDerValue410); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(d);

				DebugLocation(65, 16);
				char_literal23=(CommonToken)Match(input,69,Follow._69_in_initOrDerValue412); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal23);

				DebugLocation(65, 20);
				PushFollow(Follow._oclExpression_in_initOrDerValue414);
				oclExpression24=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression24.Tree);


				{
				// AST REWRITE
				// elements: oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 65:34: -> ^( DERIVATE[$d] oclExpression )
				{
					DebugLocation(65, 36);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:65:36: ^( DERIVATE[$d] oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(65, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DERIVATE, d), root_1);

					DebugLocation(65, 51);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initOrDerValue", 9);
			LeaveRule("initOrDerValue", 9);
			LeaveRule_initOrDerValue();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "initOrDerValue"); }
		return retval;

	}
	// $ANTLR end "initOrDerValue"

	private sealed partial class invOrDef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public invOrDef_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_invOrDef();
	partial void LeaveRule_invOrDef();

	// $ANTLR start "invOrDef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:68:1: invOrDef : (i= 'inv' ( SimpleName )? ':' oclExpression -> ^( INV[$i] ( SimpleName )? oclExpression ) | ( 'static' )? d= 'def' ( SimpleName )? ':' defExpression -> ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression ) );
	[GrammarRule("invOrDef")]
	private OCLSyntaxParser.invOrDef_return invOrDef()
	{
		EnterRule_invOrDef();
		EnterRule("invOrDef", 10);
		TraceIn("invOrDef", 10);
		OCLSyntaxParser.invOrDef_return retval = new OCLSyntaxParser.invOrDef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken i = default(CommonToken);
		CommonToken d = default(CommonToken);
		CommonToken SimpleName25 = default(CommonToken);
		CommonToken char_literal26 = default(CommonToken);
		CommonToken string_literal28 = default(CommonToken);
		CommonToken SimpleName29 = default(CommonToken);
		CommonToken char_literal30 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return oclExpression27 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.defExpression_return defExpression31 = default(OCLSyntaxParser.defExpression_return);

		object i_tree = default(object);
		object d_tree = default(object);
		object SimpleName25_tree = default(object);
		object char_literal26_tree = default(object);
		object string_literal28_tree = default(object);
		object SimpleName29_tree = default(object);
		object char_literal30_tree = default(object);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		RewriteRuleSubtreeStream stream_defExpression=new RewriteRuleSubtreeStream(adaptor,"rule defExpression");
		try { DebugEnterRule(GrammarFileName, "invOrDef");
		DebugLocation(68, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:2: (i= 'inv' ( SimpleName )? ':' oclExpression -> ^( INV[$i] ( SimpleName )? oclExpression ) | ( 'static' )? d= 'def' ( SimpleName )? ':' defExpression -> ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression ) )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==111))
			{
				alt12 = 1;
			}
			else if ((LA12_0==102||LA12_0==118))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:3: i= 'inv' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(69, 4);
				i=(CommonToken)Match(input,111,Follow._111_in_invOrDef434); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(i);

				DebugLocation(69, 11);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:11: ( SimpleName )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==SimpleName))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:69:12: SimpleName
					{
					DebugLocation(69, 12);
					SimpleName25=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_invOrDef437); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName25);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(69, 26);
				char_literal26=(CommonToken)Match(input,69,Follow._69_in_invOrDef442); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal26);

				DebugLocation(69, 30);
				PushFollow(Follow._oclExpression_in_invOrDef444);
				oclExpression27=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression27.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 70:3: -> ^( INV[$i] ( SimpleName )? oclExpression )
				{
					DebugLocation(70, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:70:6: ^( INV[$i] ( SimpleName )? oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(70, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INV, i), root_1);

					DebugLocation(70, 16);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:70:16: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(70, 16);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(70, 28);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:4: ( 'static' )? d= 'def' ( SimpleName )? ':' defExpression
				{
				DebugLocation(71, 4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:4: ( 'static' )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==118))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:4: 'static'
					{
					DebugLocation(71, 4);
					string_literal28=(CommonToken)Match(input,118,Follow._118_in_invOrDef464); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_118.Add(string_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(71, 15);
				d=(CommonToken)Match(input,102,Follow._102_in_invOrDef469); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(d);

				DebugLocation(71, 22);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:22: ( SimpleName )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==SimpleName))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:71:22: SimpleName
					{
					DebugLocation(71, 22);
					SimpleName29=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_invOrDef471); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName29);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(71, 34);
				char_literal30=(CommonToken)Match(input,69,Follow._69_in_invOrDef474); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal30);

				DebugLocation(71, 38);
				PushFollow(Follow._defExpression_in_invOrDef476);
				defExpression31=defExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_defExpression.Add(defExpression31.Tree);


				{
				// AST REWRITE
				// elements: 118, SimpleName, defExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 72:3: -> ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression )
				{
					DebugLocation(72, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:6: ^( DEF[$d] ( 'static' )? ( SimpleName )? defExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(72, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DEF, d), root_1);

					DebugLocation(72, 16);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:16: ( 'static' )?
					if (stream_118.HasNext)
					{
						DebugLocation(72, 16);
						adaptor.AddChild(root_1, stream_118.NextNode());

					}
					stream_118.Reset();
					DebugLocation(72, 26);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:72:26: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(72, 26);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(72, 38);
					adaptor.AddChild(root_1, stream_defExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invOrDef", 10);
			LeaveRule("invOrDef", 10);
			LeaveRule_invOrDef();
		}
		DebugLocation(73, 1);
		} finally { DebugExitRule(GrammarFileName, "invOrDef"); }
		return retval;

	}
	// $ANTLR end "invOrDef"

	private sealed partial class prePostOrBodyDecl_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public prePostOrBodyDecl_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_prePostOrBodyDecl();
	partial void LeaveRule_prePostOrBodyDecl();

	// $ANTLR start "prePostOrBodyDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:75:1: prePostOrBodyDecl : (h= 'pre' ( SimpleName )? ':' oclExpression -> ^( PRE[h] ( SimpleName )? oclExpression ) |h= 'post' ( SimpleName )? ':' oclExpression -> ^( POST[h] ( SimpleName )? oclExpression ) |h= 'body' ( SimpleName )? ':' oclExpression -> ^( BODY[h] ( SimpleName )? oclExpression ) );
	[GrammarRule("prePostOrBodyDecl")]
	private OCLSyntaxParser.prePostOrBodyDecl_return prePostOrBodyDecl()
	{
		EnterRule_prePostOrBodyDecl();
		EnterRule("prePostOrBodyDecl", 11);
		TraceIn("prePostOrBodyDecl", 11);
		OCLSyntaxParser.prePostOrBodyDecl_return retval = new OCLSyntaxParser.prePostOrBodyDecl_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken h = default(CommonToken);
		CommonToken SimpleName32 = default(CommonToken);
		CommonToken char_literal33 = default(CommonToken);
		CommonToken SimpleName35 = default(CommonToken);
		CommonToken char_literal36 = default(CommonToken);
		CommonToken SimpleName38 = default(CommonToken);
		CommonToken char_literal39 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return oclExpression34 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression37 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression40 = default(OCLSyntaxParser.oclExpression_return);

		object h_tree = default(object);
		object SimpleName32_tree = default(object);
		object char_literal33_tree = default(object);
		object SimpleName35_tree = default(object);
		object char_literal36_tree = default(object);
		object SimpleName38_tree = default(object);
		object char_literal39_tree = default(object);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "prePostOrBodyDecl");
		DebugLocation(75, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:2: (h= 'pre' ( SimpleName )? ':' oclExpression -> ^( PRE[h] ( SimpleName )? oclExpression ) |h= 'post' ( SimpleName )? ':' oclExpression -> ^( POST[h] ( SimpleName )? oclExpression ) |h= 'body' ( SimpleName )? ':' oclExpression -> ^( BODY[h] ( SimpleName )? oclExpression ) )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case 117:
				{
				alt16 = 1;
				}
				break;
			case 116:
				{
				alt16 = 2;
				}
				break;
			case 100:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:3: h= 'pre' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(76, 4);
				h=(CommonToken)Match(input,117,Follow._117_in_prePostOrBodyDecl505); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_117.Add(h);

				DebugLocation(76, 11);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:11: ( SimpleName )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==SimpleName))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:12: SimpleName
					{
					DebugLocation(76, 12);
					SimpleName32=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl508); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName32);


					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(76, 25);
				char_literal33=(CommonToken)Match(input,69,Follow._69_in_prePostOrBodyDecl512); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal33);

				DebugLocation(76, 29);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl514);
				oclExpression34=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression34.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 76:43: -> ^( PRE[h] ( SimpleName )? oclExpression )
				{
					DebugLocation(76, 45);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:45: ^( PRE[h] ( SimpleName )? oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(76, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PRE, h), root_1);

					DebugLocation(76, 54);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:76:54: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(76, 54);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(76, 66);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:3: h= 'post' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(77, 4);
				h=(CommonToken)Match(input,116,Follow._116_in_prePostOrBodyDecl531); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(h);

				DebugLocation(77, 12);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:12: ( SimpleName )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==SimpleName))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:13: SimpleName
					{
					DebugLocation(77, 13);
					SimpleName35=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl534); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName35);


					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(77, 26);
				char_literal36=(CommonToken)Match(input,69,Follow._69_in_prePostOrBodyDecl538); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal36);

				DebugLocation(77, 30);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl540);
				oclExpression37=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression37.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 77:44: -> ^( POST[h] ( SimpleName )? oclExpression )
				{
					DebugLocation(77, 46);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:46: ^( POST[h] ( SimpleName )? oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(77, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(POST, h), root_1);

					DebugLocation(77, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:77:56: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(77, 56);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(77, 68);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:3: h= 'body' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(78, 4);
				h=(CommonToken)Match(input,100,Follow._100_in_prePostOrBodyDecl557); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_100.Add(h);

				DebugLocation(78, 12);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:12: ( SimpleName )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==SimpleName))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:13: SimpleName
					{
					DebugLocation(78, 13);
					SimpleName38=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl560); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName38);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(78, 26);
				char_literal39=(CommonToken)Match(input,69,Follow._69_in_prePostOrBodyDecl564); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal39);

				DebugLocation(78, 30);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl566);
				oclExpression40=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression40.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 78:44: -> ^( BODY[h] ( SimpleName )? oclExpression )
				{
					DebugLocation(78, 46);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:46: ^( BODY[h] ( SimpleName )? oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(78, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BODY, h), root_1);

					DebugLocation(78, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:78:56: ( SimpleName )?
					if (stream_SimpleName.HasNext)
					{
						DebugLocation(78, 56);
						adaptor.AddChild(root_1, stream_SimpleName.NextNode());

					}
					stream_SimpleName.Reset();
					DebugLocation(78, 68);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prePostOrBodyDecl", 11);
			LeaveRule("prePostOrBodyDecl", 11);
			LeaveRule_prePostOrBodyDecl();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "prePostOrBodyDecl"); }
		return retval;

	}
	// $ANTLR end "prePostOrBodyDecl"

	private sealed partial class operation_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operation_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_operation();
	partial void LeaveRule_operation();

	// $ANTLR start "operation"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:82:1: operation : pathName '(' ( parameters )? ')' ( ':' type )? -> ^( OPERATION pathName ( parameters )? ( type )? ) ;
	[GrammarRule("operation")]
	private OCLSyntaxParser.operation_return operation()
	{
		EnterRule_operation();
		EnterRule("operation", 12);
		TraceIn("operation", 12);
		OCLSyntaxParser.operation_return retval = new OCLSyntaxParser.operation_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal42 = default(CommonToken);
		CommonToken char_literal44 = default(CommonToken);
		CommonToken char_literal45 = default(CommonToken);
		OCLSyntaxParser.pathName_return pathName41 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.parameters_return parameters43 = default(OCLSyntaxParser.parameters_return);
		OCLSyntaxParser.type_return type46 = default(OCLSyntaxParser.type_return);

		object char_literal42_tree = default(object);
		object char_literal44_tree = default(object);
		object char_literal45_tree = default(object);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_pathName=new RewriteRuleSubtreeStream(adaptor,"rule pathName");
		RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "operation");
		DebugLocation(82, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:83:2: ( pathName '(' ( parameters )? ')' ( ':' type )? -> ^( OPERATION pathName ( parameters )? ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:83:3: pathName '(' ( parameters )? ')' ( ':' type )?
			{
			DebugLocation(83, 3);
			PushFollow(Follow._pathName_in_operation588);
			pathName41=pathName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_pathName.Add(pathName41.Tree);
			DebugLocation(83, 32);
			char_literal42=(CommonToken)Match(input,61,Follow._61_in_operation592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal42);

			DebugLocation(83, 36);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:83:36: ( parameters )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==SimpleName))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:83:36: parameters
				{
				DebugLocation(83, 36);
				PushFollow(Follow._parameters_in_operation594);
				parameters43=parameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parameters.Add(parameters43.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(83, 48);
			char_literal44=(CommonToken)Match(input,62,Follow._62_in_operation597); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal44);

			DebugLocation(83, 52);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:83:52: ( ':' type )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==69))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:83:53: ':' type
				{
				DebugLocation(83, 53);
				char_literal45=(CommonToken)Match(input,69,Follow._69_in_operation600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal45);

				DebugLocation(83, 57);
				PushFollow(Follow._type_in_operation602);
				type46=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type46.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: pathName, parameters, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 84:3: -> ^( OPERATION pathName ( parameters )? ( type )? )
			{
				DebugLocation(84, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:84:6: ^( OPERATION pathName ( parameters )? ( type )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(84, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OPERATION, "OPERATION"), root_1);

				DebugLocation(84, 18);
				adaptor.AddChild(root_1, stream_pathName.NextTree());
				DebugLocation(84, 27);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:84:27: ( parameters )?
				if (stream_parameters.HasNext)
				{
					DebugLocation(84, 27);
					adaptor.AddChild(root_1, stream_parameters.NextTree());

				}
				stream_parameters.Reset();
				DebugLocation(84, 39);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:84:39: ( type )?
				if (stream_type.HasNext)
				{
					DebugLocation(84, 39);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operation", 12);
			LeaveRule("operation", 12);
			LeaveRule_operation();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "operation"); }
		return retval;

	}
	// $ANTLR end "operation"

	private sealed partial class parameters_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public parameters_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();

	// $ANTLR start "parameters"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:87:1: parameters : variableDeclarationList[VariableDeclarationRequirement.OperationContext] ;
	[GrammarRule("parameters")]
	private OCLSyntaxParser.parameters_return parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 13);
		TraceIn("parameters", 13);
		OCLSyntaxParser.parameters_return retval = new OCLSyntaxParser.parameters_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.variableDeclarationList_return variableDeclarationList47 = default(OCLSyntaxParser.variableDeclarationList_return);


		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(87, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:88:2: ( variableDeclarationList[VariableDeclarationRequirement.OperationContext] )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:88:3: variableDeclarationList[VariableDeclarationRequirement.OperationContext]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(88, 3);
			PushFollow(Follow._variableDeclarationList_in_parameters630);
			variableDeclarationList47=variableDeclarationList(VariableDeclarationRequirement.OperationContext);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationList47.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameters", 13);
			LeaveRule("parameters", 13);
			LeaveRule_parameters();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return retval;

	}
	// $ANTLR end "parameters"

	private sealed partial class defExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public defExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_defExpression();
	partial void LeaveRule_defExpression();

	// $ANTLR start "defExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:91:1: defExpression : ( variableDeclaration[VariableDeclarationRequirement.Def] | operation '=' oclExpression -> ^( DECL operation oclExpression ) );
	[GrammarRule("defExpression")]
	private OCLSyntaxParser.defExpression_return defExpression()
	{
		EnterRule_defExpression();
		EnterRule("defExpression", 14);
		TraceIn("defExpression", 14);
		OCLSyntaxParser.defExpression_return retval = new OCLSyntaxParser.defExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal50 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration48 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.operation_return operation49 = default(OCLSyntaxParser.operation_return);
		OCLSyntaxParser.oclExpression_return oclExpression51 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal50_tree = default(object);
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_operation=new RewriteRuleSubtreeStream(adaptor,"rule operation");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "defExpression");
		DebugLocation(91, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:92:2: ( variableDeclaration[VariableDeclarationRequirement.Def] | operation '=' oclExpression -> ^( DECL operation oclExpression ) )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==SimpleName))
			{
				int LA19_1 = input.LA(2);

				if ((LA19_1==69||LA19_1==75))
				{
					alt19 = 1;
				}
				else if ((LA19_1==61||LA19_1==70))
				{
					alt19 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:92:4: variableDeclaration[VariableDeclarationRequirement.Def]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(92, 4);
				PushFollow(Follow._variableDeclaration_in_defExpression643);
				variableDeclaration48=variableDeclaration(VariableDeclarationRequirement.Def);
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration48.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:93:4: operation '=' oclExpression
				{
				DebugLocation(93, 4);
				PushFollow(Follow._operation_in_defExpression649);
				operation49=operation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operation.Add(operation49.Tree);
				DebugLocation(93, 14);
				char_literal50=(CommonToken)Match(input,75,Follow._75_in_defExpression651); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_75.Add(char_literal50);

				DebugLocation(93, 18);
				PushFollow(Follow._oclExpression_in_defExpression653);
				oclExpression51=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression51.Tree);


				{
				// AST REWRITE
				// elements: operation, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 94:3: -> ^( DECL operation oclExpression )
				{
					DebugLocation(94, 5);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:94:5: ^( DECL operation oclExpression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(94, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

					DebugLocation(94, 12);
					adaptor.AddChild(root_1, stream_operation.NextTree());
					DebugLocation(94, 22);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defExpression", 14);
			LeaveRule("defExpression", 14);
			LeaveRule_defExpression();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "defExpression"); }
		return retval;

	}
	// $ANTLR end "defExpression"

	public sealed partial class oclExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclExpression();
	partial void LeaveRule_oclExpression();

	// $ANTLR start "oclExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:98:1: public oclExpression : logicalImpliesExpression ;
	[GrammarRule("oclExpression")]
	public OCLSyntaxParser.oclExpression_return oclExpression()
	{
		EnterRule_oclExpression();
		EnterRule("oclExpression", 15);
		TraceIn("oclExpression", 15);
		OCLSyntaxParser.oclExpression_return retval = new OCLSyntaxParser.oclExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.logicalImpliesExpression_return logicalImpliesExpression52 = default(OCLSyntaxParser.logicalImpliesExpression_return);


		try { DebugEnterRule(GrammarFileName, "oclExpression");
		DebugLocation(98, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:99:2: ( logicalImpliesExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:99:3: logicalImpliesExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(99, 3);
			PushFollow(Follow._logicalImpliesExpression_in_oclExpression677);
			logicalImpliesExpression52=logicalImpliesExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalImpliesExpression52.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclExpression", 15);
			LeaveRule("oclExpression", 15);
			LeaveRule_oclExpression();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "oclExpression"); }
		return retval;

	}
	// $ANTLR end "oclExpression"

	private sealed partial class logicalImpliesExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalImpliesExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalImpliesExpression();
	partial void LeaveRule_logicalImpliesExpression();

	// $ANTLR start "logicalImpliesExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:103:1: logicalImpliesExpression : ( logicalXorExpression -> logicalXorExpression ) (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )* ;
	[GrammarRule("logicalImpliesExpression")]
	private OCLSyntaxParser.logicalImpliesExpression_return logicalImpliesExpression()
	{
		EnterRule_logicalImpliesExpression();
		EnterRule("logicalImpliesExpression", 16);
		TraceIn("logicalImpliesExpression", 16);
		OCLSyntaxParser.logicalImpliesExpression_return retval = new OCLSyntaxParser.logicalImpliesExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.logicalXorExpression_return expr = default(OCLSyntaxParser.logicalXorExpression_return);
		OCLSyntaxParser.logicalXorExpression_return logicalXorExpression53 = default(OCLSyntaxParser.logicalXorExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_logicalXorExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalXorExpression");
		try { DebugEnterRule(GrammarFileName, "logicalImpliesExpression");
		DebugLocation(103, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:104:2: ( ( logicalXorExpression -> logicalXorExpression ) (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:104:4: ( logicalXorExpression -> logicalXorExpression ) (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )*
			{
			DebugLocation(104, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:104:4: ( logicalXorExpression -> logicalXorExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:104:5: logicalXorExpression
			{
			DebugLocation(104, 5);
			PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression693);
			logicalXorExpression53=logicalXorExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_logicalXorExpression.Add(logicalXorExpression53.Tree);


			{
			// AST REWRITE
			// elements: logicalXorExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 104:25: -> logicalXorExpression
			{
				DebugLocation(104, 27);
				adaptor.AddChild(root_0, stream_logicalXorExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(104, 50);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:104:50: (opToken= 'implies' expr= logicalXorExpression -> ^( INFIX[$opToken] $logicalImpliesExpression $expr) )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==108))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:104:51: opToken= 'implies' expr= logicalXorExpression
					{
					DebugLocation(104, 58);
					opToken=(CommonToken)Match(input,108,Follow._108_in_logicalImpliesExpression702); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(opToken);

					DebugLocation(104, 73);
					PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression706);
					expr=logicalXorExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_logicalXorExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalImpliesExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 104:94: -> ^( INFIX[$opToken] $logicalImpliesExpression $expr)
					{
						DebugLocation(104, 96);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:104:96: ^( INFIX[$opToken] $logicalImpliesExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(104, 98);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(104, 115);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(104, 141);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalImpliesExpression", 16);
			LeaveRule("logicalImpliesExpression", 16);
			LeaveRule_logicalImpliesExpression();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalImpliesExpression"); }
		return retval;

	}
	// $ANTLR end "logicalImpliesExpression"

	private sealed partial class logicalXorExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalXorExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalXorExpression();
	partial void LeaveRule_logicalXorExpression();

	// $ANTLR start "logicalXorExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:106:1: logicalXorExpression : ( logicalOrExpression -> logicalOrExpression ) (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )* ;
	[GrammarRule("logicalXorExpression")]
	private OCLSyntaxParser.logicalXorExpression_return logicalXorExpression()
	{
		EnterRule_logicalXorExpression();
		EnterRule("logicalXorExpression", 17);
		TraceIn("logicalXorExpression", 17);
		OCLSyntaxParser.logicalXorExpression_return retval = new OCLSyntaxParser.logicalXorExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.logicalOrExpression_return expr = default(OCLSyntaxParser.logicalOrExpression_return);
		OCLSyntaxParser.logicalOrExpression_return logicalOrExpression54 = default(OCLSyntaxParser.logicalOrExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_logicalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalOrExpression");
		try { DebugEnterRule(GrammarFileName, "logicalXorExpression");
		DebugLocation(106, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:107:2: ( ( logicalOrExpression -> logicalOrExpression ) (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:107:4: ( logicalOrExpression -> logicalOrExpression ) (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )*
			{
			DebugLocation(107, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:107:4: ( logicalOrExpression -> logicalOrExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:107:5: logicalOrExpression
			{
			DebugLocation(107, 5);
			PushFollow(Follow._logicalOrExpression_in_logicalXorExpression731);
			logicalOrExpression54=logicalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_logicalOrExpression.Add(logicalOrExpression54.Tree);


			{
			// AST REWRITE
			// elements: logicalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 107:24: -> logicalOrExpression
			{
				DebugLocation(107, 26);
				adaptor.AddChild(root_0, stream_logicalOrExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(107, 47);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:107:47: (opToken= 'xor' expr= logicalOrExpression -> ^( INFIX[$opToken] $logicalXorExpression $expr) )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==121))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:107:48: opToken= 'xor' expr= logicalOrExpression
					{
					DebugLocation(107, 55);
					opToken=(CommonToken)Match(input,121,Follow._121_in_logicalXorExpression739); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_121.Add(opToken);

					DebugLocation(107, 66);
					PushFollow(Follow._logicalOrExpression_in_logicalXorExpression743);
					expr=logicalOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_logicalOrExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalXorExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 107:86: -> ^( INFIX[$opToken] $logicalXorExpression $expr)
					{
						DebugLocation(107, 88);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:107:88: ^( INFIX[$opToken] $logicalXorExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(107, 90);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(107, 107);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(107, 129);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalXorExpression", 17);
			LeaveRule("logicalXorExpression", 17);
			LeaveRule_logicalXorExpression();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalXorExpression"); }
		return retval;

	}
	// $ANTLR end "logicalXorExpression"

	private sealed partial class logicalOrExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalOrExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();

	// $ANTLR start "logicalOrExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:109:1: logicalOrExpression : ( logicalAndExpression -> logicalAndExpression ) (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )* ;
	[GrammarRule("logicalOrExpression")]
	private OCLSyntaxParser.logicalOrExpression_return logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 18);
		TraceIn("logicalOrExpression", 18);
		OCLSyntaxParser.logicalOrExpression_return retval = new OCLSyntaxParser.logicalOrExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.logicalAndExpression_return expr = default(OCLSyntaxParser.logicalAndExpression_return);
		OCLSyntaxParser.logicalAndExpression_return logicalAndExpression55 = default(OCLSyntaxParser.logicalAndExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleSubtreeStream stream_logicalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalAndExpression");
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(109, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:110:2: ( ( logicalAndExpression -> logicalAndExpression ) (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:110:4: ( logicalAndExpression -> logicalAndExpression ) (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )*
			{
			DebugLocation(110, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:110:4: ( logicalAndExpression -> logicalAndExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:110:5: logicalAndExpression
			{
			DebugLocation(110, 5);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression767);
			logicalAndExpression55=logicalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_logicalAndExpression.Add(logicalAndExpression55.Tree);


			{
			// AST REWRITE
			// elements: logicalAndExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 110:25: -> logicalAndExpression
			{
				DebugLocation(110, 27);
				adaptor.AddChild(root_0, stream_logicalAndExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(110, 49);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:110:49: (opToken= 'or' expr= logicalAndExpression -> ^( INFIX[$opToken] $logicalOrExpression $expr) )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==115))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:110:50: opToken= 'or' expr= logicalAndExpression
					{
					DebugLocation(110, 57);
					opToken=(CommonToken)Match(input,115,Follow._115_in_logicalOrExpression775); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_115.Add(opToken);

					DebugLocation(110, 67);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression779);
					expr=logicalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_logicalAndExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalOrExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 110:88: -> ^( INFIX[$opToken] $logicalOrExpression $expr)
					{
						DebugLocation(110, 90);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:110:90: ^( INFIX[$opToken] $logicalOrExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(110, 92);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(110, 109);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(110, 130);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOrExpression", 18);
			LeaveRule("logicalOrExpression", 18);
			LeaveRule_logicalOrExpression();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return retval;

	}
	// $ANTLR end "logicalOrExpression"

	private sealed partial class logicalAndExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public logicalAndExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();

	// $ANTLR start "logicalAndExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:112:1: logicalAndExpression : ( relationalEqExpression -> relationalEqExpression ) (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )* ;
	[GrammarRule("logicalAndExpression")]
	private OCLSyntaxParser.logicalAndExpression_return logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 19);
		TraceIn("logicalAndExpression", 19);
		OCLSyntaxParser.logicalAndExpression_return retval = new OCLSyntaxParser.logicalAndExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.relationalEqExpression_return expr = default(OCLSyntaxParser.relationalEqExpression_return);
		OCLSyntaxParser.relationalEqExpression_return relationalEqExpression56 = default(OCLSyntaxParser.relationalEqExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_relationalEqExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalEqExpression");
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(112, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:113:2: ( ( relationalEqExpression -> relationalEqExpression ) (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:113:4: ( relationalEqExpression -> relationalEqExpression ) (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )*
			{
			DebugLocation(113, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:113:4: ( relationalEqExpression -> relationalEqExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:113:5: relationalEqExpression
			{
			DebugLocation(113, 5);
			PushFollow(Follow._relationalEqExpression_in_logicalAndExpression803);
			relationalEqExpression56=relationalEqExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_relationalEqExpression.Add(relationalEqExpression56.Tree);


			{
			// AST REWRITE
			// elements: relationalEqExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 113:27: -> relationalEqExpression
			{
				DebugLocation(113, 29);
				adaptor.AddChild(root_0, stream_relationalEqExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(113, 54);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:113:54: (opToken= 'and' expr= relationalEqExpression -> ^( INFIX[$opToken] $logicalAndExpression $expr) )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==99))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:113:55: opToken= 'and' expr= relationalEqExpression
					{
					DebugLocation(113, 62);
					opToken=(CommonToken)Match(input,99,Follow._99_in_logicalAndExpression812); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(opToken);

					DebugLocation(113, 73);
					PushFollow(Follow._relationalEqExpression_in_logicalAndExpression816);
					expr=relationalEqExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_relationalEqExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: logicalAndExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 113:96: -> ^( INFIX[$opToken] $logicalAndExpression $expr)
					{
						DebugLocation(113, 98);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:113:98: ^( INFIX[$opToken] $logicalAndExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(113, 100);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(113, 117);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(113, 139);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAndExpression", 19);
			LeaveRule("logicalAndExpression", 19);
			LeaveRule_logicalAndExpression();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return retval;

	}
	// $ANTLR end "logicalAndExpression"

	private sealed partial class relationalEqExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalEqExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_relationalEqExpression();
	partial void LeaveRule_relationalEqExpression();

	// $ANTLR start "relationalEqExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:116:1: relationalEqExpression : ( relationalNotEqExprassion -> relationalNotEqExprassion ) ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )* ;
	[GrammarRule("relationalEqExpression")]
	private OCLSyntaxParser.relationalEqExpression_return relationalEqExpression()
	{
		EnterRule_relationalEqExpression();
		EnterRule("relationalEqExpression", 20);
		TraceIn("relationalEqExpression", 20);
		OCLSyntaxParser.relationalEqExpression_return retval = new OCLSyntaxParser.relationalEqExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.relationalNotEqExprassion_return expr = default(OCLSyntaxParser.relationalNotEqExprassion_return);
		OCLSyntaxParser.relationalNotEqExprassion_return relationalNotEqExprassion57 = default(OCLSyntaxParser.relationalNotEqExprassion_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_relationalNotEqExprassion=new RewriteRuleSubtreeStream(adaptor,"rule relationalNotEqExprassion");
		try { DebugEnterRule(GrammarFileName, "relationalEqExpression");
		DebugLocation(116, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:2: ( ( relationalNotEqExprassion -> relationalNotEqExprassion ) ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:4: ( relationalNotEqExprassion -> relationalNotEqExprassion ) ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )*
			{
			DebugLocation(117, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:4: ( relationalNotEqExprassion -> relationalNotEqExprassion )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:5: relationalNotEqExprassion
			{
			DebugLocation(117, 5);
			PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression841);
			relationalNotEqExprassion57=relationalNotEqExprassion();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_relationalNotEqExprassion.Add(relationalNotEqExprassion57.Tree);


			{
			// AST REWRITE
			// elements: relationalNotEqExprassion
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 117:30: -> relationalNotEqExprassion
			{
				DebugLocation(117, 32);
				adaptor.AddChild(root_0, stream_relationalNotEqExprassion.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(117, 59);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:59: ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion -> ^( INFIX[$opToken] $relationalEqExpression $expr) )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==75))
				{
					alt25 = 1;
				}
				else if ((LA25_0==74))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:60: (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion
					{
					DebugLocation(117, 60);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:60: (opToken= '=' |opToken= '<>' )
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==75))
					{
						alt24 = 1;
					}
					else if ((LA24_0==74))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:61: opToken= '='
						{
						DebugLocation(117, 68);
						opToken=(CommonToken)Match(input,75,Follow._75_in_relationalEqExpression850); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_75.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:73: opToken= '<>'
						{
						DebugLocation(117, 80);
						opToken=(CommonToken)Match(input,74,Follow._74_in_relationalEqExpression854); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_74.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(24); }

					DebugLocation(117, 91);
					PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression859);
					expr=relationalNotEqExprassion();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_relationalNotEqExprassion.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: relationalEqExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 117:117: -> ^( INFIX[$opToken] $relationalEqExpression $expr)
					{
						DebugLocation(117, 119);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:117:119: ^( INFIX[$opToken] $relationalEqExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(117, 121);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(117, 138);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(117, 162);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalEqExpression", 20);
			LeaveRule("relationalEqExpression", 20);
			LeaveRule_relationalEqExpression();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalEqExpression"); }
		return retval;

	}
	// $ANTLR end "relationalEqExpression"

	private sealed partial class relationalNotEqExprassion_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public relationalNotEqExprassion_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_relationalNotEqExprassion();
	partial void LeaveRule_relationalNotEqExprassion();

	// $ANTLR start "relationalNotEqExprassion"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:119:1: relationalNotEqExprassion : ( additiveExpression -> additiveExpression ) ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )* ;
	[GrammarRule("relationalNotEqExprassion")]
	private OCLSyntaxParser.relationalNotEqExprassion_return relationalNotEqExprassion()
	{
		EnterRule_relationalNotEqExprassion();
		EnterRule("relationalNotEqExprassion", 21);
		TraceIn("relationalNotEqExprassion", 21);
		OCLSyntaxParser.relationalNotEqExprassion_return retval = new OCLSyntaxParser.relationalNotEqExprassion_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.additiveExpression_return expr = default(OCLSyntaxParser.additiveExpression_return);
		OCLSyntaxParser.additiveExpression_return additiveExpression58 = default(OCLSyntaxParser.additiveExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
		try { DebugEnterRule(GrammarFileName, "relationalNotEqExprassion");
		DebugLocation(119, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:2: ( ( additiveExpression -> additiveExpression ) ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:4: ( additiveExpression -> additiveExpression ) ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )*
			{
			DebugLocation(120, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:4: ( additiveExpression -> additiveExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:5: additiveExpression
			{
			DebugLocation(120, 5);
			PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion886);
			additiveExpression58=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_additiveExpression.Add(additiveExpression58.Tree);


			{
			// AST REWRITE
			// elements: additiveExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 120:24: -> additiveExpression
			{
				DebugLocation(120, 26);
				adaptor.AddChild(root_0, stream_additiveExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(120, 46);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:46: ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr) )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				switch (input.LA(1))
				{
				case 72:
					{
					alt27 = 1;
					}
					break;
				case 76:
					{
					alt27 = 1;
					}
					break;
				case 73:
					{
					alt27 = 1;
					}
					break;
				case 77:
					{
					alt27 = 1;
					}
					break;

				}

				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:47: (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression
					{
					DebugLocation(120, 47);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:47: (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' )
					int alt26=4;
					try { DebugEnterSubRule(26);
					try { DebugEnterDecision(26, false);
					switch (input.LA(1))
					{
					case 72:
						{
						alt26 = 1;
						}
						break;
					case 76:
						{
						alt26 = 2;
						}
						break;
					case 73:
						{
						alt26 = 3;
						}
						break;
					case 77:
						{
						alt26 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:48: opToken= '<'
						{
						DebugLocation(120, 55);
						opToken=(CommonToken)Match(input,72,Follow._72_in_relationalNotEqExprassion896); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_72.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:61: opToken= '>'
						{
						DebugLocation(120, 68);
						opToken=(CommonToken)Match(input,76,Follow._76_in_relationalNotEqExprassion901); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_76.Add(opToken);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:74: opToken= '<='
						{
						DebugLocation(120, 81);
						opToken=(CommonToken)Match(input,73,Follow._73_in_relationalNotEqExprassion906); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_73.Add(opToken);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:88: opToken= '>='
						{
						DebugLocation(120, 95);
						opToken=(CommonToken)Match(input,77,Follow._77_in_relationalNotEqExprassion911); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_77.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(26); }

					DebugLocation(120, 106);
					PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion916);
					expr=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_additiveExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: relationalNotEqExprassion, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 120:125: -> ^( INFIX[$opToken] $relationalNotEqExprassion $expr)
					{
						DebugLocation(120, 127);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:120:127: ^( INFIX[$opToken] $relationalNotEqExprassion $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(120, 129);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(120, 146);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(120, 173);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalNotEqExprassion", 21);
			LeaveRule("relationalNotEqExprassion", 21);
			LeaveRule_relationalNotEqExprassion();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalNotEqExprassion"); }
		return retval;

	}
	// $ANTLR end "relationalNotEqExprassion"

	private sealed partial class additiveExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public additiveExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:123:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )* ;
	[GrammarRule("additiveExpression")]
	private OCLSyntaxParser.additiveExpression_return additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 22);
		TraceIn("additiveExpression", 22);
		OCLSyntaxParser.additiveExpression_return retval = new OCLSyntaxParser.additiveExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.multiplicativeExpression_return expr = default(OCLSyntaxParser.multiplicativeExpression_return);
		OCLSyntaxParser.multiplicativeExpression_return multiplicativeExpression59 = default(OCLSyntaxParser.multiplicativeExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(123, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:4: ( multiplicativeExpression -> multiplicativeExpression ) ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )*
			{
			DebugLocation(124, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:4: ( multiplicativeExpression -> multiplicativeExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:5: multiplicativeExpression
			{
			DebugLocation(124, 5);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression942);
			multiplicativeExpression59=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_multiplicativeExpression.Add(multiplicativeExpression59.Tree);


			{
			// AST REWRITE
			// elements: multiplicativeExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 124:29: -> multiplicativeExpression
			{
				DebugLocation(124, 31);
				adaptor.AddChild(root_0, stream_multiplicativeExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(124, 57);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:57: ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression -> ^( INFIX[$opToken] $additiveExpression $expr) )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==63))
				{
					alt29 = 1;
				}
				else if ((LA29_0==65))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:58: (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression
					{
					DebugLocation(124, 58);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:58: (opToken= '+' |opToken= '-' )
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==63))
					{
						alt28 = 1;
					}
					else if ((LA28_0==65))
					{
						alt28 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:59: opToken= '+'
						{
						DebugLocation(124, 66);
						opToken=(CommonToken)Match(input,63,Follow._63_in_additiveExpression951); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_63.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:71: opToken= '-'
						{
						DebugLocation(124, 78);
						opToken=(CommonToken)Match(input,65,Follow._65_in_additiveExpression955); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_65.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(124, 88);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression961);
					expr=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_multiplicativeExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: additiveExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 124:114: -> ^( INFIX[$opToken] $additiveExpression $expr)
					{
						DebugLocation(124, 116);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:124:116: ^( INFIX[$opToken] $additiveExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(124, 118);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(124, 135);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(124, 155);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 22);
			LeaveRule("additiveExpression", 22);
			LeaveRule_additiveExpression();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	private sealed partial class multiplicativeExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public multiplicativeExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:127:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )* ;
	[GrammarRule("multiplicativeExpression")]
	private OCLSyntaxParser.multiplicativeExpression_return multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 23);
		TraceIn("multiplicativeExpression", 23);
		OCLSyntaxParser.multiplicativeExpression_return retval = new OCLSyntaxParser.multiplicativeExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.unaryExpression_return expr = default(OCLSyntaxParser.unaryExpression_return);
		OCLSyntaxParser.unaryExpression_return unaryExpression60 = default(OCLSyntaxParser.unaryExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_UnlimitedNaturalLiteralExp=new RewriteRuleITokenStream(adaptor,"token UnlimitedNaturalLiteralExp");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(127, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:2: ( ( unaryExpression -> unaryExpression ) ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:4: ( unaryExpression -> unaryExpression ) ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )*
			{
			DebugLocation(128, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:4: ( unaryExpression -> unaryExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:5: unaryExpression
			{
			DebugLocation(128, 5);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression988);
			unaryExpression60=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_unaryExpression.Add(unaryExpression60.Tree);


			{
			// AST REWRITE
			// elements: unaryExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 128:20: -> unaryExpression
			{
				DebugLocation(128, 22);
				adaptor.AddChild(root_0, stream_unaryExpression.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(128, 39);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:39: ( (opToken= '*' |opToken= '/' ) expr= unaryExpression -> ^( INFIX[$opToken] $multiplicativeExpression $expr) )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==UnlimitedNaturalLiteralExp))
				{
					alt31 = 1;
				}
				else if ((LA31_0==68))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:40: (opToken= '*' |opToken= '/' ) expr= unaryExpression
					{
					DebugLocation(128, 40);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:40: (opToken= '*' |opToken= '/' )
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==UnlimitedNaturalLiteralExp))
					{
						alt30 = 1;
					}
					else if ((LA30_0==68))
					{
						alt30 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:41: opToken= '*'
						{
						DebugLocation(128, 48);
						opToken=(CommonToken)Match(input,UnlimitedNaturalLiteralExp,Follow._UnlimitedNaturalLiteralExp_in_multiplicativeExpression997); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_UnlimitedNaturalLiteralExp.Add(opToken);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:53: opToken= '/'
						{
						DebugLocation(128, 60);
						opToken=(CommonToken)Match(input,68,Follow._68_in_multiplicativeExpression1001); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_68.Add(opToken);


						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(128, 70);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression1006);
					expr=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_unaryExpression.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: multiplicativeExpression, expr
					// token labels: 
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 128:86: -> ^( INFIX[$opToken] $multiplicativeExpression $expr)
					{
						DebugLocation(128, 88);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:128:88: ^( INFIX[$opToken] $multiplicativeExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(128, 90);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INFIX, opToken), root_1);

						DebugLocation(128, 107);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(128, 133);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 23);
			LeaveRule("multiplicativeExpression", 23);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	private sealed partial class unaryExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:131:1: unaryExpression : ( (opToken= '-' |opToken= 'not' ) term= termExpression -> ^( UNARY[$opToken] $term) | termExpression );
	[GrammarRule("unaryExpression")]
	private OCLSyntaxParser.unaryExpression_return unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 24);
		TraceIn("unaryExpression", 24);
		OCLSyntaxParser.unaryExpression_return retval = new OCLSyntaxParser.unaryExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken opToken = default(CommonToken);
		OCLSyntaxParser.termExpression_return term = default(OCLSyntaxParser.termExpression_return);
		OCLSyntaxParser.termExpression_return termExpression61 = default(OCLSyntaxParser.termExpression_return);

		object opToken_tree = default(object);
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_termExpression=new RewriteRuleSubtreeStream(adaptor,"rule termExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(131, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:132:2: ( (opToken= '-' |opToken= 'not' ) term= termExpression -> ^( UNARY[$opToken] $term) | termExpression )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==65||LA33_0==114))
			{
				alt33 = 1;
			}
			else if (((LA33_0>=IntegerLiteralExp && LA33_0<=InvalidLiteralExp)||LA33_0==NullLiteralExp||(LA33_0>=RealLiteralExp && LA33_0<=SimpleName)||LA33_0==StringLiteralExp||LA33_0==UnlimitedNaturalLiteralExp||LA33_0==61||(LA33_0>=80 && LA33_0<=94)||(LA33_0>=106 && LA33_0<=107)||(LA33_0>=112 && LA33_0<=113)||LA33_0==120))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:132:4: (opToken= '-' |opToken= 'not' ) term= termExpression
				{
				DebugLocation(132, 4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:132:4: (opToken= '-' |opToken= 'not' )
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==65))
				{
					alt32 = 1;
				}
				else if ((LA32_0==114))
				{
					alt32 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:132:5: opToken= '-'
					{
					DebugLocation(132, 12);
					opToken=(CommonToken)Match(input,65,Follow._65_in_unaryExpression1034); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_65.Add(opToken);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:132:17: opToken= 'not'
					{
					DebugLocation(132, 24);
					opToken=(CommonToken)Match(input,114,Follow._114_in_unaryExpression1038); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_114.Add(opToken);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(132, 36);
				PushFollow(Follow._termExpression_in_unaryExpression1043);
				term=termExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_termExpression.Add(term.Tree);


				{
				// AST REWRITE
				// elements: term
				// token labels: 
				// rule labels: term, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_term=new RewriteRuleSubtreeStream(adaptor,"rule term",term!=null?term.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 132:52: -> ^( UNARY[$opToken] $term)
				{
					DebugLocation(132, 54);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:132:54: ^( UNARY[$opToken] $term)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(132, 56);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNARY, opToken), root_1);

					DebugLocation(132, 73);
					adaptor.AddChild(root_1, stream_term.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:133:4: termExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 4);
				PushFollow(Follow._termExpression_in_unaryExpression1057);
				termExpression61=termExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, termExpression61.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 24);
			LeaveRule("unaryExpression", 24);
			LeaveRule_unaryExpression();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	private sealed partial class termExpression_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public termExpression_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_termExpression();
	partial void LeaveRule_termExpression();

	// $ANTLR start "termExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:136:1: termExpression : ( primaryExperession -> primaryExperession ) ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )* ;
	[GrammarRule("termExpression")]
	private OCLSyntaxParser.termExpression_return termExpression()
	{
		EnterRule_termExpression();
		EnterRule("termExpression", 25);
		TraceIn("termExpression", 25);
		OCLSyntaxParser.termExpression_return retval = new OCLSyntaxParser.termExpression_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken token = default(CommonToken);
		OCLSyntaxParser.propertyCall_return expr = default(OCLSyntaxParser.propertyCall_return);
		OCLSyntaxParser.primaryExperession_return primaryExperession62 = default(OCLSyntaxParser.primaryExperession_return);
		OCLSyntaxParser.oclMessageExp_return oclMessageExp63 = default(OCLSyntaxParser.oclMessageExp_return);

		object token_tree = default(object);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleSubtreeStream stream_primaryExperession=new RewriteRuleSubtreeStream(adaptor,"rule primaryExperession");
		RewriteRuleSubtreeStream stream_propertyCall=new RewriteRuleSubtreeStream(adaptor,"rule propertyCall");
		RewriteRuleSubtreeStream stream_oclMessageExp=new RewriteRuleSubtreeStream(adaptor,"rule oclMessageExp");
		try { DebugEnterRule(GrammarFileName, "termExpression");
		DebugLocation(136, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:2: ( ( primaryExperession -> primaryExperession ) ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:4: ( primaryExperession -> primaryExperession ) ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )*
			{
			DebugLocation(137, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:4: ( primaryExperession -> primaryExperession )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:5: primaryExperession
			{
			DebugLocation(137, 5);
			PushFollow(Follow._primaryExperession_in_termExpression1071);
			primaryExperession62=primaryExperession();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_primaryExperession.Add(primaryExperession62.Tree);


			{
			// AST REWRITE
			// elements: primaryExperession
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 137:23: -> primaryExperession
			{
				DebugLocation(137, 25);
				adaptor.AddChild(root_0, stream_primaryExperession.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(137, 45);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:45: ( ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) ) | ( oclMessageExp -> MESSAGE oclMessageExp ) )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=3;
				try { DebugEnterDecision(35, false);
				switch (input.LA(1))
				{
				case 67:
					{
					alt35 = 1;
					}
					break;
				case 66:
					{
					alt35 = 1;
					}
					break;
				case 98:
					{
					alt35 = 2;
					}
					break;
				case 97:
					{
					alt35 = 2;
					}
					break;

				}

				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:47: ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) )
					{
					DebugLocation(137, 47);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:47: ( (token= '.' |token= '->' ) expr= propertyCall -> ^( $token $termExpression $expr) )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:48: (token= '.' |token= '->' ) expr= propertyCall
					{
					DebugLocation(137, 48);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:48: (token= '.' |token= '->' )
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==67))
					{
						alt34 = 1;
					}
					else if ((LA34_0==66))
					{
						alt34 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:49: token= '.'
						{
						DebugLocation(137, 54);
						token=(CommonToken)Match(input,67,Follow._67_in_termExpression1082); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_67.Add(token);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:59: token= '->'
						{
						DebugLocation(137, 64);
						token=(CommonToken)Match(input,66,Follow._66_in_termExpression1086); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_66.Add(token);


						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(137, 75);
					PushFollow(Follow._propertyCall_in_termExpression1091);
					expr=propertyCall();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_propertyCall.Add(expr.Tree);


					{
					// AST REWRITE
					// elements: token, termExpression, expr
					// token labels: token
					// rule labels: expr, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_token=new RewriteRuleITokenStream(adaptor,"token token",token);
					RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr",expr!=null?expr.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 137:89: -> ^( $token $termExpression $expr)
					{
						DebugLocation(137, 92);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:137:92: ^( $token $termExpression $expr)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(137, 95);
						root_1 = (object)adaptor.BecomeRoot(stream_token.NextNode(), root_1);

						DebugLocation(137, 102);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(137, 118);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:138:6: ( oclMessageExp -> MESSAGE oclMessageExp )
					{
					DebugLocation(138, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:138:6: ( oclMessageExp -> MESSAGE oclMessageExp )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:138:7: oclMessageExp
					{
					DebugLocation(138, 7);
					PushFollow(Follow._oclMessageExp_in_termExpression1115);
					oclMessageExp63=oclMessageExp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_oclMessageExp.Add(oclMessageExp63.Tree);


					{
					// AST REWRITE
					// elements: oclMessageExp
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 138:21: -> MESSAGE oclMessageExp
					{
						DebugLocation(138, 24);
						adaptor.AddChild(root_0, (object)adaptor.Create(MESSAGE, "MESSAGE"));
						DebugLocation(138, 32);
						adaptor.AddChild(root_0, stream_oclMessageExp.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}


					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("termExpression", 25);
			LeaveRule("termExpression", 25);
			LeaveRule_termExpression();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "termExpression"); }
		return retval;

	}
	// $ANTLR end "termExpression"

	private sealed partial class primaryExperession_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primaryExperession_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_primaryExperession();
	partial void LeaveRule_primaryExperession();

	// $ANTLR start "primaryExperession"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:143:1: primaryExperession : ( collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp -> ^( PRIMITIVELITERAL primitiveLiteralExp ) | enumAndType -> ^( TYPE enumAndType ) | propertyCall | '(' oclExpression ')' | ifExp | letExp );
	[GrammarRule("primaryExperession")]
	private OCLSyntaxParser.primaryExperession_return primaryExperession()
	{
		EnterRule_primaryExperession();
		EnterRule("primaryExperession", 26);
		TraceIn("primaryExperession", 26);
		OCLSyntaxParser.primaryExperession_return retval = new OCLSyntaxParser.primaryExperession_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal69 = default(CommonToken);
		CommonToken char_literal71 = default(CommonToken);
		OCLSyntaxParser.collectionLiteralExpAndType_return collectionLiteralExpAndType64 = default(OCLSyntaxParser.collectionLiteralExpAndType_return);
		OCLSyntaxParser.tupleLiteralExp_return tupleLiteralExp65 = default(OCLSyntaxParser.tupleLiteralExp_return);
		OCLSyntaxParser.primitiveLiteralExp_return primitiveLiteralExp66 = default(OCLSyntaxParser.primitiveLiteralExp_return);
		OCLSyntaxParser.enumAndType_return enumAndType67 = default(OCLSyntaxParser.enumAndType_return);
		OCLSyntaxParser.propertyCall_return propertyCall68 = default(OCLSyntaxParser.propertyCall_return);
		OCLSyntaxParser.oclExpression_return oclExpression70 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.ifExp_return ifExp72 = default(OCLSyntaxParser.ifExp_return);
		OCLSyntaxParser.letExp_return letExp73 = default(OCLSyntaxParser.letExp_return);

		object char_literal69_tree = default(object);
		object char_literal71_tree = default(object);
		RewriteRuleSubtreeStream stream_primitiveLiteralExp=new RewriteRuleSubtreeStream(adaptor,"rule primitiveLiteralExp");
		RewriteRuleSubtreeStream stream_enumAndType=new RewriteRuleSubtreeStream(adaptor,"rule enumAndType");
		try { DebugEnterRule(GrammarFileName, "primaryExperession");
		DebugLocation(143, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:144:2: ( collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp -> ^( PRIMITIVELITERAL primitiveLiteralExp ) | enumAndType -> ^( TYPE enumAndType ) | propertyCall | '(' oclExpression ')' | ifExp | letExp )
			int alt36=8;
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:148:8: collectionLiteralExpAndType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 8);
				PushFollow(Follow._collectionLiteralExpAndType_in_primaryExperession1157);
				collectionLiteralExpAndType64=collectionLiteralExpAndType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralExpAndType64.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:150:4: tupleLiteralExp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._tupleLiteralExp_in_primaryExperession1165);
				tupleLiteralExp65=tupleLiteralExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleLiteralExp65.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:152:4: primitiveLiteralExp
				{
				DebugLocation(152, 4);
				PushFollow(Follow._primitiveLiteralExp_in_primaryExperession1175);
				primitiveLiteralExp66=primitiveLiteralExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_primitiveLiteralExp.Add(primitiveLiteralExp66.Tree);


				{
				// AST REWRITE
				// elements: primitiveLiteralExp
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 153:4: -> ^( PRIMITIVELITERAL primitiveLiteralExp )
				{
					DebugLocation(153, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:153:6: ^( PRIMITIVELITERAL primitiveLiteralExp )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(153, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PRIMITIVELITERAL, "PRIMITIVELITERAL"), root_1);

					DebugLocation(153, 25);
					adaptor.AddChild(root_1, stream_primitiveLiteralExp.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:155:4: enumAndType
				{
				DebugLocation(155, 4);
				PushFollow(Follow._enumAndType_in_primaryExperession1193);
				enumAndType67=enumAndType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_enumAndType.Add(enumAndType67.Tree);


				{
				// AST REWRITE
				// elements: enumAndType
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 156:4: -> ^( TYPE enumAndType )
				{
					DebugLocation(156, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:156:6: ^( TYPE enumAndType )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(156, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TYPE, "TYPE"), root_1);

					DebugLocation(156, 13);
					adaptor.AddChild(root_1, stream_enumAndType.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:157:4: propertyCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._propertyCall_in_primaryExperession1209);
				propertyCall68=propertyCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyCall68.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:158:4: '(' oclExpression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(158, 7);
				char_literal69=(CommonToken)Match(input,61,Follow._61_in_primaryExperession1214); if (state.failed) return retval;
				DebugLocation(158, 8);
				PushFollow(Follow._oclExpression_in_primaryExperession1216);
				oclExpression70=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclExpression70.Tree);
				DebugLocation(158, 24);
				char_literal71=(CommonToken)Match(input,62,Follow._62_in_primaryExperession1217); if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:159:4: ifExp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._ifExp_in_primaryExperession1223);
				ifExp72=ifExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifExp72.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:160:4: letExp
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._letExp_in_primaryExperession1228);
				letExp73=letExp();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, letExp73.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExperession", 26);
			LeaveRule("primaryExperession", 26);
			LeaveRule_primaryExperession();
		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExperession"); }
		return retval;

	}
	// $ANTLR end "primaryExperession"

	private sealed partial class propertyCall_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyCall_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyCall();
	partial void LeaveRule_propertyCall();

	// $ANTLR start "propertyCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:162:1: propertyCall : ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )? -> ^( CALL ( propertyCallParametrs )? pathName ( ^( INDEX arguments ) )? ( isMarkedPre )? ) |it= 'iterate' '(' ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) ) '|' body= oclExpression ')' -> ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body) );
	[GrammarRule("propertyCall")]
	private OCLSyntaxParser.propertyCall_return propertyCall()
	{
		EnterRule_propertyCall();
		EnterRule("propertyCall", 27);
		TraceIn("propertyCall", 27);
		OCLSyntaxParser.propertyCall_return retval = new OCLSyntaxParser.propertyCall_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken it = default(CommonToken);
		CommonToken itName = default(CommonToken);
		CommonToken accName = default(CommonToken);
		CommonToken char_literal75 = default(CommonToken);
		CommonToken char_literal77 = default(CommonToken);
		CommonToken char_literal79 = default(CommonToken);
		CommonToken char_literal81 = default(CommonToken);
		CommonToken char_literal82 = default(CommonToken);
		CommonToken char_literal83 = default(CommonToken);
		CommonToken char_literal84 = default(CommonToken);
		CommonToken char_literal85 = default(CommonToken);
		CommonToken char_literal86 = default(CommonToken);
		CommonToken char_literal87 = default(CommonToken);
		CommonToken char_literal88 = default(CommonToken);
		CommonToken char_literal89 = default(CommonToken);
		CommonToken char_literal90 = default(CommonToken);
		OCLSyntaxParser.type_return itType = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.type_return accType = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.oclExpression_return accExpr = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return body = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.pathName_return pathName74 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.arguments_return arguments76 = default(OCLSyntaxParser.arguments_return);
		OCLSyntaxParser.isMarkedPre_return isMarkedPre78 = default(OCLSyntaxParser.isMarkedPre_return);
		OCLSyntaxParser.propertyCallParametrs_return propertyCallParametrs80 = default(OCLSyntaxParser.propertyCallParametrs_return);

		object it_tree = default(object);
		object itName_tree = default(object);
		object accName_tree = default(object);
		object char_literal75_tree = default(object);
		object char_literal77_tree = default(object);
		object char_literal79_tree = default(object);
		object char_literal81_tree = default(object);
		object char_literal82_tree = default(object);
		object char_literal83_tree = default(object);
		object char_literal84_tree = default(object);
		object char_literal85_tree = default(object);
		object char_literal86_tree = default(object);
		object char_literal87_tree = default(object);
		object char_literal88_tree = default(object);
		object char_literal89_tree = default(object);
		object char_literal90_tree = default(object);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_pathName=new RewriteRuleSubtreeStream(adaptor,"rule pathName");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		RewriteRuleSubtreeStream stream_isMarkedPre=new RewriteRuleSubtreeStream(adaptor,"rule isMarkedPre");
		RewriteRuleSubtreeStream stream_propertyCallParametrs=new RewriteRuleSubtreeStream(adaptor,"rule propertyCallParametrs");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "propertyCall");
		DebugLocation(162, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:2: ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )? -> ^( CALL ( propertyCallParametrs )? pathName ( ^( INDEX arguments ) )? ( isMarkedPre )? ) |it= 'iterate' '(' ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) ) '|' body= oclExpression ')' -> ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body) )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==SimpleName))
			{
				alt44 = 1;
			}
			else if ((LA44_0==112))
			{
				alt44 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:4: pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )?
				{
				DebugLocation(163, 4);
				PushFollow(Follow._pathName_in_propertyCall1238);
				pathName74=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_pathName.Add(pathName74.Tree);
				DebugLocation(163, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:13: ( '[' arguments ']' )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==95))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:14: '[' arguments ']'
					{
					DebugLocation(163, 14);
					char_literal75=(CommonToken)Match(input,95,Follow._95_in_propertyCall1241); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal75);

					DebugLocation(163, 17);
					PushFollow(Follow._arguments_in_propertyCall1242);
					arguments76=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_arguments.Add(arguments76.Tree);
					DebugLocation(163, 26);
					char_literal77=(CommonToken)Match(input,96,Follow._96_in_propertyCall1243); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(char_literal77);


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(163, 32);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:32: ( isMarkedPre )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==79))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:32: isMarkedPre
					{
					DebugLocation(163, 32);
					PushFollow(Follow._isMarkedPre_in_propertyCall1247);
					isMarkedPre78=isMarkedPre();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_isMarkedPre.Add(isMarkedPre78.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(163, 45);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:45: ( '(' propertyCallParametrs ')' )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==61))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:163:46: '(' propertyCallParametrs ')'
					{
					DebugLocation(163, 46);
					char_literal79=(CommonToken)Match(input,61,Follow._61_in_propertyCall1251); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal79);

					DebugLocation(163, 49);
					PushFollow(Follow._propertyCallParametrs_in_propertyCall1252);
					propertyCallParametrs80=propertyCallParametrs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_propertyCallParametrs.Add(propertyCallParametrs80.Tree);
					DebugLocation(163, 70);
					char_literal81=(CommonToken)Match(input,62,Follow._62_in_propertyCall1253); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal81);


					}
					break;

				}
				} finally { DebugExitSubRule(39); }



				{
				// AST REWRITE
				// elements: propertyCallParametrs, pathName, arguments, isMarkedPre
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 166:4: -> ^( CALL ( propertyCallParametrs )? pathName ( ^( INDEX arguments ) )? ( isMarkedPre )? )
				{
					DebugLocation(166, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:166:6: ^( CALL ( propertyCallParametrs )? pathName ( ^( INDEX arguments ) )? ( isMarkedPre )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(166, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(CALL, "CALL"), root_1);

					DebugLocation(166, 13);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:166:13: ( propertyCallParametrs )?
					if (stream_propertyCallParametrs.HasNext)
					{
						DebugLocation(166, 13);
						adaptor.AddChild(root_1, stream_propertyCallParametrs.NextTree());

					}
					stream_propertyCallParametrs.Reset();
					DebugLocation(166, 36);
					adaptor.AddChild(root_1, stream_pathName.NextTree());
					DebugLocation(166, 45);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:166:45: ( ^( INDEX arguments ) )?
					if (stream_arguments.HasNext)
					{
						DebugLocation(166, 45);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:166:45: ^( INDEX arguments )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(166, 47);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEX, "INDEX"), root_2);

						DebugLocation(166, 53);
						adaptor.AddChild(root_2, stream_arguments.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_arguments.Reset();
					DebugLocation(166, 65);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:166:65: ( isMarkedPre )?
					if (stream_isMarkedPre.HasNext)
					{
						DebugLocation(166, 65);
						adaptor.AddChild(root_1, stream_isMarkedPre.NextTree());

					}
					stream_isMarkedPre.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:171:3: it= 'iterate' '(' ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) ) '|' body= oclExpression ')'
				{
				DebugLocation(171, 5);
				it=(CommonToken)Match(input,112,Follow._112_in_propertyCall1301); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(it);

				DebugLocation(171, 16);
				char_literal82=(CommonToken)Match(input,61,Follow._61_in_propertyCall1303); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal82);

				DebugLocation(171, 20);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:171:20: ( ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) | (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression ) )
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==SimpleName))
				{
					int LA43_1 = input.LA(2);

					if ((EvaluatePredicate(synpred1_OCLSyntax_fragment)))
					{
						alt43 = 1;
					}
					else if ((true))
					{
						alt43 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 43, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:5: ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					{
					DebugLocation(172, 5);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:5: ( ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:6: ( SimpleName ( ( ':' ) type )? ';' )=>itName= SimpleName ( ( ':' ) itType= type )? ';' accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression
					{
					DebugLocation(172, 44);
					itName=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyCall1330); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(itName);

					DebugLocation(172, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:56: ( ( ':' ) itType= type )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==69))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:57: ( ':' ) itType= type
						{
						DebugLocation(172, 57);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:57: ( ':' )
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:58: ':'
						{
						DebugLocation(172, 58);
						char_literal83=(CommonToken)Match(input,69,Follow._69_in_propertyCall1334); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_69.Add(char_literal83);


						}

						DebugLocation(172, 70);
						PushFollow(Follow._type_in_propertyCall1341);
						itType=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(itType.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(172, 79);
					char_literal84=(CommonToken)Match(input,71,Follow._71_in_propertyCall1345); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal84);

					DebugLocation(172, 90);
					accName=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyCall1350); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(accName);

					DebugLocation(172, 103);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:103: ( ':' accType= type )?
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if ((LA41_0==69))
					{
						alt41 = 1;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:104: ':' accType= type
						{
						DebugLocation(172, 104);
						char_literal85=(CommonToken)Match(input,69,Follow._69_in_propertyCall1353); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_69.Add(char_literal85);

						DebugLocation(172, 116);
						PushFollow(Follow._type_in_propertyCall1359);
						accType=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(accType.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(41); }

					DebugLocation(172, 124);
					char_literal86=(CommonToken)Match(input,75,Follow._75_in_propertyCall1362); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(char_literal86);

					DebugLocation(172, 136);
					PushFollow(Follow._oclExpression_in_propertyCall1368);
					accExpr=oclExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_oclExpression.Add(accExpr.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:173:7: (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					{
					DebugLocation(173, 7);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:173:7: (accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:173:8: accName= SimpleName ( ':' accType= type )? '=' accExpr= oclExpression
					{
					DebugLocation(173, 16);
					accName=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_propertyCall1384); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(accName);

					DebugLocation(173, 29);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:173:29: ( ':' accType= type )?
					int alt42=2;
					try { DebugEnterSubRule(42);
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==69))
					{
						alt42 = 1;
					}
					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:173:30: ':' accType= type
						{
						DebugLocation(173, 30);
						char_literal87=(CommonToken)Match(input,69,Follow._69_in_propertyCall1387); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_69.Add(char_literal87);

						DebugLocation(173, 42);
						PushFollow(Follow._type_in_propertyCall1392);
						accType=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type.Add(accType.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(42); }

					DebugLocation(173, 49);
					char_literal88=(CommonToken)Match(input,75,Follow._75_in_propertyCall1395); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(char_literal88);

					DebugLocation(173, 62);
					PushFollow(Follow._oclExpression_in_propertyCall1401);
					accExpr=oclExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_oclExpression.Add(accExpr.Tree);

					}


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(175, 4);
				char_literal89=(CommonToken)Match(input,123,Follow._123_in_propertyCall1413); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal89);

				DebugLocation(175, 13);
				PushFollow(Follow._oclExpression_in_propertyCall1419);
				body=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(body.Tree);
				DebugLocation(175, 29);
				char_literal90=(CommonToken)Match(input,62,Follow._62_in_propertyCall1421); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal90);



				{
				// AST REWRITE
				// elements: itName, itType, accName, accType, accExpr, body
				// token labels: itName, accName
				// rule labels: itType, accType, accExpr, body, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_itName=new RewriteRuleITokenStream(adaptor,"token itName",itName);
				RewriteRuleITokenStream stream_accName=new RewriteRuleITokenStream(adaptor,"token accName",accName);
				RewriteRuleSubtreeStream stream_itType=new RewriteRuleSubtreeStream(adaptor,"rule itType",itType!=null?itType.Tree:null);
				RewriteRuleSubtreeStream stream_accType=new RewriteRuleSubtreeStream(adaptor,"rule accType",accType!=null?accType.Tree:null);
				RewriteRuleSubtreeStream stream_accExpr=new RewriteRuleSubtreeStream(adaptor,"rule accExpr",accExpr!=null?accExpr.Tree:null);
				RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body",body!=null?body.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 176:3: -> ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body)
				{
					DebugLocation(176, 5);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:176:5: ^( ITERATE[$it] ( ^( DECL $itName ( $itType)? ) )? ^( ACC $accName ( $accType)? $accExpr) $body)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(176, 7);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ITERATE, it), root_1);

					DebugLocation(176, 21);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:176:21: ( ^( DECL $itName ( $itType)? ) )?
					if (stream_itName.HasNext||stream_itType.HasNext)
					{
						DebugLocation(176, 21);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:176:21: ^( DECL $itName ( $itType)? )
						{
						object root_2 = (object)adaptor.Nil();
						DebugLocation(176, 23);
						root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_2);

						DebugLocation(176, 29);
						adaptor.AddChild(root_2, stream_itName.NextNode());
						DebugLocation(176, 37);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:176:37: ( $itType)?
						if (stream_itType.HasNext)
						{
							DebugLocation(176, 37);
							adaptor.AddChild(root_2, stream_itType.NextTree());

						}
						stream_itType.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_itName.Reset();
					stream_itType.Reset();
					DebugLocation(176, 47);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:176:47: ^( ACC $accName ( $accType)? $accExpr)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(176, 49);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(ACC, "ACC"), root_2);

					DebugLocation(176, 54);
					adaptor.AddChild(root_2, stream_accName.NextNode());
					DebugLocation(176, 63);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:176:63: ( $accType)?
					if (stream_accType.HasNext)
					{
						DebugLocation(176, 63);
						adaptor.AddChild(root_2, stream_accType.NextTree());

					}
					stream_accType.Reset();
					DebugLocation(176, 73);
					adaptor.AddChild(root_2, stream_accExpr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(176, 83);
					adaptor.AddChild(root_1, stream_body.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyCall", 27);
			LeaveRule("propertyCall", 27);
			LeaveRule_propertyCall();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCall"); }
		return retval;

	}
	// $ANTLR end "propertyCall"

	private sealed partial class propertyCallParametrs_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public propertyCallParametrs_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_propertyCallParametrs();
	partial void LeaveRule_propertyCallParametrs();

	// $ANTLR start "propertyCallParametrs"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:180:1: propertyCallParametrs : ( declarePropertyCallParametrs )? ( arguments )? -> ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? ) ;
	[GrammarRule("propertyCallParametrs")]
	private OCLSyntaxParser.propertyCallParametrs_return propertyCallParametrs()
	{
		EnterRule_propertyCallParametrs();
		EnterRule("propertyCallParametrs", 28);
		TraceIn("propertyCallParametrs", 28);
		OCLSyntaxParser.propertyCallParametrs_return retval = new OCLSyntaxParser.propertyCallParametrs_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.declarePropertyCallParametrs_return declarePropertyCallParametrs91 = default(OCLSyntaxParser.declarePropertyCallParametrs_return);
		OCLSyntaxParser.arguments_return arguments92 = default(OCLSyntaxParser.arguments_return);

		RewriteRuleSubtreeStream stream_declarePropertyCallParametrs=new RewriteRuleSubtreeStream(adaptor,"rule declarePropertyCallParametrs");
		RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
		try { DebugEnterRule(GrammarFileName, "propertyCallParametrs");
		DebugLocation(180, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:2: ( ( declarePropertyCallParametrs )? ( arguments )? -> ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:4: ( declarePropertyCallParametrs )? ( arguments )?
			{
			DebugLocation(181, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:4: ( declarePropertyCallParametrs )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==SimpleName))
			{
				int LA45_1 = input.LA(2);

				if ((LA45_1==69||LA45_1==123))
				{
					alt45 = 1;
				}
				else if ((LA45_1==64))
				{
					int LA45_4 = input.LA(3);

					if ((LA45_4==SimpleName))
					{
						int LA45_5 = input.LA(4);

						if ((LA45_5==69||LA45_5==123))
						{
							alt45 = 1;
						}
					}
				}
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:4: declarePropertyCallParametrs
				{
				DebugLocation(181, 4);
				PushFollow(Follow._declarePropertyCallParametrs_in_propertyCallParametrs1477);
				declarePropertyCallParametrs91=declarePropertyCallParametrs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declarePropertyCallParametrs.Add(declarePropertyCallParametrs91.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(181, 34);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:34: ( arguments )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if (((LA46_0>=IntegerLiteralExp && LA46_0<=InvalidLiteralExp)||LA46_0==NullLiteralExp||(LA46_0>=RealLiteralExp && LA46_0<=SimpleName)||LA46_0==StringLiteralExp||LA46_0==UnlimitedNaturalLiteralExp||LA46_0==61||LA46_0==65||(LA46_0>=80 && LA46_0<=94)||(LA46_0>=106 && LA46_0<=107)||(LA46_0>=112 && LA46_0<=114)||LA46_0==120))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:34: arguments
				{
				DebugLocation(181, 34);
				PushFollow(Follow._arguments_in_propertyCallParametrs1480);
				arguments92=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arguments.Add(arguments92.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: declarePropertyCallParametrs, arguments
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 181:45: -> ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? )
			{
				DebugLocation(181, 48);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:48: ^( ARGS ( declarePropertyCallParametrs )? ( arguments )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(181, 50);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARGS, "ARGS"), root_1);

				DebugLocation(181, 55);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:55: ( declarePropertyCallParametrs )?
				if (stream_declarePropertyCallParametrs.HasNext)
				{
					DebugLocation(181, 55);
					adaptor.AddChild(root_1, stream_declarePropertyCallParametrs.NextTree());

				}
				stream_declarePropertyCallParametrs.Reset();
				DebugLocation(181, 85);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:181:85: ( arguments )?
				if (stream_arguments.HasNext)
				{
					DebugLocation(181, 85);
					adaptor.AddChild(root_1, stream_arguments.NextTree());

				}
				stream_arguments.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyCallParametrs", 28);
			LeaveRule("propertyCallParametrs", 28);
			LeaveRule_propertyCallParametrs();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCallParametrs"); }
		return retval;

	}
	// $ANTLR end "propertyCallParametrs"

	private sealed partial class declarePropertyCallParametrs_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public declarePropertyCallParametrs_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_declarePropertyCallParametrs();
	partial void LeaveRule_declarePropertyCallParametrs();

	// $ANTLR start "declarePropertyCallParametrs"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:185:1: declarePropertyCallParametrs : (t1= typedef ( ',' t2= typedef )? '|' ) -> ^( VARDECL $t1 ( $t2)? ) ;
	[GrammarRule("declarePropertyCallParametrs")]
	private OCLSyntaxParser.declarePropertyCallParametrs_return declarePropertyCallParametrs()
	{
		EnterRule_declarePropertyCallParametrs();
		EnterRule("declarePropertyCallParametrs", 29);
		TraceIn("declarePropertyCallParametrs", 29);
		OCLSyntaxParser.declarePropertyCallParametrs_return retval = new OCLSyntaxParser.declarePropertyCallParametrs_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal93 = default(CommonToken);
		CommonToken char_literal94 = default(CommonToken);
		OCLSyntaxParser.typedef_return t1 = default(OCLSyntaxParser.typedef_return);
		OCLSyntaxParser.typedef_return t2 = default(OCLSyntaxParser.typedef_return);

		object char_literal93_tree = default(object);
		object char_literal94_tree = default(object);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_typedef=new RewriteRuleSubtreeStream(adaptor,"rule typedef");
		try { DebugEnterRule(GrammarFileName, "declarePropertyCallParametrs");
		DebugLocation(185, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:186:2: ( (t1= typedef ( ',' t2= typedef )? '|' ) -> ^( VARDECL $t1 ( $t2)? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:186:4: (t1= typedef ( ',' t2= typedef )? '|' )
			{
			DebugLocation(186, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:186:4: (t1= typedef ( ',' t2= typedef )? '|' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:186:6: t1= typedef ( ',' t2= typedef )? '|'
			{
			DebugLocation(186, 8);
			PushFollow(Follow._typedef_in_declarePropertyCallParametrs1514);
			t1=typedef();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_typedef.Add(t1.Tree);
			DebugLocation(186, 17);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:186:17: ( ',' t2= typedef )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==64))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:186:18: ',' t2= typedef
				{
				DebugLocation(186, 18);
				char_literal93=(CommonToken)Match(input,64,Follow._64_in_declarePropertyCallParametrs1517); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_64.Add(char_literal93);

				DebugLocation(186, 24);
				PushFollow(Follow._typedef_in_declarePropertyCallParametrs1521);
				t2=typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_typedef.Add(t2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(186, 35);
			char_literal94=(CommonToken)Match(input,123,Follow._123_in_declarePropertyCallParametrs1525); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(char_literal94);


			}



			{
			// AST REWRITE
			// elements: t1, t2
			// token labels: 
			// rule labels: t1, t2, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"rule t1",t1!=null?t1.Tree:null);
			RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"rule t2",t2!=null?t2.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 187:3: -> ^( VARDECL $t1 ( $t2)? )
			{
				DebugLocation(187, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:187:6: ^( VARDECL $t1 ( $t2)? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(187, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(VARDECL, "VARDECL"), root_1);

				DebugLocation(187, 17);
				adaptor.AddChild(root_1, stream_t1.NextTree());
				DebugLocation(187, 21);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:187:21: ( $t2)?
				if (stream_t2.HasNext)
				{
					DebugLocation(187, 21);
					adaptor.AddChild(root_1, stream_t2.NextTree());

				}
				stream_t2.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarePropertyCallParametrs", 29);
			LeaveRule("declarePropertyCallParametrs", 29);
			LeaveRule_declarePropertyCallParametrs();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "declarePropertyCallParametrs"); }
		return retval;

	}
	// $ANTLR end "declarePropertyCallParametrs"

	private sealed partial class typedef_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public typedef_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_typedef();
	partial void LeaveRule_typedef();

	// $ANTLR start "typedef"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:190:1: typedef : SimpleName ( ':' type )? -> ^( DECL SimpleName ( type )? ) ;
	[GrammarRule("typedef")]
	private OCLSyntaxParser.typedef_return typedef()
	{
		EnterRule_typedef();
		EnterRule("typedef", 30);
		TraceIn("typedef", 30);
		OCLSyntaxParser.typedef_return retval = new OCLSyntaxParser.typedef_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken SimpleName95 = default(CommonToken);
		CommonToken char_literal96 = default(CommonToken);
		OCLSyntaxParser.type_return type97 = default(OCLSyntaxParser.type_return);

		object SimpleName95_tree = default(object);
		object char_literal96_tree = default(object);
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "typedef");
		DebugLocation(190, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:191:2: ( SimpleName ( ':' type )? -> ^( DECL SimpleName ( type )? ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:191:4: SimpleName ( ':' type )?
			{
			DebugLocation(191, 4);
			SimpleName95=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_typedef1553); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SimpleName.Add(SimpleName95);

			DebugLocation(191, 14);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:191:14: ( ':' type )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==69))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:191:15: ':' type
				{
				DebugLocation(191, 15);
				char_literal96=(CommonToken)Match(input,69,Follow._69_in_typedef1555); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal96);

				DebugLocation(191, 18);
				PushFollow(Follow._type_in_typedef1556);
				type97=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type97.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }



			{
			// AST REWRITE
			// elements: SimpleName, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 192:3: -> ^( DECL SimpleName ( type )? )
			{
				DebugLocation(192, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:192:6: ^( DECL SimpleName ( type )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(192, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

				DebugLocation(192, 13);
				adaptor.AddChild(root_1, stream_SimpleName.NextNode());
				DebugLocation(192, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:192:24: ( type )?
				if (stream_type.HasNext)
				{
					DebugLocation(192, 24);
					adaptor.AddChild(root_1, stream_type.NextTree());

				}
				stream_type.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typedef", 30);
			LeaveRule("typedef", 30);
			LeaveRule_typedef();
		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "typedef"); }
		return retval;

	}
	// $ANTLR end "typedef"

	private sealed partial class enumAndType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public enumAndType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_enumAndType();
	partial void LeaveRule_enumAndType();

	// $ANTLR start "enumAndType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:195:1: enumAndType : ( tupleType tupleType | primitiveType primitiveType | oclType oclType );
	[GrammarRule("enumAndType")]
	private OCLSyntaxParser.enumAndType_return enumAndType()
	{
		EnterRule_enumAndType();
		EnterRule("enumAndType", 31);
		TraceIn("enumAndType", 31);
		OCLSyntaxParser.enumAndType_return retval = new OCLSyntaxParser.enumAndType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.tupleType_return tupleType98 = default(OCLSyntaxParser.tupleType_return);
		OCLSyntaxParser.tupleType_return tupleType99 = default(OCLSyntaxParser.tupleType_return);
		OCLSyntaxParser.primitiveType_return primitiveType100 = default(OCLSyntaxParser.primitiveType_return);
		OCLSyntaxParser.primitiveType_return primitiveType101 = default(OCLSyntaxParser.primitiveType_return);
		OCLSyntaxParser.oclType_return oclType102 = default(OCLSyntaxParser.oclType_return);
		OCLSyntaxParser.oclType_return oclType103 = default(OCLSyntaxParser.oclType_return);


		try { DebugEnterRule(GrammarFileName, "enumAndType");
		DebugLocation(195, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:199:2: ( tupleType tupleType | primitiveType primitiveType | oclType oclType )
			int alt49=3;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case 93:
				{
				alt49 = 1;
				}
				break;
			case 81:
			case 83:
			case 89:
			case 92:
			case 94:
				{
				alt49 = 2;
				}
				break;
			case 84:
			case 85:
			case 86:
			case 87:
				{
				alt49 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:199:4: tupleType tupleType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(199, 4);
				PushFollow(Follow._tupleType_in_enumAndType1593);
				tupleType98=tupleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleType98.Tree);
				DebugLocation(200, 4);
				PushFollow(Follow._tupleType_in_enumAndType1601);
				tupleType99=tupleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleType99.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:201:4: primitiveType primitiveType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(201, 4);
				PushFollow(Follow._primitiveType_in_enumAndType1606);
				primitiveType100=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType100.Tree);
				DebugLocation(202, 4);
				PushFollow(Follow._primitiveType_in_enumAndType1611);
				primitiveType101=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType101.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:203:4: oclType oclType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(203, 4);
				PushFollow(Follow._oclType_in_enumAndType1616);
				oclType102=oclType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclType102.Tree);
				DebugLocation(204, 3);
				PushFollow(Follow._oclType_in_enumAndType1620);
				oclType103=oclType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclType103.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumAndType", 31);
			LeaveRule("enumAndType", 31);
			LeaveRule_enumAndType();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "enumAndType"); }
		return retval;

	}
	// $ANTLR end "enumAndType"

	private sealed partial class pathName_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pathName_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_pathName();
	partial void LeaveRule_pathName();

	// $ANTLR start "pathName"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:210:1: pathName : SimpleName ( '::' SimpleName )* -> ^( PATH ( SimpleName )+ ) ;
	[GrammarRule("pathName")]
	private OCLSyntaxParser.pathName_return pathName()
	{
		EnterRule_pathName();
		EnterRule("pathName", 32);
		TraceIn("pathName", 32);
		OCLSyntaxParser.pathName_return retval = new OCLSyntaxParser.pathName_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken SimpleName104 = default(CommonToken);
		CommonToken string_literal105 = default(CommonToken);
		CommonToken SimpleName106 = default(CommonToken);

		object SimpleName104_tree = default(object);
		object string_literal105_tree = default(object);
		object SimpleName106_tree = default(object);
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");

		try { DebugEnterRule(GrammarFileName, "pathName");
		DebugLocation(210, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:212:2: ( SimpleName ( '::' SimpleName )* -> ^( PATH ( SimpleName )+ ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:212:4: SimpleName ( '::' SimpleName )*
			{
			DebugLocation(212, 4);
			SimpleName104=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_pathName1637); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SimpleName.Add(SimpleName104);

			DebugLocation(212, 15);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:212:15: ( '::' SimpleName )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==70))
				{
					int LA50_2 = input.LA(2);

					if ((LA50_2==SimpleName))
					{
						int LA50_3 = input.LA(3);

						if ((LA50_3==EOF))
						{
							alt50 = 1;
						}
						else if ((LA50_3==DoubleDot||LA50_3==UnlimitedNaturalLiteralExp||(LA50_3>=61 && LA50_3<=68)||(LA50_3>=70 && LA50_3<=77)||LA50_3==79||(LA50_3>=95 && LA50_3<=105)||(LA50_3>=108 && LA50_3<=111)||(LA50_3>=115 && LA50_3<=119)||LA50_3==121||(LA50_3>=123 && LA50_3<=124)))
						{
							alt50 = 1;
						}


					}


				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:212:16: '::' SimpleName
					{
					DebugLocation(212, 16);
					string_literal105=(CommonToken)Match(input,70,Follow._70_in_pathName1640); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal105);

					DebugLocation(212, 21);
					SimpleName106=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_pathName1642); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SimpleName.Add(SimpleName106);


					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: SimpleName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 213:3: -> ^( PATH ( SimpleName )+ )
			{
				DebugLocation(213, 6);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:213:6: ^( PATH ( SimpleName )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(213, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PATH, "PATH"), root_1);

				DebugLocation(213, 13);
				if (!(stream_SimpleName.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_SimpleName.HasNext )
				{
					DebugLocation(213, 13);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());

				}
				stream_SimpleName.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pathName", 32);
			LeaveRule("pathName", 32);
			LeaveRule_pathName();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "pathName"); }
		return retval;

	}
	// $ANTLR end "pathName"

	private sealed partial class collectionLiteralExpAndType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralExpAndType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralExpAndType();
	partial void LeaveRule_collectionLiteralExpAndType();

	// $ANTLR start "collectionLiteralExpAndType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:217:1: collectionLiteralExpAndType : ( collectionTypeIdentifier ( '{' ( collectionLiteralParts )? '}' )? -> ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | collectionTypeIdentifier ( '(' type ')' ) ( ( '{' collectionLiteralParts '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) ) );
	[GrammarRule("collectionLiteralExpAndType")]
	private OCLSyntaxParser.collectionLiteralExpAndType_return collectionLiteralExpAndType()
	{
		EnterRule_collectionLiteralExpAndType();
		EnterRule("collectionLiteralExpAndType", 33);
		TraceIn("collectionLiteralExpAndType", 33);
		OCLSyntaxParser.collectionLiteralExpAndType_return retval = new OCLSyntaxParser.collectionLiteralExpAndType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal108 = default(CommonToken);
		CommonToken char_literal110 = default(CommonToken);
		CommonToken char_literal112 = default(CommonToken);
		CommonToken char_literal114 = default(CommonToken);
		CommonToken char_literal115 = default(CommonToken);
		CommonToken char_literal117 = default(CommonToken);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier107 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts109 = default(OCLSyntaxParser.collectionLiteralParts_return);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier111 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.type_return type113 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts116 = default(OCLSyntaxParser.collectionLiteralParts_return);

		object char_literal108_tree = default(object);
		object char_literal110_tree = default(object);
		object char_literal112_tree = default(object);
		object char_literal114_tree = default(object);
		object char_literal115_tree = default(object);
		object char_literal117_tree = default(object);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleSubtreeStream stream_collectionTypeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule collectionTypeIdentifier");
		RewriteRuleSubtreeStream stream_collectionLiteralParts=new RewriteRuleSubtreeStream(adaptor,"rule collectionLiteralParts");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "collectionLiteralExpAndType");
		DebugLocation(217, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:219:2: ( collectionTypeIdentifier ( '{' ( collectionLiteralParts )? '}' )? -> ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts ) | collectionTypeIdentifier ( '(' type ')' ) ( ( '{' collectionLiteralParts '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) ) )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==80||LA54_0==82||LA54_0==88||(LA54_0>=90 && LA54_0<=91)))
			{
				int LA54_1 = input.LA(2);

				if ((LA54_1==EOF||LA54_1==DoubleDot||LA54_1==UnlimitedNaturalLiteralExp||(LA54_1>=62 && LA54_1<=68)||(LA54_1>=72 && LA54_1<=77)||(LA54_1>=96 && LA54_1<=105)||(LA54_1>=108 && LA54_1<=111)||(LA54_1>=115 && LA54_1<=119)||(LA54_1>=121 && LA54_1<=124)))
				{
					alt54 = 1;
				}
				else if ((LA54_1==61))
				{
					alt54 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:219:3: collectionTypeIdentifier ( '{' ( collectionLiteralParts )? '}' )?
				{
				DebugLocation(219, 3);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExpAndType1671);
				collectionTypeIdentifier107=collectionTypeIdentifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_collectionTypeIdentifier.Add(collectionTypeIdentifier107.Tree);
				DebugLocation(219, 28);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:219:28: ( '{' ( collectionLiteralParts )? '}' )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==122))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:219:29: '{' ( collectionLiteralParts )? '}'
					{
					DebugLocation(219, 29);
					char_literal108=(CommonToken)Match(input,122,Follow._122_in_collectionLiteralExpAndType1674); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_122.Add(char_literal108);

					DebugLocation(219, 33);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:219:33: ( collectionLiteralParts )?
					int alt51=2;
					try { DebugEnterSubRule(51);
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if (((LA51_0>=IntegerLiteralExp && LA51_0<=InvalidLiteralExp)||LA51_0==NullLiteralExp||(LA51_0>=RealLiteralExp && LA51_0<=SimpleName)||LA51_0==StringLiteralExp||LA51_0==UnlimitedNaturalLiteralExp||LA51_0==61||LA51_0==65||(LA51_0>=80 && LA51_0<=94)||(LA51_0>=106 && LA51_0<=107)||(LA51_0>=112 && LA51_0<=114)||LA51_0==120))
					{
						alt51 = 1;
					}
					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:219:33: collectionLiteralParts
						{
						DebugLocation(219, 33);
						PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExpAndType1676);
						collectionLiteralParts109=collectionLiteralParts();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_collectionLiteralParts.Add(collectionLiteralParts109.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(51); }

					DebugLocation(219, 57);
					char_literal110=(CommonToken)Match(input,124,Follow._124_in_collectionLiteralExpAndType1679); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(char_literal110);


					}
					break;

				}
				} finally { DebugExitSubRule(52); }



				{
				// AST REWRITE
				// elements: collectionTypeIdentifier, collectionLiteralParts
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 220:3: -> ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts )
				{
					DebugLocation(220, 6);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:220:6: ^( COLLECTIONLITERAL collectionTypeIdentifier collectionLiteralParts )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(220, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLECTIONLITERAL, "COLLECTIONLITERAL"), root_1);

					DebugLocation(220, 26);
					adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
					DebugLocation(220, 51);
					adaptor.AddChild(root_1, stream_collectionLiteralParts.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:222:4: collectionTypeIdentifier ( '(' type ')' ) ( ( '{' collectionLiteralParts '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) )
				{
				DebugLocation(222, 4);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExpAndType1700);
				collectionTypeIdentifier111=collectionTypeIdentifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_collectionTypeIdentifier.Add(collectionTypeIdentifier111.Tree);
				DebugLocation(222, 29);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:222:29: ( '(' type ')' )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:222:30: '(' type ')'
				{
				DebugLocation(222, 30);
				char_literal112=(CommonToken)Match(input,61,Follow._61_in_collectionLiteralExpAndType1703); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal112);

				DebugLocation(222, 34);
				PushFollow(Follow._type_in_collectionLiteralExpAndType1705);
				type113=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type113.Tree);
				DebugLocation(222, 40);
				char_literal114=(CommonToken)Match(input,62,Follow._62_in_collectionLiteralExpAndType1708); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal114);


				}

				DebugLocation(223, 2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:223:2: ( ( '{' collectionLiteralParts '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) ) | -> ^( COLLTYPE collectionTypeIdentifier type ) )
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==122))
				{
					alt53 = 1;
				}
				else if ((LA53_0==EOF||LA53_0==DoubleDot||LA53_0==UnlimitedNaturalLiteralExp||(LA53_0>=62 && LA53_0<=68)||(LA53_0>=72 && LA53_0<=77)||(LA53_0>=96 && LA53_0<=105)||(LA53_0>=108 && LA53_0<=111)||(LA53_0>=115 && LA53_0<=119)||LA53_0==121||(LA53_0>=123 && LA53_0<=124)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:224:3: ( '{' collectionLiteralParts '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) )
					{
					DebugLocation(224, 3);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:224:3: ( '{' collectionLiteralParts '}' -> ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts ) )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:224:4: '{' collectionLiteralParts '}'
					{
					DebugLocation(224, 4);
					char_literal115=(CommonToken)Match(input,122,Follow._122_in_collectionLiteralExpAndType1718); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_122.Add(char_literal115);

					DebugLocation(224, 8);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExpAndType1720);
					collectionLiteralParts116=collectionLiteralParts();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_collectionLiteralParts.Add(collectionLiteralParts116.Tree);
					DebugLocation(224, 31);
					char_literal117=(CommonToken)Match(input,124,Follow._124_in_collectionLiteralExpAndType1722); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(char_literal117);



					{
					// AST REWRITE
					// elements: collectionTypeIdentifier, type, collectionLiteralParts
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 225:4: -> ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts )
					{
						DebugLocation(225, 7);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:225:7: ^( COLLECTIONLITERAL collectionTypeIdentifier type collectionLiteralParts )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(225, 9);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLECTIONLITERAL, "COLLECTIONLITERAL"), root_1);

						DebugLocation(225, 27);
						adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
						DebugLocation(225, 52);
						adaptor.AddChild(root_1, stream_type.NextTree());
						DebugLocation(225, 57);
						adaptor.AddChild(root_1, stream_collectionLiteralParts.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:227:5: 
					{

					{
					// AST REWRITE
					// elements: collectionTypeIdentifier, type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 227:5: -> ^( COLLTYPE collectionTypeIdentifier type )
					{
						DebugLocation(227, 7);
						// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:227:7: ^( COLLTYPE collectionTypeIdentifier type )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(227, 9);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLTYPE, "COLLTYPE"), root_1);

						DebugLocation(227, 18);
						adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
						DebugLocation(227, 43);
						adaptor.AddChild(root_1, stream_type.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralExpAndType", 33);
			LeaveRule("collectionLiteralExpAndType", 33);
			LeaveRule_collectionLiteralExpAndType();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExpAndType"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralExpAndType"

	private sealed partial class enumLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public enumLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_enumLiteralExp();
	partial void LeaveRule_enumLiteralExp();

	// $ANTLR start "enumLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:231:1: enumLiteralExp : pathName '::' SimpleName ;
	[GrammarRule("enumLiteralExp")]
	private OCLSyntaxParser.enumLiteralExp_return enumLiteralExp()
	{
		EnterRule_enumLiteralExp();
		EnterRule("enumLiteralExp", 34);
		TraceIn("enumLiteralExp", 34);
		OCLSyntaxParser.enumLiteralExp_return retval = new OCLSyntaxParser.enumLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal119 = default(CommonToken);
		CommonToken SimpleName120 = default(CommonToken);
		OCLSyntaxParser.pathName_return pathName118 = default(OCLSyntaxParser.pathName_return);

		object string_literal119_tree = default(object);
		object SimpleName120_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "enumLiteralExp");
		DebugLocation(231, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:232:2: ( pathName '::' SimpleName )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:232:3: pathName '::' SimpleName
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(232, 3);
			PushFollow(Follow._pathName_in_enumLiteralExp1769);
			pathName118=pathName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, pathName118.Tree);
			DebugLocation(232, 11);
			string_literal119=(CommonToken)Match(input,70,Follow._70_in_enumLiteralExp1770); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal119_tree = (object)adaptor.Create(string_literal119);
			adaptor.AddChild(root_0, string_literal119_tree);
			}
			DebugLocation(232, 16);
			SimpleName120=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_enumLiteralExp1772); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SimpleName120_tree = (object)adaptor.Create(SimpleName120);
			adaptor.AddChild(root_0, SimpleName120_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumLiteralExp", 34);
			LeaveRule("enumLiteralExp", 34);
			LeaveRule_enumLiteralExp();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "enumLiteralExp"); }
		return retval;

	}
	// $ANTLR end "enumLiteralExp"

	private sealed partial class collectionLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralExp();
	partial void LeaveRule_collectionLiteralExp();

	// $ANTLR start "collectionLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:235:1: collectionLiteralExp : ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' );
	[GrammarRule("collectionLiteralExp")]
	private OCLSyntaxParser.collectionLiteralExp_return collectionLiteralExp()
	{
		EnterRule_collectionLiteralExp();
		EnterRule("collectionLiteralExp", 35);
		TraceIn("collectionLiteralExp", 35);
		OCLSyntaxParser.collectionLiteralExp_return retval = new OCLSyntaxParser.collectionLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal122 = default(CommonToken);
		CommonToken char_literal124 = default(CommonToken);
		CommonToken char_literal126 = default(CommonToken);
		CommonToken char_literal128 = default(CommonToken);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier121 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts123 = default(OCLSyntaxParser.collectionLiteralParts_return);
		OCLSyntaxParser.collectionType_return collectionType125 = default(OCLSyntaxParser.collectionType_return);
		OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts127 = default(OCLSyntaxParser.collectionLiteralParts_return);

		object char_literal122_tree = default(object);
		object char_literal124_tree = default(object);
		object char_literal126_tree = default(object);
		object char_literal128_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralExp");
		DebugLocation(235, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:236:2: ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==80||LA57_0==82||LA57_0==88||(LA57_0>=90 && LA57_0<=91)))
			{
				int LA57_1 = input.LA(2);

				if ((LA57_1==122))
				{
					alt57 = 1;
				}
				else if ((LA57_1==61))
				{
					alt57 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:236:3: collectionTypeIdentifier '{' ( collectionLiteralParts )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 3);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp1784);
				collectionTypeIdentifier121=collectionTypeIdentifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionTypeIdentifier121.Tree);
				DebugLocation(236, 29);
				char_literal122=(CommonToken)Match(input,122,Follow._122_in_collectionLiteralExp1787); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal122_tree = (object)adaptor.Create(char_literal122);
				adaptor.AddChild(root_0, char_literal122_tree);
				}
				DebugLocation(236, 33);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:236:33: ( collectionLiteralParts )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if (((LA55_0>=IntegerLiteralExp && LA55_0<=InvalidLiteralExp)||LA55_0==NullLiteralExp||(LA55_0>=RealLiteralExp && LA55_0<=SimpleName)||LA55_0==StringLiteralExp||LA55_0==UnlimitedNaturalLiteralExp||LA55_0==61||LA55_0==65||(LA55_0>=80 && LA55_0<=94)||(LA55_0>=106 && LA55_0<=107)||(LA55_0>=112 && LA55_0<=114)||LA55_0==120))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:236:33: collectionLiteralParts
					{
					DebugLocation(236, 33);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1789);
					collectionLiteralParts123=collectionLiteralParts();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralParts123.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(236, 57);
				char_literal124=(CommonToken)Match(input,124,Follow._124_in_collectionLiteralExp1792); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal124_tree = (object)adaptor.Create(char_literal124);
				adaptor.AddChild(root_0, char_literal124_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:237:3: collectionType '{' ( collectionLiteralParts )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(237, 3);
				PushFollow(Follow._collectionType_in_collectionLiteralExp1796);
				collectionType125=collectionType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionType125.Tree);
				DebugLocation(237, 18);
				char_literal126=(CommonToken)Match(input,122,Follow._122_in_collectionLiteralExp1798); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal126_tree = (object)adaptor.Create(char_literal126);
				adaptor.AddChild(root_0, char_literal126_tree);
				}
				DebugLocation(237, 22);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:237:22: ( collectionLiteralParts )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if (((LA56_0>=IntegerLiteralExp && LA56_0<=InvalidLiteralExp)||LA56_0==NullLiteralExp||(LA56_0>=RealLiteralExp && LA56_0<=SimpleName)||LA56_0==StringLiteralExp||LA56_0==UnlimitedNaturalLiteralExp||LA56_0==61||LA56_0==65||(LA56_0>=80 && LA56_0<=94)||(LA56_0>=106 && LA56_0<=107)||(LA56_0>=112 && LA56_0<=114)||LA56_0==120))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:237:22: collectionLiteralParts
					{
					DebugLocation(237, 22);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1800);
					collectionLiteralParts127=collectionLiteralParts();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralParts127.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(237, 46);
				char_literal128=(CommonToken)Match(input,124,Follow._124_in_collectionLiteralExp1803); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal128_tree = (object)adaptor.Create(char_literal128);
				adaptor.AddChild(root_0, char_literal128_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralExp", 35);
			LeaveRule("collectionLiteralExp", 35);
			LeaveRule_collectionLiteralExp();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExp"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralExp"

	private sealed partial class collectionTypeIdentifier_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionTypeIdentifier_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionTypeIdentifier();
	partial void LeaveRule_collectionTypeIdentifier();

	// $ANTLR start "collectionTypeIdentifier"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:245:1: collectionTypeIdentifier : ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' );
	[GrammarRule("collectionTypeIdentifier")]
	private OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier()
	{
		EnterRule_collectionTypeIdentifier();
		EnterRule("collectionTypeIdentifier", 36);
		TraceIn("collectionTypeIdentifier", 36);
		OCLSyntaxParser.collectionTypeIdentifier_return retval = new OCLSyntaxParser.collectionTypeIdentifier_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set129 = default(CommonToken);

		object set129_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collectionTypeIdentifier");
		DebugLocation(245, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:246:2: ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(246, 2);
			set129=(CommonToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==82||input.LA(1)==88||(input.LA(1)>=90 && input.LA(1)<=91))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set129));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionTypeIdentifier", 36);
			LeaveRule("collectionTypeIdentifier", 36);
			LeaveRule_collectionTypeIdentifier();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionTypeIdentifier"); }
		return retval;

	}
	// $ANTLR end "collectionTypeIdentifier"

	private sealed partial class collectionLiteralParts_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralParts_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralParts();
	partial void LeaveRule_collectionLiteralParts();

	// $ANTLR start "collectionLiteralParts"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:253:1: collectionLiteralParts : collectionLiteralPart ( ',' collectionLiteralPart )* ;
	[GrammarRule("collectionLiteralParts")]
	private OCLSyntaxParser.collectionLiteralParts_return collectionLiteralParts()
	{
		EnterRule_collectionLiteralParts();
		EnterRule("collectionLiteralParts", 37);
		TraceIn("collectionLiteralParts", 37);
		OCLSyntaxParser.collectionLiteralParts_return retval = new OCLSyntaxParser.collectionLiteralParts_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal131 = default(CommonToken);
		OCLSyntaxParser.collectionLiteralPart_return collectionLiteralPart130 = default(OCLSyntaxParser.collectionLiteralPart_return);
		OCLSyntaxParser.collectionLiteralPart_return collectionLiteralPart132 = default(OCLSyntaxParser.collectionLiteralPart_return);

		object char_literal131_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralParts");
		DebugLocation(253, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:254:2: ( collectionLiteralPart ( ',' collectionLiteralPart )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:254:4: collectionLiteralPart ( ',' collectionLiteralPart )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(254, 4);
			PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts1850);
			collectionLiteralPart130=collectionLiteralPart();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralPart130.Tree);
			DebugLocation(254, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:254:26: ( ',' collectionLiteralPart )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==64))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:254:28: ',' collectionLiteralPart
					{
					DebugLocation(254, 31);
					char_literal131=(CommonToken)Match(input,64,Follow._64_in_collectionLiteralParts1854); if (state.failed) return retval;
					DebugLocation(254, 33);
					PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts1857);
					collectionLiteralPart132=collectionLiteralPart();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, collectionLiteralPart132.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralParts", 37);
			LeaveRule("collectionLiteralParts", 37);
			LeaveRule_collectionLiteralParts();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralParts"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralParts"

	private sealed partial class collectionLiteralPart_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionLiteralPart_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionLiteralPart();
	partial void LeaveRule_collectionLiteralPart();

	// $ANTLR start "collectionLiteralPart"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:257:1: collectionLiteralPart : exp1= oclExpression ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) ) ;
	[GrammarRule("collectionLiteralPart")]
	private OCLSyntaxParser.collectionLiteralPart_return collectionLiteralPart()
	{
		EnterRule_collectionLiteralPart();
		EnterRule("collectionLiteralPart", 38);
		TraceIn("collectionLiteralPart", 38);
		OCLSyntaxParser.collectionLiteralPart_return retval = new OCLSyntaxParser.collectionLiteralPart_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken DoubleDot133 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return exp1 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return exp2 = default(OCLSyntaxParser.oclExpression_return);

		object DoubleDot133_tree = default(object);
		RewriteRuleITokenStream stream_DoubleDot=new RewriteRuleITokenStream(adaptor,"token DoubleDot");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "collectionLiteralPart");
		DebugLocation(257, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:2: (exp1= oclExpression ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:4: exp1= oclExpression ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) )
			{
			DebugLocation(258, 8);
			PushFollow(Follow._oclExpression_in_collectionLiteralPart1874);
			exp1=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(exp1.Tree);
			DebugLocation(258, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:23: ( ( DoubleDot exp2= oclExpression ) -> ^( COLLPARTRANGE $exp1 $exp2) | -> ^( COLLPART $exp1) )
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==DoubleDot))
			{
				alt59 = 1;
			}
			else if ((LA59_0==64||LA59_0==124))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:24: ( DoubleDot exp2= oclExpression )
				{
				DebugLocation(258, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:24: ( DoubleDot exp2= oclExpression )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:25: DoubleDot exp2= oclExpression
				{
				DebugLocation(258, 25);
				DoubleDot133=(CommonToken)Match(input,DoubleDot,Follow._DoubleDot_in_collectionLiteralPart1878); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DoubleDot.Add(DoubleDot133);

				DebugLocation(258, 39);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1882);
				exp2=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(exp2.Tree);

				}



				{
				// AST REWRITE
				// elements: exp1, exp2
				// token labels: 
				// rule labels: exp1, exp2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.Tree:null);
				RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 258:54: -> ^( COLLPARTRANGE $exp1 $exp2)
				{
					DebugLocation(258, 56);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:56: ^( COLLPARTRANGE $exp1 $exp2)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(258, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLPARTRANGE, "COLLPARTRANGE"), root_1);

					DebugLocation(258, 73);
					adaptor.AddChild(root_1, stream_exp1.NextTree());
					DebugLocation(258, 79);
					adaptor.AddChild(root_1, stream_exp2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:85: 
				{

				{
				// AST REWRITE
				// elements: exp1
				// token labels: 
				// rule labels: exp1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 258:85: -> ^( COLLPART $exp1)
				{
					DebugLocation(258, 87);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:258:87: ^( COLLPART $exp1)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(258, 89);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLPART, "COLLPART"), root_1);

					DebugLocation(258, 99);
					adaptor.AddChild(root_1, stream_exp1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionLiteralPart", 38);
			LeaveRule("collectionLiteralPart", 38);
			LeaveRule_collectionLiteralPart();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralPart"); }
		return retval;

	}
	// $ANTLR end "collectionLiteralPart"

	private sealed partial class primitiveLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primitiveLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_primitiveLiteralExp();
	partial void LeaveRule_primitiveLiteralExp();

	// $ANTLR start "primitiveLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:262:1: primitiveLiteralExp : ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | 'true' | 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp );
	[GrammarRule("primitiveLiteralExp")]
	private OCLSyntaxParser.primitiveLiteralExp_return primitiveLiteralExp()
	{
		EnterRule_primitiveLiteralExp();
		EnterRule("primitiveLiteralExp", 39);
		TraceIn("primitiveLiteralExp", 39);
		OCLSyntaxParser.primitiveLiteralExp_return retval = new OCLSyntaxParser.primitiveLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set134 = default(CommonToken);

		object set134_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primitiveLiteralExp");
		DebugLocation(262, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:263:2: ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | 'true' | 'false' | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(263, 2);
			set134=(CommonToken)input.LT(1);
			if ((input.LA(1)>=IntegerLiteralExp && input.LA(1)<=InvalidLiteralExp)||input.LA(1)==NullLiteralExp||input.LA(1)==RealLiteralExp||input.LA(1)==StringLiteralExp||input.LA(1)==UnlimitedNaturalLiteralExp||input.LA(1)==106||input.LA(1)==120)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set134));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveLiteralExp", 39);
			LeaveRule("primitiveLiteralExp", 39);
			LeaveRule_primitiveLiteralExp();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveLiteralExp"); }
		return retval;

	}
	// $ANTLR end "primitiveLiteralExp"

	private sealed partial class tupleLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tupleLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_tupleLiteralExp();
	partial void LeaveRule_tupleLiteralExp();

	// $ANTLR start "tupleLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:272:1: tupleLiteralExp : roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' -> ^( TUPLELITERAL[$roottoken] variableDeclarationList ) ;
	[GrammarRule("tupleLiteralExp")]
	private OCLSyntaxParser.tupleLiteralExp_return tupleLiteralExp()
	{
		EnterRule_tupleLiteralExp();
		EnterRule("tupleLiteralExp", 40);
		TraceIn("tupleLiteralExp", 40);
		OCLSyntaxParser.tupleLiteralExp_return retval = new OCLSyntaxParser.tupleLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken roottoken = default(CommonToken);
		CommonToken char_literal135 = default(CommonToken);
		CommonToken char_literal137 = default(CommonToken);
		OCLSyntaxParser.variableDeclarationList_return variableDeclarationList136 = default(OCLSyntaxParser.variableDeclarationList_return);

		object roottoken_tree = default(object);
		object char_literal135_tree = default(object);
		object char_literal137_tree = default(object);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_variableDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarationList");
		try { DebugEnterRule(GrammarFileName, "tupleLiteralExp");
		DebugLocation(272, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:274:2: (roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' -> ^( TUPLELITERAL[$roottoken] variableDeclarationList ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:274:4: roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}'
			{
			DebugLocation(274, 13);
			roottoken=(CommonToken)Match(input,93,Follow._93_in_tupleLiteralExp1971); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(roottoken);

			DebugLocation(274, 22);
			char_literal135=(CommonToken)Match(input,122,Follow._122_in_tupleLiteralExp1973); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_122.Add(char_literal135);

			DebugLocation(274, 26);
			PushFollow(Follow._variableDeclarationList_in_tupleLiteralExp1975);
			variableDeclarationList136=variableDeclarationList(VariableDeclarationRequirement.TupleLiteral);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclarationList.Add(variableDeclarationList136.Tree);
			DebugLocation(274, 95);
			char_literal137=(CommonToken)Match(input,124,Follow._124_in_tupleLiteralExp1978); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(char_literal137);



			{
			// AST REWRITE
			// elements: variableDeclarationList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 274:99: -> ^( TUPLELITERAL[$roottoken] variableDeclarationList )
			{
				DebugLocation(274, 102);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:274:102: ^( TUPLELITERAL[$roottoken] variableDeclarationList )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(274, 104);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TUPLELITERAL, roottoken), root_1);

				DebugLocation(274, 130);
				adaptor.AddChild(root_1, stream_variableDeclarationList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tupleLiteralExp", 40);
			LeaveRule("tupleLiteralExp", 40);
			LeaveRule_tupleLiteralExp();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleLiteralExp"); }
		return retval;

	}
	// $ANTLR end "tupleLiteralExp"

	private sealed partial class typeLiteralExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public typeLiteralExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_typeLiteralExp();
	partial void LeaveRule_typeLiteralExp();

	// $ANTLR start "typeLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:277:1: typeLiteralExp : type ;
	[GrammarRule("typeLiteralExp")]
	private OCLSyntaxParser.typeLiteralExp_return typeLiteralExp()
	{
		EnterRule_typeLiteralExp();
		EnterRule("typeLiteralExp", 41);
		TraceIn("typeLiteralExp", 41);
		OCLSyntaxParser.typeLiteralExp_return retval = new OCLSyntaxParser.typeLiteralExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.type_return type138 = default(OCLSyntaxParser.type_return);


		try { DebugEnterRule(GrammarFileName, "typeLiteralExp");
		DebugLocation(277, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:278:2: ( type )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:278:3: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(278, 3);
			PushFollow(Follow._type_in_typeLiteralExp2000);
			type138=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type138.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeLiteralExp", 41);
			LeaveRule("typeLiteralExp", 41);
			LeaveRule_typeLiteralExp();
		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "typeLiteralExp"); }
		return retval;

	}
	// $ANTLR end "typeLiteralExp"

	private sealed partial class variableDeclaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclaration_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:281:1: variableDeclaration[VariableDeclarationRequirement requirement] : ({...}? SimpleName ':' type -> ^( DECL SimpleName ( type )? ) |{...}? SimpleName ( ':' type )? '=' oclExpression -> ^( DECL SimpleName ( type )? ( oclExpression )? ) );
	[GrammarRule("variableDeclaration")]
	private OCLSyntaxParser.variableDeclaration_return variableDeclaration(VariableDeclarationRequirement requirement)
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 42);
		TraceIn("variableDeclaration", 42);
		OCLSyntaxParser.variableDeclaration_return retval = new OCLSyntaxParser.variableDeclaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken SimpleName139 = default(CommonToken);
		CommonToken char_literal140 = default(CommonToken);
		CommonToken SimpleName142 = default(CommonToken);
		CommonToken char_literal143 = default(CommonToken);
		CommonToken char_literal145 = default(CommonToken);
		OCLSyntaxParser.type_return type141 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.type_return type144 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.oclExpression_return oclExpression146 = default(OCLSyntaxParser.oclExpression_return);

		object SimpleName139_tree = default(object);
		object char_literal140_tree = default(object);
		object SimpleName142_tree = default(object);
		object char_literal143_tree = default(object);
		object char_literal145_tree = default(object);
		RewriteRuleITokenStream stream_SimpleName=new RewriteRuleITokenStream(adaptor,"token SimpleName");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(281, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:282:2: ({...}? SimpleName ':' type -> ^( DECL SimpleName ( type )? ) |{...}? SimpleName ( ':' type )? '=' oclExpression -> ^( DECL SimpleName ( type )? ( oclExpression )? ) )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==SimpleName))
			{
				int LA61_1 = input.LA(2);

				if (((requirement==VariableDeclarationRequirement.TupleType ||
						requirement==VariableDeclarationRequirement.Iterator)))
				{
					alt61 = 1;
				}
				else if (((requirement==VariableDeclarationRequirement.TupleLiteral ||
						requirement==VariableDeclarationRequirement.Let)))
				{
					alt61 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:282:3: {...}? SimpleName ':' type
				{
				DebugLocation(282, 3);
				if (!((requirement==VariableDeclarationRequirement.TupleType ||
						requirement==VariableDeclarationRequirement.Iterator)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "variableDeclaration", "$requirement==VariableDeclarationRequirement.TupleType ||\r\n\t\t$requirement==VariableDeclarationRequirement.Iterator");
				}
				DebugLocation(284, 3);
				SimpleName139=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration2015); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SimpleName.Add(SimpleName139);

				DebugLocation(284, 14);
				char_literal140=(CommonToken)Match(input,69,Follow._69_in_variableDeclaration2017); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal140);

				DebugLocation(284, 18);
				PushFollow(Follow._type_in_variableDeclaration2019);
				type141=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type141.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 284:24: -> ^( DECL SimpleName ( type )? )
				{
					DebugLocation(284, 27);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:284:27: ^( DECL SimpleName ( type )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(284, 29);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

					DebugLocation(284, 34);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());
					DebugLocation(284, 45);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:284:45: ( type )?
					if (stream_type.HasNext)
					{
						DebugLocation(284, 45);
						adaptor.AddChild(root_1, stream_type.NextTree());

					}
					stream_type.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:285:3: {...}? SimpleName ( ':' type )? '=' oclExpression
				{
				DebugLocation(285, 3);
				if (!((requirement==VariableDeclarationRequirement.TupleLiteral ||
						requirement==VariableDeclarationRequirement.Let)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "variableDeclaration", "$requirement==VariableDeclarationRequirement.TupleLiteral ||\r\n\t\t$requirement==VariableDeclarationRequirement.Let");
				}
				DebugLocation(287, 3);
				SimpleName142=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration2042); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SimpleName.Add(SimpleName142);

				DebugLocation(287, 14);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:287:14: ( ':' type )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==69))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:287:15: ':' type
					{
					DebugLocation(287, 15);
					char_literal143=(CommonToken)Match(input,69,Follow._69_in_variableDeclaration2045); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal143);

					DebugLocation(287, 19);
					PushFollow(Follow._type_in_variableDeclaration2047);
					type144=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type.Add(type144.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(60); }

				DebugLocation(287, 27);
				char_literal145=(CommonToken)Match(input,75,Follow._75_in_variableDeclaration2052); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_75.Add(char_literal145);

				DebugLocation(287, 31);
				PushFollow(Follow._oclExpression_in_variableDeclaration2054);
				oclExpression146=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression146.Tree);


				{
				// AST REWRITE
				// elements: SimpleName, type, oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 287:46: -> ^( DECL SimpleName ( type )? ( oclExpression )? )
				{
					DebugLocation(287, 49);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:287:49: ^( DECL SimpleName ( type )? ( oclExpression )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(287, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DECL, "DECL"), root_1);

					DebugLocation(287, 56);
					adaptor.AddChild(root_1, stream_SimpleName.NextNode());
					DebugLocation(287, 67);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:287:67: ( type )?
					if (stream_type.HasNext)
					{
						DebugLocation(287, 67);
						adaptor.AddChild(root_1, stream_type.NextTree());

					}
					stream_type.Reset();
					DebugLocation(287, 73);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:287:73: ( oclExpression )?
					if (stream_oclExpression.HasNext)
					{
						DebugLocation(287, 73);
						adaptor.AddChild(root_1, stream_oclExpression.NextTree());

					}
					stream_oclExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaration", 42);
			LeaveRule("variableDeclaration", 42);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return retval;

	}
	// $ANTLR end "variableDeclaration"

	private sealed partial class type_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public type_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:291:1: type : ( pathName | collectionType | tupleType | primitiveType | oclType );
	[GrammarRule("type")]
	private OCLSyntaxParser.type_return type()
	{
		EnterRule_type();
		EnterRule("type", 43);
		TraceIn("type", 43);
		OCLSyntaxParser.type_return retval = new OCLSyntaxParser.type_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		OCLSyntaxParser.pathName_return pathName147 = default(OCLSyntaxParser.pathName_return);
		OCLSyntaxParser.collectionType_return collectionType148 = default(OCLSyntaxParser.collectionType_return);
		OCLSyntaxParser.tupleType_return tupleType149 = default(OCLSyntaxParser.tupleType_return);
		OCLSyntaxParser.primitiveType_return primitiveType150 = default(OCLSyntaxParser.primitiveType_return);
		OCLSyntaxParser.oclType_return oclType151 = default(OCLSyntaxParser.oclType_return);


		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(291, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:292:2: ( pathName | collectionType | tupleType | primitiveType | oclType )
			int alt62=5;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case SimpleName:
				{
				alt62 = 1;
				}
				break;
			case 80:
			case 82:
			case 88:
			case 90:
			case 91:
				{
				alt62 = 2;
				}
				break;
			case 93:
				{
				alt62 = 3;
				}
				break;
			case 81:
			case 83:
			case 89:
			case 92:
			case 94:
				{
				alt62 = 4;
				}
				break;
			case 84:
			case 85:
			case 86:
			case 87:
				{
				alt62 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:292:4: pathName
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(292, 4);
				PushFollow(Follow._pathName_in_type2083);
				pathName147=pathName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pathName147.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:293:4: collectionType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(293, 4);
				PushFollow(Follow._collectionType_in_type2091);
				collectionType148=collectionType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collectionType148.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:294:4: tupleType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(294, 4);
				PushFollow(Follow._tupleType_in_type2097);
				tupleType149=tupleType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tupleType149.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:295:4: primitiveType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(295, 4);
				PushFollow(Follow._primitiveType_in_type2104);
				primitiveType150=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType150.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:296:4: oclType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(296, 4);
				PushFollow(Follow._oclType_in_type2111);
				oclType151=oclType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclType151.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 43);
			LeaveRule("type", 43);
			LeaveRule_type();
		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	private sealed partial class primitiveType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public primitiveType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();

	// $ANTLR start "primitiveType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:299:1: primitiveType : ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' );
	[GrammarRule("primitiveType")]
	private OCLSyntaxParser.primitiveType_return primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 44);
		TraceIn("primitiveType", 44);
		OCLSyntaxParser.primitiveType_return retval = new OCLSyntaxParser.primitiveType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set152 = default(CommonToken);

		object set152_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(299, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:300:2: ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(300, 2);
			set152=(CommonToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==83||input.LA(1)==89||input.LA(1)==92||input.LA(1)==94)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set152));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 44);
			LeaveRule("primitiveType", 44);
			LeaveRule_primitiveType();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	private sealed partial class oclType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclType();
	partial void LeaveRule_oclType();

	// $ANTLR start "oclType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:307:1: oclType : ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' );
	[GrammarRule("oclType")]
	private OCLSyntaxParser.oclType_return oclType()
	{
		EnterRule_oclType();
		EnterRule("oclType", 45);
		TraceIn("oclType", 45);
		OCLSyntaxParser.oclType_return retval = new OCLSyntaxParser.oclType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken set153 = default(CommonToken);

		object set153_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclType");
		DebugLocation(307, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:308:2: ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(308, 2);
			set153=(CommonToken)input.LT(1);
			if ((input.LA(1)>=84 && input.LA(1)<=87))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set153));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclType", 45);
			LeaveRule("oclType", 45);
			LeaveRule_oclType();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "oclType"); }
		return retval;

	}
	// $ANTLR end "oclType"

	private sealed partial class collectionType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public collectionType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_collectionType();
	partial void LeaveRule_collectionType();

	// $ANTLR start "collectionType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:314:1: collectionType : collectionTypeIdentifier '(' type ')' -> ^( COLLTYPE collectionTypeIdentifier type ) ;
	[GrammarRule("collectionType")]
	private OCLSyntaxParser.collectionType_return collectionType()
	{
		EnterRule_collectionType();
		EnterRule("collectionType", 46);
		TraceIn("collectionType", 46);
		OCLSyntaxParser.collectionType_return retval = new OCLSyntaxParser.collectionType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal155 = default(CommonToken);
		CommonToken char_literal157 = default(CommonToken);
		OCLSyntaxParser.collectionTypeIdentifier_return collectionTypeIdentifier154 = default(OCLSyntaxParser.collectionTypeIdentifier_return);
		OCLSyntaxParser.type_return type156 = default(OCLSyntaxParser.type_return);

		object char_literal155_tree = default(object);
		object char_literal157_tree = default(object);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleSubtreeStream stream_collectionTypeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule collectionTypeIdentifier");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "collectionType");
		DebugLocation(314, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:315:2: ( collectionTypeIdentifier '(' type ')' -> ^( COLLTYPE collectionTypeIdentifier type ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:315:4: collectionTypeIdentifier '(' type ')'
			{
			DebugLocation(315, 4);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionType2217);
			collectionTypeIdentifier154=collectionTypeIdentifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_collectionTypeIdentifier.Add(collectionTypeIdentifier154.Tree);
			DebugLocation(315, 29);
			char_literal155=(CommonToken)Match(input,61,Follow._61_in_collectionType2219); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal155);

			DebugLocation(315, 33);
			PushFollow(Follow._type_in_collectionType2221);
			type156=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type156.Tree);
			DebugLocation(315, 39);
			char_literal157=(CommonToken)Match(input,62,Follow._62_in_collectionType2224); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal157);



			{
			// AST REWRITE
			// elements: collectionTypeIdentifier, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 315:43: -> ^( COLLTYPE collectionTypeIdentifier type )
			{
				DebugLocation(315, 46);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:315:46: ^( COLLTYPE collectionTypeIdentifier type )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(315, 48);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(COLLTYPE, "COLLTYPE"), root_1);

				DebugLocation(315, 58);
				adaptor.AddChild(root_1, stream_collectionTypeIdentifier.NextTree());
				DebugLocation(315, 83);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collectionType", 46);
			LeaveRule("collectionType", 46);
			LeaveRule_collectionType();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionType"); }
		return retval;

	}
	// $ANTLR end "collectionType"

	private sealed partial class tupleType_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public tupleType_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_tupleType();
	partial void LeaveRule_tupleType();

	// $ANTLR start "tupleType"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:318:1: tupleType : 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')' ;
	[GrammarRule("tupleType")]
	private OCLSyntaxParser.tupleType_return tupleType()
	{
		EnterRule_tupleType();
		EnterRule("tupleType", 47);
		TraceIn("tupleType", 47);
		OCLSyntaxParser.tupleType_return retval = new OCLSyntaxParser.tupleType_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal158 = default(CommonToken);
		CommonToken char_literal159 = default(CommonToken);
		CommonToken char_literal161 = default(CommonToken);
		OCLSyntaxParser.variableDeclarationList_return variableDeclarationList160 = default(OCLSyntaxParser.variableDeclarationList_return);

		object string_literal158_tree = default(object);
		object char_literal159_tree = default(object);
		object char_literal161_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "tupleType");
		DebugLocation(318, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:319:2: ( 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:319:4: 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(319, 11);
			string_literal158=(CommonToken)Match(input,93,Follow._93_in_tupleType2249); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal158_tree = (object)adaptor.Create(string_literal158);
			root_0 = (object)adaptor.BecomeRoot(string_literal158_tree, root_0);
			}
			DebugLocation(319, 16);
			char_literal159=(CommonToken)Match(input,61,Follow._61_in_tupleType2252); if (state.failed) return retval;
			DebugLocation(319, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:319:18: ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==SimpleName))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:319:18: variableDeclarationList[VariableDeclarationRequirement.TupleType]
				{
				DebugLocation(319, 18);
				PushFollow(Follow._variableDeclarationList_in_tupleType2255);
				variableDeclarationList160=variableDeclarationList(VariableDeclarationRequirement.TupleType);
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationList160.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(319, 88);
			char_literal161=(CommonToken)Match(input,62,Follow._62_in_tupleType2259); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tupleType", 47);
			LeaveRule("tupleType", 47);
			LeaveRule_tupleType();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleType"); }
		return retval;

	}
	// $ANTLR end "tupleType"

	private sealed partial class variableDeclarationList_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public variableDeclarationList_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:323:1: variableDeclarationList[VariableDeclarationRequirement requirement] : variableDeclaration[requirement] ( ',' variableDeclaration[requirement] )* ;
	[GrammarRule("variableDeclarationList")]
	private OCLSyntaxParser.variableDeclarationList_return variableDeclarationList(VariableDeclarationRequirement requirement)
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 48);
		TraceIn("variableDeclarationList", 48);
		OCLSyntaxParser.variableDeclarationList_return retval = new OCLSyntaxParser.variableDeclarationList_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal163 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration162 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration164 = default(OCLSyntaxParser.variableDeclaration_return);

		object char_literal163_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(323, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:324:2: ( variableDeclaration[requirement] ( ',' variableDeclaration[requirement] )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:324:4: variableDeclaration[requirement] ( ',' variableDeclaration[requirement] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(324, 4);
			PushFollow(Follow._variableDeclaration_in_variableDeclarationList2275);
			variableDeclaration162=variableDeclaration(requirement);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration162.Tree);
			DebugLocation(324, 37);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:324:37: ( ',' variableDeclaration[requirement] )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==64))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:324:38: ',' variableDeclaration[requirement]
					{
					DebugLocation(324, 41);
					char_literal163=(CommonToken)Match(input,64,Follow._64_in_variableDeclarationList2279); if (state.failed) return retval;
					DebugLocation(324, 43);
					PushFollow(Follow._variableDeclaration_in_variableDeclarationList2282);
					variableDeclaration164=variableDeclaration(requirement);
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration164.Tree);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationList", 48);
			LeaveRule("variableDeclarationList", 48);
			LeaveRule_variableDeclarationList();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationList"

	private sealed partial class isMarkedPre_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public isMarkedPre_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_isMarkedPre();
	partial void LeaveRule_isMarkedPre();

	// $ANTLR start "isMarkedPre"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:326:1: isMarkedPre : '@' 'pre' ;
	[GrammarRule("isMarkedPre")]
	private OCLSyntaxParser.isMarkedPre_return isMarkedPre()
	{
		EnterRule_isMarkedPre();
		EnterRule("isMarkedPre", 49);
		TraceIn("isMarkedPre", 49);
		OCLSyntaxParser.isMarkedPre_return retval = new OCLSyntaxParser.isMarkedPre_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal165 = default(CommonToken);
		CommonToken string_literal166 = default(CommonToken);

		object char_literal165_tree = default(object);
		object string_literal166_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "isMarkedPre");
		DebugLocation(326, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:327:2: ( '@' 'pre' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:327:4: '@' 'pre'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(327, 7);
			char_literal165=(CommonToken)Match(input,79,Follow._79_in_isMarkedPre2298); if (state.failed) return retval;
			DebugLocation(327, 9);
			string_literal166=(CommonToken)Match(input,117,Follow._117_in_isMarkedPre2301); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal166_tree = (object)adaptor.Create(string_literal166);
			adaptor.AddChild(root_0, string_literal166_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("isMarkedPre", 49);
			LeaveRule("isMarkedPre", 49);
			LeaveRule_isMarkedPre();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "isMarkedPre"); }
		return retval;

	}
	// $ANTLR end "isMarkedPre"

	private sealed partial class arguments_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public arguments_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:330:1: arguments : exp1= oclExpression ( ',' exp2= oclExpression )* ;
	[GrammarRule("arguments")]
	private OCLSyntaxParser.arguments_return arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 50);
		TraceIn("arguments", 50);
		OCLSyntaxParser.arguments_return retval = new OCLSyntaxParser.arguments_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal167 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return exp1 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return exp2 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal167_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(330, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:331:2: (exp1= oclExpression ( ',' exp2= oclExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:331:4: exp1= oclExpression ( ',' exp2= oclExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(331, 9);
			PushFollow(Follow._oclExpression_in_arguments2317);
			exp1=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exp1.Tree);
			DebugLocation(331, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:331:26: ( ',' exp2= oclExpression )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==64))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:331:28: ',' exp2= oclExpression
					{
					DebugLocation(331, 31);
					char_literal167=(CommonToken)Match(input,64,Follow._64_in_arguments2322); if (state.failed) return retval;
					DebugLocation(331, 37);
					PushFollow(Follow._oclExpression_in_arguments2327);
					exp2=oclExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exp2.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 50);
			LeaveRule("arguments", 50);
			LeaveRule_arguments();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	private sealed partial class letExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public letExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_letExp();
	partial void LeaveRule_letExp();

	// $ANTLR start "letExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:335:1: letExp : 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) ;
	[GrammarRule("letExp")]
	private OCLSyntaxParser.letExp_return letExp()
	{
		EnterRule_letExp();
		EnterRule("letExp", 51);
		TraceIn("letExp", 51);
		OCLSyntaxParser.letExp_return retval = new OCLSyntaxParser.letExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal168 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration169 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.letExpSub_return letExpSub170 = default(OCLSyntaxParser.letExpSub_return);

		object string_literal168_tree = default(object);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_variableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaration");
		RewriteRuleSubtreeStream stream_letExpSub=new RewriteRuleSubtreeStream(adaptor,"rule letExpSub");
		try { DebugEnterRule(GrammarFileName, "letExp");
		DebugLocation(335, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:336:2: ( 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:336:4: 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub
			{
			DebugLocation(336, 4);
			string_literal168=(CommonToken)Match(input,113,Follow._113_in_letExp2343); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_113.Add(string_literal168);

			DebugLocation(336, 10);
			PushFollow(Follow._variableDeclaration_in_letExp2345);
			variableDeclaration169=variableDeclaration(VariableDeclarationRequirement.Let);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableDeclaration.Add(variableDeclaration169.Tree);
			DebugLocation(336, 66);
			PushFollow(Follow._letExpSub_in_letExp2348);
			letExpSub170=letExpSub();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_letExpSub.Add(letExpSub170.Tree);


			{
			// AST REWRITE
			// elements: variableDeclaration, letExpSub
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 336:76: -> ^( LET variableDeclaration letExpSub )
			{
				DebugLocation(336, 79);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:336:79: ^( LET variableDeclaration letExpSub )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(336, 81);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(LET, "LET"), root_1);

				DebugLocation(336, 85);
				adaptor.AddChild(root_1, stream_variableDeclaration.NextTree());
				DebugLocation(336, 105);
				adaptor.AddChild(root_1, stream_letExpSub.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("letExp", 51);
			LeaveRule("letExp", 51);
			LeaveRule_letExp();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "letExp"); }
		return retval;

	}
	// $ANTLR end "letExp"

	private sealed partial class letExpSub_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public letExpSub_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_letExpSub();
	partial void LeaveRule_letExpSub();

	// $ANTLR start "letExpSub"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:339:1: letExpSub : ( ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) | 'in' ( options {greedy=false; } : oclExpression ) -> oclExpression );
	[GrammarRule("letExpSub")]
	private OCLSyntaxParser.letExpSub_return letExpSub()
	{
		EnterRule_letExpSub();
		EnterRule("letExpSub", 52);
		TraceIn("letExpSub", 52);
		OCLSyntaxParser.letExpSub_return retval = new OCLSyntaxParser.letExpSub_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal171 = default(CommonToken);
		CommonToken string_literal174 = default(CommonToken);
		OCLSyntaxParser.variableDeclaration_return variableDeclaration172 = default(OCLSyntaxParser.variableDeclaration_return);
		OCLSyntaxParser.letExpSub_return letExpSub173 = default(OCLSyntaxParser.letExpSub_return);
		OCLSyntaxParser.oclExpression_return oclExpression175 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal171_tree = default(object);
		object string_literal174_tree = default(object);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_variableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaration");
		RewriteRuleSubtreeStream stream_letExpSub=new RewriteRuleSubtreeStream(adaptor,"rule letExpSub");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "letExpSub");
		DebugLocation(339, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:340:2: ( ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub -> ^( LET variableDeclaration letExpSub ) | 'in' ( options {greedy=false; } : oclExpression ) -> oclExpression )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==64))
			{
				alt66 = 1;
			}
			else if ((LA66_0==109))
			{
				alt66 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:340:4: ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub
				{
				DebugLocation(340, 4);
				char_literal171=(CommonToken)Match(input,64,Follow._64_in_letExpSub2370); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_64.Add(char_literal171);

				DebugLocation(340, 8);
				PushFollow(Follow._variableDeclaration_in_letExpSub2372);
				variableDeclaration172=variableDeclaration(VariableDeclarationRequirement.Let);
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableDeclaration.Add(variableDeclaration172.Tree);
				DebugLocation(340, 64);
				PushFollow(Follow._letExpSub_in_letExpSub2375);
				letExpSub173=letExpSub();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_letExpSub.Add(letExpSub173.Tree);


				{
				// AST REWRITE
				// elements: variableDeclaration, letExpSub
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 340:74: -> ^( LET variableDeclaration letExpSub )
				{
					DebugLocation(340, 77);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:340:77: ^( LET variableDeclaration letExpSub )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(340, 79);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(LET, "LET"), root_1);

					DebugLocation(340, 83);
					adaptor.AddChild(root_1, stream_variableDeclaration.NextTree());
					DebugLocation(340, 103);
					adaptor.AddChild(root_1, stream_letExpSub.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:341:4: 'in' ( options {greedy=false; } : oclExpression )
				{
				DebugLocation(341, 4);
				string_literal174=(CommonToken)Match(input,109,Follow._109_in_letExpSub2390); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(string_literal174);

				DebugLocation(341, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:341:9: ( options {greedy=false; } : oclExpression )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:341:35: oclExpression
				{
				DebugLocation(341, 35);
				PushFollow(Follow._oclExpression_in_letExpSub2401);
				oclExpression175=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_oclExpression.Add(oclExpression175.Tree);

				}



				{
				// AST REWRITE
				// elements: oclExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 341:50: -> oclExpression
				{
					DebugLocation(341, 53);
					adaptor.AddChild(root_0, stream_oclExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("letExpSub", 52);
			LeaveRule("letExpSub", 52);
			LeaveRule_letExpSub();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "letExpSub"); }
		return retval;

	}
	// $ANTLR end "letExpSub"

	private sealed partial class oclMessageExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclMessageExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclMessageExp();
	partial void LeaveRule_oclMessageExp();

	// $ANTLR start "oclMessageExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:344:1: oclMessageExp : ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' );
	[GrammarRule("oclMessageExp")]
	private OCLSyntaxParser.oclMessageExp_return oclMessageExp()
	{
		EnterRule_oclMessageExp();
		EnterRule("oclMessageExp", 53);
		TraceIn("oclMessageExp", 53);
		OCLSyntaxParser.oclMessageExp_return retval = new OCLSyntaxParser.oclMessageExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken string_literal176 = default(CommonToken);
		CommonToken SimpleName177 = default(CommonToken);
		CommonToken char_literal178 = default(CommonToken);
		CommonToken char_literal180 = default(CommonToken);
		CommonToken char_literal181 = default(CommonToken);
		CommonToken SimpleName182 = default(CommonToken);
		CommonToken char_literal183 = default(CommonToken);
		CommonToken char_literal185 = default(CommonToken);
		OCLSyntaxParser.oclMessageArguments_return oclMessageArguments179 = default(OCLSyntaxParser.oclMessageArguments_return);
		OCLSyntaxParser.oclMessageArguments_return oclMessageArguments184 = default(OCLSyntaxParser.oclMessageArguments_return);

		object string_literal176_tree = default(object);
		object SimpleName177_tree = default(object);
		object char_literal178_tree = default(object);
		object char_literal180_tree = default(object);
		object char_literal181_tree = default(object);
		object SimpleName182_tree = default(object);
		object char_literal183_tree = default(object);
		object char_literal185_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclMessageExp");
		DebugLocation(344, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:345:2: ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==98))
			{
				alt69 = 1;
			}
			else if ((LA69_0==97))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:345:4: '^^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 4);
				string_literal176=(CommonToken)Match(input,98,Follow._98_in_oclMessageExp2417); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal176_tree = (object)adaptor.Create(string_literal176);
				adaptor.AddChild(root_0, string_literal176_tree);
				}
				DebugLocation(345, 9);
				SimpleName177=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp2419); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SimpleName177_tree = (object)adaptor.Create(SimpleName177);
				adaptor.AddChild(root_0, SimpleName177_tree);
				}
				DebugLocation(345, 20);
				char_literal178=(CommonToken)Match(input,61,Follow._61_in_oclMessageExp2421); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal178_tree = (object)adaptor.Create(char_literal178);
				adaptor.AddChild(root_0, char_literal178_tree);
				}
				DebugLocation(345, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:345:24: ( oclMessageArguments )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if (((LA67_0>=IntegerLiteralExp && LA67_0<=InvalidLiteralExp)||LA67_0==NullLiteralExp||(LA67_0>=RealLiteralExp && LA67_0<=SimpleName)||LA67_0==StringLiteralExp||LA67_0==UnlimitedNaturalLiteralExp||LA67_0==61||LA67_0==65||LA67_0==78||(LA67_0>=80 && LA67_0<=94)||(LA67_0>=106 && LA67_0<=107)||(LA67_0>=112 && LA67_0<=114)||LA67_0==120))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:345:24: oclMessageArguments
					{
					DebugLocation(345, 24);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp2423);
					oclMessageArguments179=oclMessageArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArguments179.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(345, 45);
				char_literal180=(CommonToken)Match(input,62,Follow._62_in_oclMessageExp2426); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal180_tree = (object)adaptor.Create(char_literal180);
				adaptor.AddChild(root_0, char_literal180_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:346:4: '^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(346, 4);
				char_literal181=(CommonToken)Match(input,97,Follow._97_in_oclMessageExp2431); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal181_tree = (object)adaptor.Create(char_literal181);
				adaptor.AddChild(root_0, char_literal181_tree);
				}
				DebugLocation(346, 8);
				SimpleName182=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp2433); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SimpleName182_tree = (object)adaptor.Create(SimpleName182);
				adaptor.AddChild(root_0, SimpleName182_tree);
				}
				DebugLocation(346, 19);
				char_literal183=(CommonToken)Match(input,61,Follow._61_in_oclMessageExp2435); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal183_tree = (object)adaptor.Create(char_literal183);
				adaptor.AddChild(root_0, char_literal183_tree);
				}
				DebugLocation(346, 23);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:346:23: ( oclMessageArguments )?
				int alt68=2;
				try { DebugEnterSubRule(68);
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if (((LA68_0>=IntegerLiteralExp && LA68_0<=InvalidLiteralExp)||LA68_0==NullLiteralExp||(LA68_0>=RealLiteralExp && LA68_0<=SimpleName)||LA68_0==StringLiteralExp||LA68_0==UnlimitedNaturalLiteralExp||LA68_0==61||LA68_0==65||LA68_0==78||(LA68_0>=80 && LA68_0<=94)||(LA68_0>=106 && LA68_0<=107)||(LA68_0>=112 && LA68_0<=114)||LA68_0==120))
				{
					alt68 = 1;
				}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:346:23: oclMessageArguments
					{
					DebugLocation(346, 23);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp2437);
					oclMessageArguments184=oclMessageArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArguments184.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(68); }

				DebugLocation(346, 44);
				char_literal185=(CommonToken)Match(input,62,Follow._62_in_oclMessageExp2440); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal185_tree = (object)adaptor.Create(char_literal185);
				adaptor.AddChild(root_0, char_literal185_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclMessageExp", 53);
			LeaveRule("oclMessageExp", 53);
			LeaveRule_oclMessageExp();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageExp"); }
		return retval;

	}
	// $ANTLR end "oclMessageExp"

	private sealed partial class oclMessageArguments_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclMessageArguments_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclMessageArguments();
	partial void LeaveRule_oclMessageArguments();

	// $ANTLR start "oclMessageArguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:348:1: oclMessageArguments : oclMessageArg ( ',' oclMessageArguments )? ;
	[GrammarRule("oclMessageArguments")]
	private OCLSyntaxParser.oclMessageArguments_return oclMessageArguments()
	{
		EnterRule_oclMessageArguments();
		EnterRule("oclMessageArguments", 54);
		TraceIn("oclMessageArguments", 54);
		OCLSyntaxParser.oclMessageArguments_return retval = new OCLSyntaxParser.oclMessageArguments_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal187 = default(CommonToken);
		OCLSyntaxParser.oclMessageArg_return oclMessageArg186 = default(OCLSyntaxParser.oclMessageArg_return);
		OCLSyntaxParser.oclMessageArguments_return oclMessageArguments188 = default(OCLSyntaxParser.oclMessageArguments_return);

		object char_literal187_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclMessageArguments");
		DebugLocation(348, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:349:2: ( oclMessageArg ( ',' oclMessageArguments )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:349:4: oclMessageArg ( ',' oclMessageArguments )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(349, 4);
			PushFollow(Follow._oclMessageArg_in_oclMessageArguments2450);
			oclMessageArg186=oclMessageArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArg186.Tree);
			DebugLocation(349, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:349:18: ( ',' oclMessageArguments )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==64))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:349:20: ',' oclMessageArguments
				{
				DebugLocation(349, 20);
				char_literal187=(CommonToken)Match(input,64,Follow._64_in_oclMessageArguments2454); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal187_tree = (object)adaptor.Create(char_literal187);
				adaptor.AddChild(root_0, char_literal187_tree);
				}
				DebugLocation(349, 24);
				PushFollow(Follow._oclMessageArguments_in_oclMessageArguments2456);
				oclMessageArguments188=oclMessageArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclMessageArguments188.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclMessageArguments", 54);
			LeaveRule("oclMessageArguments", 54);
			LeaveRule_oclMessageArguments();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArguments"); }
		return retval;

	}
	// $ANTLR end "oclMessageArguments"

	private sealed partial class oclMessageArg_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public oclMessageArg_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_oclMessageArg();
	partial void LeaveRule_oclMessageArg();

	// $ANTLR start "oclMessageArg"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:352:1: oclMessageArg : ( '?' ( ':' type )? | oclExpression );
	[GrammarRule("oclMessageArg")]
	private OCLSyntaxParser.oclMessageArg_return oclMessageArg()
	{
		EnterRule_oclMessageArg();
		EnterRule("oclMessageArg", 55);
		TraceIn("oclMessageArg", 55);
		OCLSyntaxParser.oclMessageArg_return retval = new OCLSyntaxParser.oclMessageArg_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken char_literal189 = default(CommonToken);
		CommonToken char_literal190 = default(CommonToken);
		OCLSyntaxParser.type_return type191 = default(OCLSyntaxParser.type_return);
		OCLSyntaxParser.oclExpression_return oclExpression192 = default(OCLSyntaxParser.oclExpression_return);

		object char_literal189_tree = default(object);
		object char_literal190_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "oclMessageArg");
		DebugLocation(352, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:353:2: ( '?' ( ':' type )? | oclExpression )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==78))
			{
				alt72 = 1;
			}
			else if (((LA72_0>=IntegerLiteralExp && LA72_0<=InvalidLiteralExp)||LA72_0==NullLiteralExp||(LA72_0>=RealLiteralExp && LA72_0<=SimpleName)||LA72_0==StringLiteralExp||LA72_0==UnlimitedNaturalLiteralExp||LA72_0==61||LA72_0==65||(LA72_0>=80 && LA72_0<=94)||(LA72_0>=106 && LA72_0<=107)||(LA72_0>=112 && LA72_0<=114)||LA72_0==120))
			{
				alt72 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:353:4: '?' ( ':' type )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(353, 4);
				char_literal189=(CommonToken)Match(input,78,Follow._78_in_oclMessageArg2471); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal189_tree = (object)adaptor.Create(char_literal189);
				adaptor.AddChild(root_0, char_literal189_tree);
				}
				DebugLocation(353, 8);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:353:8: ( ':' type )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==69))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:353:9: ':' type
					{
					DebugLocation(353, 9);
					char_literal190=(CommonToken)Match(input,69,Follow._69_in_oclMessageArg2474); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal190_tree = (object)adaptor.Create(char_literal190);
					adaptor.AddChild(root_0, char_literal190_tree);
					}
					DebugLocation(353, 13);
					PushFollow(Follow._type_in_oclMessageArg2476);
					type191=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type191.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(71); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:354:4: oclExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(354, 4);
				PushFollow(Follow._oclExpression_in_oclMessageArg2483);
				oclExpression192=oclExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, oclExpression192.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oclMessageArg", 55);
			LeaveRule("oclMessageArg", 55);
			LeaveRule_oclMessageArg();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArg"); }
		return retval;

	}
	// $ANTLR end "oclMessageArg"

	private sealed partial class ifExp_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<object>, IAstRuleReturnScope
	{
		private object _tree;
		public object Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ifExp_return(OCLSyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLSyntaxParser grammar);
	}

	partial void EnterRule_ifExp();
	partial void LeaveRule_ifExp();

	// $ANTLR start "ifExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:357:1: ifExp : i= 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' -> ^( IF[$i] ( oclExpression )+ ) ;
	[GrammarRule("ifExp")]
	private OCLSyntaxParser.ifExp_return ifExp()
	{
		EnterRule_ifExp();
		EnterRule("ifExp", 56);
		TraceIn("ifExp", 56);
		OCLSyntaxParser.ifExp_return retval = new OCLSyntaxParser.ifExp_return(this);
		retval.Start = (CommonToken)input.LT(1);

		object root_0 = default(object);

		CommonToken i = default(CommonToken);
		CommonToken string_literal194 = default(CommonToken);
		CommonToken string_literal196 = default(CommonToken);
		CommonToken string_literal198 = default(CommonToken);
		OCLSyntaxParser.oclExpression_return oclExpression193 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression195 = default(OCLSyntaxParser.oclExpression_return);
		OCLSyntaxParser.oclExpression_return oclExpression197 = default(OCLSyntaxParser.oclExpression_return);

		object i_tree = default(object);
		object string_literal194_tree = default(object);
		object string_literal196_tree = default(object);
		object string_literal198_tree = default(object);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_oclExpression=new RewriteRuleSubtreeStream(adaptor,"rule oclExpression");
		try { DebugEnterRule(GrammarFileName, "ifExp");
		DebugLocation(357, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:358:2: (i= 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' -> ^( IF[$i] ( oclExpression )+ ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:358:4: i= 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif'
			{
			DebugLocation(358, 5);
			i=(CommonToken)Match(input,107,Follow._107_in_ifExp2497); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_107.Add(i);

			DebugLocation(358, 11);
			PushFollow(Follow._oclExpression_in_ifExp2499);
			oclExpression193=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(oclExpression193.Tree);
			DebugLocation(358, 25);
			string_literal194=(CommonToken)Match(input,119,Follow._119_in_ifExp2501); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(string_literal194);

			DebugLocation(358, 32);
			PushFollow(Follow._oclExpression_in_ifExp2503);
			oclExpression195=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(oclExpression195.Tree);
			DebugLocation(358, 46);
			string_literal196=(CommonToken)Match(input,104,Follow._104_in_ifExp2505); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_104.Add(string_literal196);

			DebugLocation(358, 53);
			PushFollow(Follow._oclExpression_in_ifExp2507);
			oclExpression197=oclExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_oclExpression.Add(oclExpression197.Tree);
			DebugLocation(358, 67);
			string_literal198=(CommonToken)Match(input,105,Follow._105_in_ifExp2509); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_105.Add(string_literal198);



			{
			// AST REWRITE
			// elements: oclExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 358:75: -> ^( IF[$i] ( oclExpression )+ )
			{
				DebugLocation(358, 78);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:358:78: ^( IF[$i] ( oclExpression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(358, 80);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IF, i), root_1);

				DebugLocation(358, 87);
				if (!(stream_oclExpression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_oclExpression.HasNext )
				{
					DebugLocation(358, 87);
					adaptor.AddChild(root_1, stream_oclExpression.NextTree());

				}
				stream_oclExpression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifExp", 56);
			LeaveRule("ifExp", 56);
			LeaveRule_ifExp();
		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "ifExp"); }
		return retval;

	}
	// $ANTLR end "ifExp"

	partial void EnterRule_synpred1_OCLSyntax_fragment();
	partial void LeaveRule_synpred1_OCLSyntax_fragment();

	// $ANTLR start synpred1_OCLSyntax
	public void synpred1_OCLSyntax_fragment()
	{
		EnterRule_synpred1_OCLSyntax_fragment();
		EnterRule("synpred1_OCLSyntax_fragment", 57);
		TraceIn("synpred1_OCLSyntax_fragment", 57);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:6: ( SimpleName ( ( ':' ) type )? ';' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:7: SimpleName ( ( ':' ) type )? ';'
			{
			DebugLocation(172, 7);
			Match(input,SimpleName,Follow._SimpleName_in_synpred1_OCLSyntax1314); if (state.failed) return;
			DebugLocation(172, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:18: ( ( ':' ) type )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==69))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:19: ( ':' ) type
				{
				DebugLocation(172, 19);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:19: ( ':' )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCLSyntax.g3:172:20: ':'
				{
				DebugLocation(172, 20);
				Match(input,69,Follow._69_in_synpred1_OCLSyntax1318); if (state.failed) return;

				}

				DebugLocation(172, 25);
				PushFollow(Follow._type_in_synpred1_OCLSyntax1321);
				type();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(172, 32);
			Match(input,71,Follow._71_in_synpred1_OCLSyntax1325); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_OCLSyntax_fragment", 57);
			LeaveRule("synpred1_OCLSyntax_fragment", 57);
			LeaveRule_synpred1_OCLSyntax_fragment();
		}
	}
	// $ANTLR end synpred1_OCLSyntax
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA2 dfa2;
	private DFA36 dfa36;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa2 = new DFA2( this );
		dfa36 = new DFA36( this );
	}

	private class DFA2 : DFA
	{
		private const string DFA2_eotS =
			"\x8\xFFFF";
		private const string DFA2_eofS =
			"\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF";
		private const string DFA2_minS =
			"\x1\x65\x1\x33\x1\x3D\x1\xFFFF\x1\x33\x1\xFFFF\x1\x3D\x1\xFFFF";
		private const string DFA2_maxS =
			"\x1\x65\x1\x33\x1\x76\x1\xFFFF\x1\x33\x1\xFFFF\x1\x76\x1\xFFFF";
		private const string DFA2_acceptS =
			"\x3\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1";
		private const string DFA2_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA2_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x5\x7\xFFFF\x1\x3\x1\x4\x1E\xFFFF\x2\x3\x8\xFFFF\x1\x3\x6\xFFFF"+
				"\x1\x3",
				"",
				"\x1\x6",
				"",
				"\x1\x5\x7\xFFFF\x1\x7\x1\x4\x1E\xFFFF\x2\x3\x8\xFFFF\x1\x3\x6\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA2_eot = DFA.UnpackEncodedString(DFA2_eotS);
		private static readonly short[] DFA2_eof = DFA.UnpackEncodedString(DFA2_eofS);
		private static readonly char[] DFA2_min = DFA.UnpackEncodedStringToUnsignedChars(DFA2_minS);
		private static readonly char[] DFA2_max = DFA.UnpackEncodedStringToUnsignedChars(DFA2_maxS);
		private static readonly short[] DFA2_accept = DFA.UnpackEncodedString(DFA2_acceptS);
		private static readonly short[] DFA2_special = DFA.UnpackEncodedString(DFA2_specialS);
		private static readonly short[][] DFA2_transition;

		static DFA2()
		{
			int numStates = DFA2_transitionS.Length;
			DFA2_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA2_transition[i] = DFA.UnpackEncodedString(DFA2_transitionS[i]);
			}
		}

		public DFA2( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}

		public override string Description { get { return "31:1: public contextDeclaration : ( propertyContextDecl | classifierContextDecl | operationContextDecl );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\xA\xFFFF";
		private const string DFA36_eofS =
			"\xA\xFFFF";
		private const string DFA36_minS =
			"\x1\x1F\x1\xFFFF\x1\x3D\x7\xFFFF";
		private const string DFA36_maxS =
			"\x1\x78\x1\xFFFF\x1\x7A\x7\xFFFF";
		private const string DFA36_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x2";
		private const string DFA36_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x2\x3\x6\xFFFF\x1\x3\xA\xFFFF\x1\x3\x1\x5\x1\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x3\xFFFF\x1\x6\x12\xFFFF\x1\x1\x1\x4\x1\x1\x5\x4\x1\x1\x1\x4\x2"+
				"\x1\x1\x4\x1\x2\x1\x4\xB\xFFFF\x1\x3\x1\x7\x4\xFFFF\x1\x5\x1\x8\x6\xFFFF"+
				"\x1\x3",
				"",
				"\x1\x4\x3C\xFFFF\x1\x9",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "143:1: primaryExperession : ( collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp -> ^( PRIMITIVELITERAL primitiveLiteralExp ) | enumAndType -> ^( TYPE enumAndType ) | propertyCall | '(' oclExpression ')' | ifExp | letExp );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _contextDeclaration_in_contextDeclarationList170 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _propertyContextDecl_in_contextDeclaration193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextDecl_in_contextDeclaration197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextDecl_in_contextDeclaration201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyContextHead_in_propertyContextDecl211 = new BitSet(new ulong[]{0x2UL,0x408000000000UL});
		public static readonly BitSet _initOrDerValue_in_propertyContextDecl213 = new BitSet(new ulong[]{0x2UL,0x408000000000UL});
		public static readonly BitSet _101_in_propertyContextHead236 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead238 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_propertyContextHead241 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead243 = new BitSet(new ulong[]{0x0UL,0x60UL});
		public static readonly BitSet _69_in_propertyContextHead247 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_propertyContextHead249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextHead_in_operationContextDecl273 = new BitSet(new ulong[]{0x2UL,0x30001000000000UL});
		public static readonly BitSet _prePostOrBodyDecl_in_operationContextDecl275 = new BitSet(new ulong[]{0x2UL,0x30001000000000UL});
		public static readonly BitSet _101_in_operationContextHead298 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _operation_in_operationContextHead300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextHead_in_classifierContextDecl318 = new BitSet(new ulong[]{0x2UL,0x40804000000000UL});
		public static readonly BitSet _invOrDef_in_classifierContextDecl321 = new BitSet(new ulong[]{0x2UL,0x40804000000000UL});
		public static readonly BitSet _101_in_classifierContextHead346 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _pathName_in_classifierContextHead348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_classifierContextHead364 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_classifierContextHead366 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_classifierContextHead367 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _pathName_in_classifierContextHead368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_initOrDerValue391 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_initOrDerValue393 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_initOrDerValue410 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_initOrDerValue412 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_invOrDef434 = new BitSet(new ulong[]{0x8000000000000UL,0x20UL});
		public static readonly BitSet _SimpleName_in_invOrDef437 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_invOrDef442 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_invOrDef444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_invOrDef464 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_invOrDef469 = new BitSet(new ulong[]{0x8000000000000UL,0x20UL});
		public static readonly BitSet _SimpleName_in_invOrDef471 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_invOrDef474 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _defExpression_in_invOrDef476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_prePostOrBodyDecl505 = new BitSet(new ulong[]{0x8000000000000UL,0x20UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl508 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_prePostOrBodyDecl512 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_prePostOrBodyDecl531 = new BitSet(new ulong[]{0x8000000000000UL,0x20UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl534 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_prePostOrBodyDecl538 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_prePostOrBodyDecl557 = new BitSet(new ulong[]{0x8000000000000UL,0x20UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl560 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_prePostOrBodyDecl564 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_operation588 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_operation592 = new BitSet(new ulong[]{0x4008000000000000UL});
		public static readonly BitSet _parameters_in_operation594 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_operation597 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_operation600 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_operation602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationList_in_parameters630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_defExpression643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operation_in_defExpression649 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_defExpression651 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_defExpression653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalImpliesExpression_in_oclExpression677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression693 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_logicalImpliesExpression702 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression706 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression731 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_logicalXorExpression739 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression743 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression767 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_logicalOrExpression775 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression779 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression803 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_logicalAndExpression812 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression816 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression841 = new BitSet(new ulong[]{0x2UL,0xC00UL});
		public static readonly BitSet _75_in_relationalEqExpression850 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _74_in_relationalEqExpression854 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression859 = new BitSet(new ulong[]{0x2UL,0xC00UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion886 = new BitSet(new ulong[]{0x2UL,0x3300UL});
		public static readonly BitSet _72_in_relationalNotEqExprassion896 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _76_in_relationalNotEqExprassion901 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _73_in_relationalNotEqExprassion906 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _77_in_relationalNotEqExprassion911 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion916 = new BitSet(new ulong[]{0x2UL,0x3300UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression942 = new BitSet(new ulong[]{0x8000000000000002UL,0x2UL});
		public static readonly BitSet _63_in_additiveExpression951 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _65_in_additiveExpression955 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression961 = new BitSet(new ulong[]{0x8000000000000002UL,0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression988 = new BitSet(new ulong[]{0x200000000000002UL,0x10UL});
		public static readonly BitSet _UnlimitedNaturalLiteralExp_in_multiplicativeExpression997 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _68_in_multiplicativeExpression1001 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression1006 = new BitSet(new ulong[]{0x200000000000002UL,0x10UL});
		public static readonly BitSet _65_in_unaryExpression1034 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _114_in_unaryExpression1038 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _termExpression_in_unaryExpression1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _termExpression_in_unaryExpression1057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExperession_in_termExpression1071 = new BitSet(new ulong[]{0x2UL,0x60000000CUL});
		public static readonly BitSet _67_in_termExpression1082 = new BitSet(new ulong[]{0x8000000000000UL,0x1000000000000UL});
		public static readonly BitSet _66_in_termExpression1086 = new BitSet(new ulong[]{0x8000000000000UL,0x1000000000000UL});
		public static readonly BitSet _propertyCall_in_termExpression1091 = new BitSet(new ulong[]{0x2UL,0x60000000CUL});
		public static readonly BitSet _oclMessageExp_in_termExpression1115 = new BitSet(new ulong[]{0x2UL,0x60000000CUL});
		public static readonly BitSet _collectionLiteralExpAndType_in_primaryExperession1157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleLiteralExp_in_primaryExperession1165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveLiteralExp_in_primaryExperession1175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumAndType_in_primaryExperession1193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyCall_in_primaryExperession1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_primaryExperession1214 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_primaryExperession1216 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_primaryExperession1217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifExp_in_primaryExperession1223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _letExp_in_primaryExperession1228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_propertyCall1238 = new BitSet(new ulong[]{0x2000000000000002UL,0x80008000UL});
		public static readonly BitSet _95_in_propertyCall1241 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _arguments_in_propertyCall1242 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_propertyCall1243 = new BitSet(new ulong[]{0x2000000000000002UL,0x8000UL});
		public static readonly BitSet _isMarkedPre_in_propertyCall1247 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_propertyCall1251 = new BitSet(new ulong[]{0x622C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _propertyCallParametrs_in_propertyCall1252 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_propertyCall1253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_propertyCall1301 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_propertyCall1303 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyCall1330 = new BitSet(new ulong[]{0x0UL,0xA0UL});
		public static readonly BitSet _69_in_propertyCall1334 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_propertyCall1341 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_propertyCall1345 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyCall1350 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _69_in_propertyCall1353 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_propertyCall1359 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_propertyCall1362 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_propertyCall1368 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _SimpleName_in_propertyCall1384 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _69_in_propertyCall1387 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_propertyCall1392 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_propertyCall1395 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_propertyCall1401 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_propertyCall1413 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_propertyCall1419 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_propertyCall1421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarePropertyCallParametrs_in_propertyCallParametrs1477 = new BitSet(new ulong[]{0x222C008180000002UL,0x1070C007FFF0002UL});
		public static readonly BitSet _arguments_in_propertyCallParametrs1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs1514 = new BitSet(new ulong[]{0x0UL,0x800000000000001UL});
		public static readonly BitSet _64_in_declarePropertyCallParametrs1517 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs1521 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_declarePropertyCallParametrs1525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_typedef1553 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_typedef1555 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_typedef1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_enumAndType1593 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _tupleType_in_enumAndType1601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_enumAndType1606 = new BitSet(new ulong[]{0x0UL,0x520A0000UL});
		public static readonly BitSet _primitiveType_in_enumAndType1611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_enumAndType1616 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _oclType_in_enumAndType1620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_pathName1637 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_pathName1640 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_pathName1642 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExpAndType1671 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _122_in_collectionLiteralExpAndType1674 = new BitSet(new ulong[]{0x222C008180000000UL,0x11070C007FFF0002UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExpAndType1676 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_collectionLiteralExpAndType1679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExpAndType1700 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_collectionLiteralExpAndType1703 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_collectionLiteralExpAndType1705 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_collectionLiteralExpAndType1708 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _122_in_collectionLiteralExpAndType1718 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExpAndType1720 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_collectionLiteralExpAndType1722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_enumLiteralExp1769 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _70_in_enumLiteralExp1770 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_enumLiteralExp1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp1784 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_collectionLiteralExp1787 = new BitSet(new ulong[]{0x222C008180000000UL,0x11070C007FFF0002UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1789 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_collectionLiteralExp1792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_collectionLiteralExp1796 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_collectionLiteralExp1798 = new BitSet(new ulong[]{0x222C008180000000UL,0x11070C007FFF0002UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1800 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_collectionLiteralExp1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_collectionTypeIdentifier1819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts1850 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_collectionLiteralParts1854 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts1857 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1874 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _DoubleDot_in_collectionLiteralPart1878 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveLiteralExp1914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_tupleLiteralExp1971 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_tupleLiteralExp1973 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleLiteralExp1975 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_tupleLiteralExp1978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeLiteralExp2000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration2015 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_variableDeclaration2017 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_variableDeclaration2019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration2042 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _69_in_variableDeclaration2045 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_variableDeclaration2047 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_variableDeclaration2052 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_variableDeclaration2054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_type2083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_type2091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_type2097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_type2104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_type2111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType2125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_oclType2175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionType2217 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_collectionType2219 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_collectionType2221 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_collectionType2224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_tupleType2249 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_tupleType2252 = new BitSet(new ulong[]{0x4008000000000000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleType2255 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_tupleType2259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList2275 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_variableDeclarationList2279 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList2282 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _79_in_isMarkedPre2298 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_isMarkedPre2301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_arguments2317 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_arguments2322 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_arguments2327 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _113_in_letExp2343 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _variableDeclaration_in_letExp2345 = new BitSet(new ulong[]{0x0UL,0x200000000001UL});
		public static readonly BitSet _letExpSub_in_letExp2348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_letExpSub2370 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _variableDeclaration_in_letExpSub2372 = new BitSet(new ulong[]{0x0UL,0x200000000001UL});
		public static readonly BitSet _letExpSub_in_letExpSub2375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_letExpSub2390 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_letExpSub2401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_oclMessageExp2417 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp2419 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_oclMessageExp2421 = new BitSet(new ulong[]{0x622C008180000000UL,0x1070C007FFF4002UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp2423 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_oclMessageExp2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_oclMessageExp2431 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp2433 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_oclMessageExp2435 = new BitSet(new ulong[]{0x622C008180000000UL,0x1070C007FFF4002UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp2437 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_oclMessageExp2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclMessageArg_in_oclMessageArguments2450 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_oclMessageArguments2454 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF4002UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageArguments2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_oclMessageArg2471 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_oclMessageArg2474 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_oclMessageArg2476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_oclMessageArg2483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_ifExp2497 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_ifExp2499 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_ifExp2501 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_ifExp2503 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_ifExp2505 = new BitSet(new ulong[]{0x222C008180000000UL,0x1070C007FFF0002UL});
		public static readonly BitSet _oclExpression_in_ifExp2507 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_ifExp2509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_synpred1_OCLSyntax1314 = new BitSet(new ulong[]{0x0UL,0xA0UL});
		public static readonly BitSet _69_in_synpred1_OCLSyntax1318 = new BitSet(new ulong[]{0x8000000000000UL,0x7FFF0000UL});
		public static readonly BitSet _type_in_synpred1_OCLSyntax1321 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_synpred1_OCLSyntax1325 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace Exolutio.Model.OCL.Compiler
