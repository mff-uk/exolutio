//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\Model\\OCL\\Grammar\\OCL.g3 2012-02-26 22:10:02

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int BooleanLiteralExp=4;
	public const int Char=5;
	public const int EscapeSequence=6;
	public const int ExponentPart=7;
	public const int Hex=8;
	public const int IntegerLiteralExp=9;
	public const int InvalidLiteralExp=10;
	public const int LINE_COMMENT=11;
	public const int NESTED_ML_COMMENT=12;
	public const int NameChar=13;
	public const int NameStartChar=14;
	public const int NullLiteralExp=15;
	public const int Num=16;
	public const int RealLiteralExp=17;
	public const int SimpleName=18;
	public const int StringChar=19;
	public const int StringLiteralExp=20;
	public const int UnlimitedNaturalLiteralExp=21;
	public const int WS=22;
	public const int WhiteSpaceChar=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;

    // delegates
    // delegators

	public OCLLexer()
	{
		OnCreated();
	}

	public OCLLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public OCLLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "..\\..\\Model\\OCL\\Grammar\\OCL.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 1);
		TraceIn("T__24", 1);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:10:7: ( '(' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:10:9: '('
			{
			DebugLocation(10, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 1);
			LeaveRule("T__24", 1);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 2);
		TraceIn("T__25", 2);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:11:7: ( ')' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:11:9: ')'
			{
			DebugLocation(11, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 2);
			LeaveRule("T__25", 2);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 3);
		TraceIn("T__26", 3);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:12:7: ( '+' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:12:9: '+'
			{
			DebugLocation(12, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 3);
			LeaveRule("T__26", 3);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 4);
		TraceIn("T__27", 4);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:13:7: ( ',' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:13:9: ','
			{
			DebugLocation(13, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 4);
			LeaveRule("T__27", 4);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 5);
		TraceIn("T__28", 5);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:14:7: ( '-' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:14:9: '-'
			{
			DebugLocation(14, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 5);
			LeaveRule("T__28", 5);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 6);
		TraceIn("T__29", 6);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:15:7: ( '->' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:15:9: '->'
			{
			DebugLocation(15, 9);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 6);
			LeaveRule("T__29", 6);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 7);
		TraceIn("T__30", 7);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:16:7: ( '.' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:16:9: '.'
			{
			DebugLocation(16, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 7);
			LeaveRule("T__30", 7);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 8);
		TraceIn("T__31", 8);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:17:7: ( '..' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:17:9: '..'
			{
			DebugLocation(17, 9);
			Match(".."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 8);
			LeaveRule("T__31", 8);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 9);
		TraceIn("T__32", 9);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:18:7: ( '/' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:18:9: '/'
			{
			DebugLocation(18, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 9);
			LeaveRule("T__32", 9);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 10);
		TraceIn("T__33", 10);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:19:7: ( ':' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:19:9: ':'
			{
			DebugLocation(19, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 10);
			LeaveRule("T__33", 10);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 11);
		TraceIn("T__34", 11);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:20:7: ( '::' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:20:9: '::'
			{
			DebugLocation(20, 9);
			Match("::"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 11);
			LeaveRule("T__34", 11);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 12);
		TraceIn("T__35", 12);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:21:7: ( ';' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:21:9: ';'
			{
			DebugLocation(21, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 12);
			LeaveRule("T__35", 12);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 13);
		TraceIn("T__36", 13);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:22:7: ( '<' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:22:9: '<'
			{
			DebugLocation(22, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 13);
			LeaveRule("T__36", 13);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 14);
		TraceIn("T__37", 14);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:23:7: ( '<=' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:23:9: '<='
			{
			DebugLocation(23, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 14);
			LeaveRule("T__37", 14);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 15);
		TraceIn("T__38", 15);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:24:7: ( '<>' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:24:9: '<>'
			{
			DebugLocation(24, 9);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 15);
			LeaveRule("T__38", 15);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 16);
		TraceIn("T__39", 16);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:25:7: ( '=' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:25:9: '='
			{
			DebugLocation(25, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 16);
			LeaveRule("T__39", 16);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 17);
		TraceIn("T__40", 17);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:26:7: ( '>' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:26:9: '>'
			{
			DebugLocation(26, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 17);
			LeaveRule("T__40", 17);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 18);
		TraceIn("T__41", 18);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:27:7: ( '>=' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:27:9: '>='
			{
			DebugLocation(27, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 18);
			LeaveRule("T__41", 18);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 19);
		TraceIn("T__42", 19);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:28:7: ( '?' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:28:9: '?'
			{
			DebugLocation(28, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 19);
			LeaveRule("T__42", 19);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 20);
		TraceIn("T__43", 20);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:29:7: ( '@' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:29:9: '@'
			{
			DebugLocation(29, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 20);
			LeaveRule("T__43", 20);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 21);
		TraceIn("T__44", 21);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:30:7: ( 'Bag' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:30:9: 'Bag'
			{
			DebugLocation(30, 9);
			Match("Bag"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 21);
			LeaveRule("T__44", 21);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 22);
		TraceIn("T__45", 22);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:31:7: ( 'Boolean' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:31:9: 'Boolean'
			{
			DebugLocation(31, 9);
			Match("Boolean"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 22);
			LeaveRule("T__45", 22);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 23);
		TraceIn("T__46", 23);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:32:7: ( 'Collection' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:32:9: 'Collection'
			{
			DebugLocation(32, 9);
			Match("Collection"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 23);
			LeaveRule("T__46", 23);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 24);
		TraceIn("T__47", 24);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:33:7: ( 'Integer' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:33:9: 'Integer'
			{
			DebugLocation(33, 9);
			Match("Integer"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 24);
			LeaveRule("T__47", 24);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 25);
		TraceIn("T__48", 25);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:34:7: ( 'OclAny' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:34:9: 'OclAny'
			{
			DebugLocation(34, 9);
			Match("OclAny"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 25);
			LeaveRule("T__48", 25);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 26);
		TraceIn("T__49", 26);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:35:7: ( 'OclInvalid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:35:9: 'OclInvalid'
			{
			DebugLocation(35, 9);
			Match("OclInvalid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 26);
			LeaveRule("T__49", 26);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 27);
		TraceIn("T__50", 27);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:36:7: ( 'OclMessage' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:36:9: 'OclMessage'
			{
			DebugLocation(36, 9);
			Match("OclMessage"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 27);
			LeaveRule("T__50", 27);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 28);
		TraceIn("T__51", 28);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:37:7: ( 'OclVoid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:37:9: 'OclVoid'
			{
			DebugLocation(37, 9);
			Match("OclVoid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 28);
			LeaveRule("T__51", 28);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 29);
		TraceIn("T__52", 29);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:38:7: ( 'OrderedSet' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:38:9: 'OrderedSet'
			{
			DebugLocation(38, 9);
			Match("OrderedSet"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 29);
			LeaveRule("T__52", 29);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 30);
		TraceIn("T__53", 30);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:39:7: ( 'Real' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:39:9: 'Real'
			{
			DebugLocation(39, 9);
			Match("Real"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 30);
			LeaveRule("T__53", 30);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 31);
		TraceIn("T__54", 31);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:40:7: ( 'Sequence' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:40:9: 'Sequence'
			{
			DebugLocation(40, 9);
			Match("Sequence"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 31);
			LeaveRule("T__54", 31);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 32);
		TraceIn("T__55", 32);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:41:7: ( 'Set' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:41:9: 'Set'
			{
			DebugLocation(41, 9);
			Match("Set"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 32);
			LeaveRule("T__55", 32);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 33);
		TraceIn("T__56", 33);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:42:7: ( 'String' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:42:9: 'String'
			{
			DebugLocation(42, 9);
			Match("String"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 33);
			LeaveRule("T__56", 33);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 34);
		TraceIn("T__57", 34);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:43:7: ( 'Tuple' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:43:9: 'Tuple'
			{
			DebugLocation(43, 9);
			Match("Tuple"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 34);
			LeaveRule("T__57", 34);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 35);
		TraceIn("T__58", 35);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:44:7: ( 'UnlimitedNatural' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:44:9: 'UnlimitedNatural'
			{
			DebugLocation(44, 9);
			Match("UnlimitedNatural"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 35);
			LeaveRule("T__58", 35);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 36);
		TraceIn("T__59", 36);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:45:7: ( '[' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:45:9: '['
			{
			DebugLocation(45, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 36);
			LeaveRule("T__59", 36);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 37);
		TraceIn("T__60", 37);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:46:7: ( ']' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:46:9: ']'
			{
			DebugLocation(46, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 37);
			LeaveRule("T__60", 37);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 38);
		TraceIn("T__61", 38);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:47:7: ( '^' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:47:9: '^'
			{
			DebugLocation(47, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 38);
			LeaveRule("T__61", 38);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 39);
		TraceIn("T__62", 39);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:48:7: ( '^^' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:48:9: '^^'
			{
			DebugLocation(48, 9);
			Match("^^"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 39);
			LeaveRule("T__62", 39);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 40);
		TraceIn("T__63", 40);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:49:7: ( 'and' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:49:9: 'and'
			{
			DebugLocation(49, 9);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 40);
			LeaveRule("T__63", 40);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 41);
		TraceIn("T__64", 41);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:50:7: ( 'body' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:50:9: 'body'
			{
			DebugLocation(50, 9);
			Match("body"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 41);
			LeaveRule("T__64", 41);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 42);
		TraceIn("T__65", 42);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:51:7: ( 'context' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:51:9: 'context'
			{
			DebugLocation(51, 9);
			Match("context"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 42);
			LeaveRule("T__65", 42);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 43);
		TraceIn("T__66", 43);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:52:7: ( 'derivate' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:52:9: 'derivate'
			{
			DebugLocation(52, 9);
			Match("derivate"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 43);
			LeaveRule("T__66", 43);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 44);
		TraceIn("T__67", 44);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:53:7: ( 'else' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:53:9: 'else'
			{
			DebugLocation(53, 9);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 44);
			LeaveRule("T__67", 44);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 45);
		TraceIn("T__68", 45);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:54:7: ( 'endif' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:54:9: 'endif'
			{
			DebugLocation(54, 9);
			Match("endif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 45);
			LeaveRule("T__68", 45);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_T__69();
	partial void LeaveRule_T__69();

	// $ANTLR start "T__69"
	[GrammarRule("T__69")]
	private void mT__69()
	{
		EnterRule_T__69();
		EnterRule("T__69", 46);
		TraceIn("T__69", 46);
		try
		{
			int _type = T__69;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:55:7: ( 'if' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:55:9: 'if'
			{
			DebugLocation(55, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__69", 46);
			LeaveRule("T__69", 46);
			LeaveRule_T__69();
		}
	}
	// $ANTLR end "T__69"

	partial void EnterRule_T__70();
	partial void LeaveRule_T__70();

	// $ANTLR start "T__70"
	[GrammarRule("T__70")]
	private void mT__70()
	{
		EnterRule_T__70();
		EnterRule("T__70", 47);
		TraceIn("T__70", 47);
		try
		{
			int _type = T__70;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:56:7: ( 'implies' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:56:9: 'implies'
			{
			DebugLocation(56, 9);
			Match("implies"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__70", 47);
			LeaveRule("T__70", 47);
			LeaveRule_T__70();
		}
	}
	// $ANTLR end "T__70"

	partial void EnterRule_T__71();
	partial void LeaveRule_T__71();

	// $ANTLR start "T__71"
	[GrammarRule("T__71")]
	private void mT__71()
	{
		EnterRule_T__71();
		EnterRule("T__71", 48);
		TraceIn("T__71", 48);
		try
		{
			int _type = T__71;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:57:7: ( 'in' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:57:9: 'in'
			{
			DebugLocation(57, 9);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__71", 48);
			LeaveRule("T__71", 48);
			LeaveRule_T__71();
		}
	}
	// $ANTLR end "T__71"

	partial void EnterRule_T__72();
	partial void LeaveRule_T__72();

	// $ANTLR start "T__72"
	[GrammarRule("T__72")]
	private void mT__72()
	{
		EnterRule_T__72();
		EnterRule("T__72", 49);
		TraceIn("T__72", 49);
		try
		{
			int _type = T__72;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:58:7: ( 'init' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:58:9: 'init'
			{
			DebugLocation(58, 9);
			Match("init"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__72", 49);
			LeaveRule("T__72", 49);
			LeaveRule_T__72();
		}
	}
	// $ANTLR end "T__72"

	partial void EnterRule_T__73();
	partial void LeaveRule_T__73();

	// $ANTLR start "T__73"
	[GrammarRule("T__73")]
	private void mT__73()
	{
		EnterRule_T__73();
		EnterRule("T__73", 50);
		TraceIn("T__73", 50);
		try
		{
			int _type = T__73;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:59:7: ( 'inv' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:59:9: 'inv'
			{
			DebugLocation(59, 9);
			Match("inv"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__73", 50);
			LeaveRule("T__73", 50);
			LeaveRule_T__73();
		}
	}
	// $ANTLR end "T__73"

	partial void EnterRule_T__74();
	partial void LeaveRule_T__74();

	// $ANTLR start "T__74"
	[GrammarRule("T__74")]
	private void mT__74()
	{
		EnterRule_T__74();
		EnterRule("T__74", 51);
		TraceIn("T__74", 51);
		try
		{
			int _type = T__74;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:60:7: ( 'iterate' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:60:9: 'iterate'
			{
			DebugLocation(60, 9);
			Match("iterate"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__74", 51);
			LeaveRule("T__74", 51);
			LeaveRule_T__74();
		}
	}
	// $ANTLR end "T__74"

	partial void EnterRule_T__75();
	partial void LeaveRule_T__75();

	// $ANTLR start "T__75"
	[GrammarRule("T__75")]
	private void mT__75()
	{
		EnterRule_T__75();
		EnterRule("T__75", 52);
		TraceIn("T__75", 52);
		try
		{
			int _type = T__75;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:61:7: ( 'let' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:61:9: 'let'
			{
			DebugLocation(61, 9);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__75", 52);
			LeaveRule("T__75", 52);
			LeaveRule_T__75();
		}
	}
	// $ANTLR end "T__75"

	partial void EnterRule_T__76();
	partial void LeaveRule_T__76();

	// $ANTLR start "T__76"
	[GrammarRule("T__76")]
	private void mT__76()
	{
		EnterRule_T__76();
		EnterRule("T__76", 53);
		TraceIn("T__76", 53);
		try
		{
			int _type = T__76;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:62:7: ( 'not' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:62:9: 'not'
			{
			DebugLocation(62, 9);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__76", 53);
			LeaveRule("T__76", 53);
			LeaveRule_T__76();
		}
	}
	// $ANTLR end "T__76"

	partial void EnterRule_T__77();
	partial void LeaveRule_T__77();

	// $ANTLR start "T__77"
	[GrammarRule("T__77")]
	private void mT__77()
	{
		EnterRule_T__77();
		EnterRule("T__77", 54);
		TraceIn("T__77", 54);
		try
		{
			int _type = T__77;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:63:7: ( 'or' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:63:9: 'or'
			{
			DebugLocation(63, 9);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__77", 54);
			LeaveRule("T__77", 54);
			LeaveRule_T__77();
		}
	}
	// $ANTLR end "T__77"

	partial void EnterRule_T__78();
	partial void LeaveRule_T__78();

	// $ANTLR start "T__78"
	[GrammarRule("T__78")]
	private void mT__78()
	{
		EnterRule_T__78();
		EnterRule("T__78", 55);
		TraceIn("T__78", 55);
		try
		{
			int _type = T__78;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:64:7: ( 'post' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:64:9: 'post'
			{
			DebugLocation(64, 9);
			Match("post"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__78", 55);
			LeaveRule("T__78", 55);
			LeaveRule_T__78();
		}
	}
	// $ANTLR end "T__78"

	partial void EnterRule_T__79();
	partial void LeaveRule_T__79();

	// $ANTLR start "T__79"
	[GrammarRule("T__79")]
	private void mT__79()
	{
		EnterRule_T__79();
		EnterRule("T__79", 56);
		TraceIn("T__79", 56);
		try
		{
			int _type = T__79;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:65:7: ( 'pre' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:65:9: 'pre'
			{
			DebugLocation(65, 9);
			Match("pre"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__79", 56);
			LeaveRule("T__79", 56);
			LeaveRule_T__79();
		}
	}
	// $ANTLR end "T__79"

	partial void EnterRule_T__80();
	partial void LeaveRule_T__80();

	// $ANTLR start "T__80"
	[GrammarRule("T__80")]
	private void mT__80()
	{
		EnterRule_T__80();
		EnterRule("T__80", 57);
		TraceIn("T__80", 57);
		try
		{
			int _type = T__80;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:66:7: ( 'then' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:66:9: 'then'
			{
			DebugLocation(66, 9);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__80", 57);
			LeaveRule("T__80", 57);
			LeaveRule_T__80();
		}
	}
	// $ANTLR end "T__80"

	partial void EnterRule_T__81();
	partial void LeaveRule_T__81();

	// $ANTLR start "T__81"
	[GrammarRule("T__81")]
	private void mT__81()
	{
		EnterRule_T__81();
		EnterRule("T__81", 58);
		TraceIn("T__81", 58);
		try
		{
			int _type = T__81;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:67:7: ( 'xor' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:67:9: 'xor'
			{
			DebugLocation(67, 9);
			Match("xor"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__81", 58);
			LeaveRule("T__81", 58);
			LeaveRule_T__81();
		}
	}
	// $ANTLR end "T__81"

	partial void EnterRule_T__82();
	partial void LeaveRule_T__82();

	// $ANTLR start "T__82"
	[GrammarRule("T__82")]
	private void mT__82()
	{
		EnterRule_T__82();
		EnterRule("T__82", 59);
		TraceIn("T__82", 59);
		try
		{
			int _type = T__82;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:68:7: ( '{' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:68:9: '{'
			{
			DebugLocation(68, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__82", 59);
			LeaveRule("T__82", 59);
			LeaveRule_T__82();
		}
	}
	// $ANTLR end "T__82"

	partial void EnterRule_T__83();
	partial void LeaveRule_T__83();

	// $ANTLR start "T__83"
	[GrammarRule("T__83")]
	private void mT__83()
	{
		EnterRule_T__83();
		EnterRule("T__83", 60);
		TraceIn("T__83", 60);
		try
		{
			int _type = T__83;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:69:7: ( '|' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:69:9: '|'
			{
			DebugLocation(69, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__83", 60);
			LeaveRule("T__83", 60);
			LeaveRule_T__83();
		}
	}
	// $ANTLR end "T__83"

	partial void EnterRule_T__84();
	partial void LeaveRule_T__84();

	// $ANTLR start "T__84"
	[GrammarRule("T__84")]
	private void mT__84()
	{
		EnterRule_T__84();
		EnterRule("T__84", 61);
		TraceIn("T__84", 61);
		try
		{
			int _type = T__84;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:70:7: ( '}' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:70:9: '}'
			{
			DebugLocation(70, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__84", 61);
			LeaveRule("T__84", 61);
			LeaveRule_T__84();
		}
	}
	// $ANTLR end "T__84"

	partial void EnterRule_BooleanLiteralExp();
	partial void LeaveRule_BooleanLiteralExp();

	// $ANTLR start "BooleanLiteralExp"
	[GrammarRule("BooleanLiteralExp")]
	private void mBooleanLiteralExp()
	{
		EnterRule_BooleanLiteralExp();
		EnterRule("BooleanLiteralExp", 62);
		TraceIn("BooleanLiteralExp", 62);
		try
		{
			int _type = BooleanLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:403:2: ( 'true' | 'false' )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='t'))
			{
				alt1 = 1;
			}
			else if ((LA1_0=='f'))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:403:3: 'true'
				{
				DebugLocation(403, 3);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:404:3: 'false'
				{
				DebugLocation(404, 3);
				Match("false"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BooleanLiteralExp", 62);
			LeaveRule("BooleanLiteralExp", 62);
			LeaveRule_BooleanLiteralExp();
		}
	}
	// $ANTLR end "BooleanLiteralExp"

	partial void EnterRule_NullLiteralExp();
	partial void LeaveRule_NullLiteralExp();

	// $ANTLR start "NullLiteralExp"
	[GrammarRule("NullLiteralExp")]
	private void mNullLiteralExp()
	{
		EnterRule_NullLiteralExp();
		EnterRule("NullLiteralExp", 63);
		TraceIn("NullLiteralExp", 63);
		try
		{
			int _type = NullLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:408:2: ( 'null' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:408:4: 'null'
			{
			DebugLocation(408, 4);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NullLiteralExp", 63);
			LeaveRule("NullLiteralExp", 63);
			LeaveRule_NullLiteralExp();
		}
	}
	// $ANTLR end "NullLiteralExp"

	partial void EnterRule_InvalidLiteralExp();
	partial void LeaveRule_InvalidLiteralExp();

	// $ANTLR start "InvalidLiteralExp"
	[GrammarRule("InvalidLiteralExp")]
	private void mInvalidLiteralExp()
	{
		EnterRule_InvalidLiteralExp();
		EnterRule("InvalidLiteralExp", 64);
		TraceIn("InvalidLiteralExp", 64);
		try
		{
			int _type = InvalidLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:412:2: ( 'invalid' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:412:4: 'invalid'
			{
			DebugLocation(412, 4);
			Match("invalid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("InvalidLiteralExp", 64);
			LeaveRule("InvalidLiteralExp", 64);
			LeaveRule_InvalidLiteralExp();
		}
	}
	// $ANTLR end "InvalidLiteralExp"

	partial void EnterRule_SimpleName();
	partial void LeaveRule_SimpleName();

	// $ANTLR start "SimpleName"
	[GrammarRule("SimpleName")]
	private void mSimpleName()
	{
		EnterRule_SimpleName();
		EnterRule("SimpleName", 65);
		TraceIn("SimpleName", 65);
		try
		{
			int _type = SimpleName;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:418:2: ( NameStartChar ( NameChar )* | '_' '\\'' ( StringChar )* '\\'' )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0=='_'))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1=='\''))
				{
					alt4 = 2;
				}
				else
				{
					alt4 = 1;}
			}
			else if ((LA4_0=='$'||(LA4_0>='A' && LA4_0<='Z')||(LA4_0>='a' && LA4_0<='z')||(LA4_0>='\u00C0' && LA4_0<='\u00D6')||(LA4_0>='\u00D8' && LA4_0<='\u00F6')||(LA4_0>='\u00F8' && LA4_0<='\u02FF')||(LA4_0>='\u0370' && LA4_0<='\u037D')||(LA4_0>='\u037F' && LA4_0<='\u1FFF')||(LA4_0>='\u200C' && LA4_0<='\u200D')||(LA4_0>='\u2070' && LA4_0<='\u218F')||(LA4_0>='\u2C00' && LA4_0<='\u2FEF')||(LA4_0>='\u3001' && LA4_0<='\uD7FF')||(LA4_0>='\uF900' && LA4_0<='\uFDCF')||(LA4_0>='\uFDF0' && LA4_0<='\uFFFD')))
			{
				alt4 = 1;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:418:4: NameStartChar ( NameChar )*
				{
				DebugLocation(418, 4);
				mNameStartChar(); 
				DebugLocation(418, 18);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:418:18: ( NameChar )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if ((LA2_0=='$'||(LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')||(LA2_0>='\u00C0' && LA2_0<='\u00D6')||(LA2_0>='\u00D8' && LA2_0<='\u00F6')||(LA2_0>='\u00F8' && LA2_0<='\u02FF')||(LA2_0>='\u0370' && LA2_0<='\u037D')||(LA2_0>='\u037F' && LA2_0<='\u1FFF')||(LA2_0>='\u200C' && LA2_0<='\u200D')||(LA2_0>='\u2070' && LA2_0<='\u218F')||(LA2_0>='\u2C00' && LA2_0<='\u2FEF')||(LA2_0>='\u3001' && LA2_0<='\uD7FF')||(LA2_0>='\uF900' && LA2_0<='\uFDCF')||(LA2_0>='\uFDF0' && LA2_0<='\uFFFD')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
						{
						DebugLocation(418, 18);
						input.Consume();


						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:419:4: '_' '\\'' ( StringChar )* '\\''
				{
				DebugLocation(419, 4);
				Match('_'); 
				DebugLocation(419, 8);
				Match('\''); 
				DebugLocation(419, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:419:13: ( StringChar )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>=' ' && LA3_0<='&')||(LA3_0>='(' && LA3_0<='\uD7FF')||(LA3_0>='\uE000' && LA3_0<='\uFFFD')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:419:13: StringChar
						{
						DebugLocation(419, 13);
						mStringChar(); 

						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(419, 25);
				Match('\''); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SimpleName", 65);
			LeaveRule("SimpleName", 65);
			LeaveRule_SimpleName();
		}
	}
	// $ANTLR end "SimpleName"

	partial void EnterRule_UnlimitedNaturalLiteralExp();
	partial void LeaveRule_UnlimitedNaturalLiteralExp();

	// $ANTLR start "UnlimitedNaturalLiteralExp"
	[GrammarRule("UnlimitedNaturalLiteralExp")]
	private void mUnlimitedNaturalLiteralExp()
	{
		EnterRule_UnlimitedNaturalLiteralExp();
		EnterRule("UnlimitedNaturalLiteralExp", 66);
		TraceIn("UnlimitedNaturalLiteralExp", 66);
		try
		{
			int _type = UnlimitedNaturalLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:424:2: ( '*' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:424:3: '*'
			{
			DebugLocation(424, 3);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UnlimitedNaturalLiteralExp", 66);
			LeaveRule("UnlimitedNaturalLiteralExp", 66);
			LeaveRule_UnlimitedNaturalLiteralExp();
		}
	}
	// $ANTLR end "UnlimitedNaturalLiteralExp"

	partial void EnterRule_IntegerLiteralExp();
	partial void LeaveRule_IntegerLiteralExp();

	// $ANTLR start "IntegerLiteralExp"
	[GrammarRule("IntegerLiteralExp")]
	private void mIntegerLiteralExp()
	{
		EnterRule_IntegerLiteralExp();
		EnterRule("IntegerLiteralExp", 67);
		TraceIn("IntegerLiteralExp", 67);
		try
		{
			int _type = IntegerLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:426:2: ( '0' | '1' .. '9' ( Num )* )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0=='0'))
			{
				alt6 = 1;
			}
			else if (((LA6_0>='1' && LA6_0<='9')))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:426:4: '0'
				{
				DebugLocation(426, 4);
				Match('0'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:427:4: '1' .. '9' ( Num )*
				{
				DebugLocation(427, 4);
				MatchRange('1','9'); 
				DebugLocation(427, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:427:13: ( Num )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if (((LA5_0>='0' && LA5_0<='9')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
						{
						DebugLocation(427, 13);
						input.Consume();


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IntegerLiteralExp", 67);
			LeaveRule("IntegerLiteralExp", 67);
			LeaveRule_IntegerLiteralExp();
		}
	}
	// $ANTLR end "IntegerLiteralExp"

	partial void EnterRule_RealLiteralExp();
	partial void LeaveRule_RealLiteralExp();

	// $ANTLR start "RealLiteralExp"
	[GrammarRule("RealLiteralExp")]
	private void mRealLiteralExp()
	{
		EnterRule_RealLiteralExp();
		EnterRule("RealLiteralExp", 68);
		TraceIn("RealLiteralExp", 68);
		try
		{
			int _type = RealLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:2: ( ( Num )+ ( ( '.' ( Num )+ ( ExponentPart )? ) | ( ExponentPart ) ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:4: ( Num )+ ( ( '.' ( Num )+ ( ExponentPart )? ) | ( ExponentPart ) )
			{
			DebugLocation(430, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:4: ( Num )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='0' && LA7_0<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
					{
					DebugLocation(430, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(430, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:9: ( ( '.' ( Num )+ ( ExponentPart )? ) | ( ExponentPart ) )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='.'))
			{
				alt10 = 1;
			}
			else if ((LA10_0=='E'||LA10_0=='e'))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:10: ( '.' ( Num )+ ( ExponentPart )? )
				{
				DebugLocation(430, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:10: ( '.' ( Num )+ ( ExponentPart )? )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:11: '.' ( Num )+ ( ExponentPart )?
				{
				DebugLocation(430, 11);
				Match('.'); 
				DebugLocation(430, 14);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:14: ( Num )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>='0' && LA8_0<='9')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
						{
						DebugLocation(430, 14);
						input.Consume();


						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(430, 19);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:19: ( ExponentPart )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0=='E'||LA9_0=='e'))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:20: ExponentPart
					{
					DebugLocation(430, 20);
					mExponentPart(); 

					}
					break;

				}
				} finally { DebugExitSubRule(9); }


				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:37: ( ExponentPart )
				{
				DebugLocation(430, 37);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:37: ( ExponentPart )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:430:38: ExponentPart
				{
				DebugLocation(430, 38);
				mExponentPart(); 

				}


				}
				break;

			}
			} finally { DebugExitSubRule(10); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RealLiteralExp", 68);
			LeaveRule("RealLiteralExp", 68);
			LeaveRule_RealLiteralExp();
		}
	}
	// $ANTLR end "RealLiteralExp"

	partial void EnterRule_StringLiteralExp();
	partial void LeaveRule_StringLiteralExp();

	// $ANTLR start "StringLiteralExp"
	[GrammarRule("StringLiteralExp")]
	private void mStringLiteralExp()
	{
		EnterRule_StringLiteralExp();
		EnterRule("StringLiteralExp", 69);
		TraceIn("StringLiteralExp", 69);
		try
		{
			int _type = StringLiteralExp;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:434:2: ( '\\'' ( StringChar )* '\\'' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:434:4: '\\'' ( StringChar )* '\\''
			{
			DebugLocation(434, 4);
			Match('\''); 
			DebugLocation(434, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:434:9: ( StringChar )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>=' ' && LA11_0<='&')||(LA11_0>='(' && LA11_0<='\uD7FF')||(LA11_0>='\uE000' && LA11_0<='\uFFFD')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:434:9: StringChar
					{
					DebugLocation(434, 9);
					mStringChar(); 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(434, 21);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("StringLiteralExp", 69);
			LeaveRule("StringLiteralExp", 69);
			LeaveRule_StringLiteralExp();
		}
	}
	// $ANTLR end "StringLiteralExp"

	partial void EnterRule_NESTED_ML_COMMENT();
	partial void LeaveRule_NESTED_ML_COMMENT();

	// $ANTLR start "NESTED_ML_COMMENT"
	[GrammarRule("NESTED_ML_COMMENT")]
	private void mNESTED_ML_COMMENT()
	{
		EnterRule_NESTED_ML_COMMENT();
		EnterRule("NESTED_ML_COMMENT", 70);
		TraceIn("NESTED_ML_COMMENT", 70);
		try
		{
			int _type = NESTED_ML_COMMENT;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:439:5: ( '/*' ( options {greedy=false; } : NESTED_ML_COMMENT | . )* '*/' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:439:9: '/*' ( options {greedy=false; } : NESTED_ML_COMMENT | . )* '*/'
			{
			DebugLocation(439, 9);
			Match("/*"); 

			DebugLocation(440, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:440:9: ( options {greedy=false; } : NESTED_ML_COMMENT | . )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=3;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0=='*'))
				{
					int LA12_1 = input.LA(2);

					if ((LA12_1=='/'))
					{
						alt12 = 3;
					}
					else if (((LA12_1>='\u0000' && LA12_1<='.')||(LA12_1>='0' && LA12_1<='\uFFFF')))
					{
						alt12 = 2;
					}


				}
				else if ((LA12_0=='/'))
				{
					int LA12_2 = input.LA(2);

					if ((LA12_2=='*'))
					{
						alt12 = 1;
					}
					else if (((LA12_2>='\u0000' && LA12_2<=')')||(LA12_2>='+' && LA12_2<='\uFFFF')))
					{
						alt12 = 2;
					}


				}
				else if (((LA12_0>='\u0000' && LA12_0<=')')||(LA12_0>='+' && LA12_0<='.')||(LA12_0>='0' && LA12_0<='\uFFFF')))
				{
					alt12 = 2;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:440:36: NESTED_ML_COMMENT
					{
					DebugLocation(440, 36);
					mNESTED_ML_COMMENT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:440:56: .
					{
					DebugLocation(440, 56);
					MatchAny(); 

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(441, 9);
			Match("*/"); 

			DebugLocation(441, 14);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NESTED_ML_COMMENT", 70);
			LeaveRule("NESTED_ML_COMMENT", 70);
			LeaveRule_NESTED_ML_COMMENT();
		}
	}
	// $ANTLR end "NESTED_ML_COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 71);
		TraceIn("LINE_COMMENT", 71);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:2: ( '--' (~ ( '\\n' | '\\r' ) )* ( ( ( '\\r' )? '\\n' ) | EOF ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:3: '--' (~ ( '\\n' | '\\r' ) )* ( ( ( '\\r' )? '\\n' ) | EOF )
			{
			DebugLocation(445, 3);
			Match("--"); 

			DebugLocation(445, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:9: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if (((LA13_0>='\u0000' && LA13_0<='\t')||(LA13_0>='\u000B' && LA13_0<='\f')||(LA13_0>='\u000E' && LA13_0<='\uFFFF')))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
					{
					DebugLocation(445, 9);
					input.Consume();


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(445, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:23: ( ( ( '\\r' )? '\\n' ) | EOF )
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0=='\n'||LA15_0=='\r'))
			{
				alt15 = 1;
			}
			else
			{
				alt15 = 2;}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:24: ( ( '\\r' )? '\\n' )
				{
				DebugLocation(445, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:24: ( ( '\\r' )? '\\n' )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:25: ( '\\r' )? '\\n'
				{
				DebugLocation(445, 25);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:25: ( '\\r' )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0=='\r'))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:25: '\\r'
					{
					DebugLocation(445, 25);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(445, 31);
				Match('\n'); 

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:445:37: EOF
				{
				DebugLocation(445, 37);
				Match(EOF); 

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(445, 42);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 71);
			LeaveRule("LINE_COMMENT", 71);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 72);
		TraceIn("WS", 72);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:449:5: ( WhiteSpaceChar )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:449:9: WhiteSpaceChar
			{
			DebugLocation(449, 9);
			mWhiteSpaceChar(); 
			DebugLocation(449, 24);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 72);
			LeaveRule("WS", 72);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_NameStartChar();
	partial void LeaveRule_NameStartChar();

	// $ANTLR start "NameStartChar"
	[GrammarRule("NameStartChar")]
	private void mNameStartChar()
	{
		EnterRule_NameStartChar();
		EnterRule("NameStartChar", 73);
		TraceIn("NameStartChar", 73);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:458:2: ( 'A' .. 'Z' | '_' | '$' | 'a' .. 'z' | '\\u00C0' .. '\\u00D6' | '\\u00D8' .. '\\u00F6' | '\\u00F8' .. '\\u02FF' | '\\u0370' .. '\\u037D' | '\\u037F' .. '\\u1FFF' | '\\u200C' .. '\\u200D' | '\\u2070' .. '\\u218F' | '\\u2C00' .. '\\u2FEF' | '\\u3001' .. '\\uD7FF' | '\\uF900' .. '\\uFDCF' | '\\uFDF0' .. '\\uFFFD' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
			{
			DebugLocation(458, 2);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("NameStartChar", 73);
			LeaveRule("NameStartChar", 73);
			LeaveRule_NameStartChar();
		}
	}
	// $ANTLR end "NameStartChar"

	partial void EnterRule_NameChar();
	partial void LeaveRule_NameChar();

	// $ANTLR start "NameChar"
	[GrammarRule("NameChar")]
	private void mNameChar()
	{
		EnterRule_NameChar();
		EnterRule("NameChar", 74);
		TraceIn("NameChar", 74);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:467:2: ( NameStartChar | Num )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
			{
			DebugLocation(467, 2);
			if (input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("NameChar", 74);
			LeaveRule("NameChar", 74);
			LeaveRule_NameChar();
		}
	}
	// $ANTLR end "NameChar"

	partial void EnterRule_StringChar();
	partial void LeaveRule_StringChar();

	// $ANTLR start "StringChar"
	[GrammarRule("StringChar")]
	private void mStringChar()
	{
		EnterRule_StringChar();
		EnterRule("StringChar", 75);
		TraceIn("StringChar", 75);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:473:2: ( Char | EscapeSequence )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if (((LA16_0>=' ' && LA16_0<='&')||(LA16_0>='(' && LA16_0<='[')||(LA16_0>=']' && LA16_0<='\uD7FF')||(LA16_0>='\uE000' && LA16_0<='\uFFFD')))
			{
				alt16 = 1;
			}
			else if ((LA16_0=='\\'))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:473:4: Char
				{
				DebugLocation(473, 4);
				mChar(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:473:11: EscapeSequence
				{
				DebugLocation(473, 11);
				mEscapeSequence(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("StringChar", 75);
			LeaveRule("StringChar", 75);
			LeaveRule_StringChar();
		}
	}
	// $ANTLR end "StringChar"

	partial void EnterRule_WhiteSpaceChar();
	partial void LeaveRule_WhiteSpaceChar();

	// $ANTLR start "WhiteSpaceChar"
	[GrammarRule("WhiteSpaceChar")]
	private void mWhiteSpaceChar()
	{
		EnterRule_WhiteSpaceChar();
		EnterRule("WhiteSpaceChar", 76);
		TraceIn("WhiteSpaceChar", 76);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:478:2: ( '\\t' | '\\n' | '\\f' | '\\r' | ' ' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
			{
			DebugLocation(478, 2);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("WhiteSpaceChar", 76);
			LeaveRule("WhiteSpaceChar", 76);
			LeaveRule_WhiteSpaceChar();
		}
	}
	// $ANTLR end "WhiteSpaceChar"

	partial void EnterRule_Char();
	partial void LeaveRule_Char();

	// $ANTLR start "Char"
	[GrammarRule("Char")]
	private void mChar()
	{
		EnterRule_Char();
		EnterRule("Char", 77);
		TraceIn("Char", 77);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:485:2: ( '\\u0020' .. '\\u0026' | '\\u0028' .. '\\u005B' | '\\u005D' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
			{
			DebugLocation(485, 2);
			if ((input.LA(1)>=' ' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uE000' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("Char", 77);
			LeaveRule("Char", 77);
			LeaveRule_Char();
		}
	}
	// $ANTLR end "Char"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 78);
		TraceIn("EscapeSequence", 78);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:491:2: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' | 'x' Hex Hex | 'u' Hex Hex Hex Hex ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:491:4: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' | 'x' Hex Hex | 'u' Hex Hex Hex Hex )
			{
			DebugLocation(491, 4);
			Match('\\'); 
			DebugLocation(492, 3);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:492:3: ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' | 'x' Hex Hex | 'u' Hex Hex Hex Hex )
			int alt17=10;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case 'b':
				{
				alt17 = 1;
				}
				break;
			case 't':
				{
				alt17 = 2;
				}
				break;
			case 'n':
				{
				alt17 = 3;
				}
				break;
			case 'f':
				{
				alt17 = 4;
				}
				break;
			case 'r':
				{
				alt17 = 5;
				}
				break;
			case '\"':
				{
				alt17 = 6;
				}
				break;
			case '\'':
				{
				alt17 = 7;
				}
				break;
			case '\\':
				{
				alt17 = 8;
				}
				break;
			case 'x':
				{
				alt17 = 9;
				}
				break;
			case 'u':
				{
				alt17 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:492:4: 'b'
				{
				DebugLocation(492, 4);
				Match('b'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:493:5: 't'
				{
				DebugLocation(493, 5);
				Match('t'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:494:5: 'n'
				{
				DebugLocation(494, 5);
				Match('n'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:495:5: 'f'
				{
				DebugLocation(495, 5);
				Match('f'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:496:5: 'r'
				{
				DebugLocation(496, 5);
				Match('r'); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:497:5: '\\\"'
				{
				DebugLocation(497, 5);
				Match('\"'); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:498:5: '\\''
				{
				DebugLocation(498, 5);
				Match('\''); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:499:5: '\\\\'
				{
				DebugLocation(499, 5);
				Match('\\'); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:500:5: 'x' Hex Hex
				{
				DebugLocation(500, 5);
				Match('x'); 
				DebugLocation(500, 9);
				mHex(); 
				DebugLocation(500, 13);
				mHex(); 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:501:5: 'u' Hex Hex Hex Hex
				{
				DebugLocation(501, 5);
				Match('u'); 
				DebugLocation(501, 9);
				mHex(); 
				DebugLocation(501, 13);
				mHex(); 
				DebugLocation(501, 17);
				mHex(); 
				DebugLocation(501, 21);
				mHex(); 

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

		}
		finally
		{
			TraceOut("EscapeSequence", 78);
			LeaveRule("EscapeSequence", 78);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_Hex();
	partial void LeaveRule_Hex();

	// $ANTLR start "Hex"
	[GrammarRule("Hex")]
	private void mHex()
	{
		EnterRule_Hex();
		EnterRule("Hex", 79);
		TraceIn("Hex", 79);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:506:5: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
			{
			DebugLocation(506, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("Hex", 79);
			LeaveRule("Hex", 79);
			LeaveRule_Hex();
		}
	}
	// $ANTLR end "Hex"

	partial void EnterRule_Num();
	partial void LeaveRule_Num();

	// $ANTLR start "Num"
	[GrammarRule("Num")]
	private void mNum()
	{
		EnterRule_Num();
		EnterRule("Num", 80);
		TraceIn("Num", 80);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:511:2: ( '0' .. '9' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
			{
			DebugLocation(511, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("Num", 80);
			LeaveRule("Num", 80);
			LeaveRule_Num();
		}
	}
	// $ANTLR end "Num"

	partial void EnterRule_ExponentPart();
	partial void LeaveRule_ExponentPart();

	// $ANTLR start "ExponentPart"
	[GrammarRule("ExponentPart")]
	private void mExponentPart()
	{
		EnterRule_ExponentPart();
		EnterRule("ExponentPart", 81);
		TraceIn("ExponentPart", 81);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:516:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( Num )+ )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:516:3: ( 'e' | 'E' ) ( '+' | '-' )? ( Num )+
			{
			DebugLocation(516, 3);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(516, 13);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:516:13: ( '+' | '-' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0=='+'||LA18_0=='-'))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
				{
				DebugLocation(516, 13);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(516, 24);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:516:24: ( Num )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if (((LA19_0>='0' && LA19_0<='9')))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:
					{
					DebugLocation(516, 24);
					input.Consume();


					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

		}
		finally
		{
			TraceOut("ExponentPart", 81);
			LeaveRule("ExponentPart", 81);
			LeaveRule_ExponentPart();
		}
	}
	// $ANTLR end "ExponentPart"

	public override void mTokens()
	{
		// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:8: ( T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | BooleanLiteralExp | NullLiteralExp | InvalidLiteralExp | SimpleName | UnlimitedNaturalLiteralExp | IntegerLiteralExp | RealLiteralExp | StringLiteralExp | NESTED_ML_COMMENT | LINE_COMMENT | WS )
		int alt20=72;
		try { DebugEnterDecision(20, false);
		try
		{
			alt20 = dfa20.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(20); }
		switch (alt20)
		{
		case 1:
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:10: T__24
			{
			DebugLocation(1, 10);
			mT__24(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:16: T__25
			{
			DebugLocation(1, 16);
			mT__25(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:22: T__26
			{
			DebugLocation(1, 22);
			mT__26(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:28: T__27
			{
			DebugLocation(1, 28);
			mT__27(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:34: T__28
			{
			DebugLocation(1, 34);
			mT__28(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:40: T__29
			{
			DebugLocation(1, 40);
			mT__29(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:46: T__30
			{
			DebugLocation(1, 46);
			mT__30(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:52: T__31
			{
			DebugLocation(1, 52);
			mT__31(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:58: T__32
			{
			DebugLocation(1, 58);
			mT__32(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:64: T__33
			{
			DebugLocation(1, 64);
			mT__33(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:70: T__34
			{
			DebugLocation(1, 70);
			mT__34(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:76: T__35
			{
			DebugLocation(1, 76);
			mT__35(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:82: T__36
			{
			DebugLocation(1, 82);
			mT__36(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:88: T__37
			{
			DebugLocation(1, 88);
			mT__37(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:94: T__38
			{
			DebugLocation(1, 94);
			mT__38(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:100: T__39
			{
			DebugLocation(1, 100);
			mT__39(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:106: T__40
			{
			DebugLocation(1, 106);
			mT__40(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:112: T__41
			{
			DebugLocation(1, 112);
			mT__41(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:118: T__42
			{
			DebugLocation(1, 118);
			mT__42(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:124: T__43
			{
			DebugLocation(1, 124);
			mT__43(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:130: T__44
			{
			DebugLocation(1, 130);
			mT__44(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:136: T__45
			{
			DebugLocation(1, 136);
			mT__45(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:142: T__46
			{
			DebugLocation(1, 142);
			mT__46(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:148: T__47
			{
			DebugLocation(1, 148);
			mT__47(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:154: T__48
			{
			DebugLocation(1, 154);
			mT__48(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:160: T__49
			{
			DebugLocation(1, 160);
			mT__49(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:166: T__50
			{
			DebugLocation(1, 166);
			mT__50(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:172: T__51
			{
			DebugLocation(1, 172);
			mT__51(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:178: T__52
			{
			DebugLocation(1, 178);
			mT__52(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:184: T__53
			{
			DebugLocation(1, 184);
			mT__53(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:190: T__54
			{
			DebugLocation(1, 190);
			mT__54(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:196: T__55
			{
			DebugLocation(1, 196);
			mT__55(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:202: T__56
			{
			DebugLocation(1, 202);
			mT__56(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:208: T__57
			{
			DebugLocation(1, 208);
			mT__57(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:214: T__58
			{
			DebugLocation(1, 214);
			mT__58(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:220: T__59
			{
			DebugLocation(1, 220);
			mT__59(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:226: T__60
			{
			DebugLocation(1, 226);
			mT__60(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:232: T__61
			{
			DebugLocation(1, 232);
			mT__61(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:238: T__62
			{
			DebugLocation(1, 238);
			mT__62(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:244: T__63
			{
			DebugLocation(1, 244);
			mT__63(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:250: T__64
			{
			DebugLocation(1, 250);
			mT__64(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:256: T__65
			{
			DebugLocation(1, 256);
			mT__65(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:262: T__66
			{
			DebugLocation(1, 262);
			mT__66(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:268: T__67
			{
			DebugLocation(1, 268);
			mT__67(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:274: T__68
			{
			DebugLocation(1, 274);
			mT__68(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:280: T__69
			{
			DebugLocation(1, 280);
			mT__69(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:286: T__70
			{
			DebugLocation(1, 286);
			mT__70(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:292: T__71
			{
			DebugLocation(1, 292);
			mT__71(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:298: T__72
			{
			DebugLocation(1, 298);
			mT__72(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:304: T__73
			{
			DebugLocation(1, 304);
			mT__73(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:310: T__74
			{
			DebugLocation(1, 310);
			mT__74(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:316: T__75
			{
			DebugLocation(1, 316);
			mT__75(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:322: T__76
			{
			DebugLocation(1, 322);
			mT__76(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:328: T__77
			{
			DebugLocation(1, 328);
			mT__77(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:334: T__78
			{
			DebugLocation(1, 334);
			mT__78(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:340: T__79
			{
			DebugLocation(1, 340);
			mT__79(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:346: T__80
			{
			DebugLocation(1, 346);
			mT__80(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:352: T__81
			{
			DebugLocation(1, 352);
			mT__81(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:358: T__82
			{
			DebugLocation(1, 358);
			mT__82(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:364: T__83
			{
			DebugLocation(1, 364);
			mT__83(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:370: T__84
			{
			DebugLocation(1, 370);
			mT__84(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:376: BooleanLiteralExp
			{
			DebugLocation(1, 376);
			mBooleanLiteralExp(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:394: NullLiteralExp
			{
			DebugLocation(1, 394);
			mNullLiteralExp(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:409: InvalidLiteralExp
			{
			DebugLocation(1, 409);
			mInvalidLiteralExp(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:427: SimpleName
			{
			DebugLocation(1, 427);
			mSimpleName(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:438: UnlimitedNaturalLiteralExp
			{
			DebugLocation(1, 438);
			mUnlimitedNaturalLiteralExp(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:465: IntegerLiteralExp
			{
			DebugLocation(1, 465);
			mIntegerLiteralExp(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:483: RealLiteralExp
			{
			DebugLocation(1, 483);
			mRealLiteralExp(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:498: StringLiteralExp
			{
			DebugLocation(1, 498);
			mStringLiteralExp(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:515: NESTED_ML_COMMENT
			{
			DebugLocation(1, 515);
			mNESTED_ML_COMMENT(); 

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:533: LINE_COMMENT
			{
			DebugLocation(1, 533);
			mLINE_COMMENT(); 

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:1:546: WS
			{
			DebugLocation(1, 546);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA20 dfa20;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa20 = new DFA20(this);
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x5\xFFFF\x1\x32\x1\x34\x1\x36\x1\x38\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x3D"+
			"\x2\xFFFF\x8\x2A\x2\xFFFF\x1\x4A\xC\x2A\x3\xFFFF\x1\x2A\x2\xFFFF\x2\x5F"+
			"\x10\xFFFF\xB\x2A\x2\xFFFF\x6\x2A\x1\x74\x1\x2A\x1\x78\x4\x2A\x1\x7D"+
			"\x6\x2A\x2\xFFFF\x1\x5F\x1\x84\x7\x2A\x1\x8F\x3\x2A\x1\x93\x5\x2A\x1"+
			"\xFFFF\x2\x2A\x1\x9C\x1\xFFFF\x1\x2A\x1\x9E\x1\x9F\x1\x2A\x1\xFFFF\x1"+
			"\x2A\x1\xA2\x2\x2A\x1\xA5\x1\x2A\x1\xFFFF\x8\x2A\x1\xAF\x1\x2A\x1\xFFFF"+
			"\x3\x2A\x1\xFFFF\x1\xB4\x2\x2A\x1\xB7\x2\x2A\x1\xBA\x1\x2A\x1\xFFFF\x1"+
			"\x2A\x2\xFFFF\x1\xBD\x1\xBE\x1\xFFFF\x1\xBF\x1\xC0\x1\xFFFF\x9\x2A\x1"+
			"\xFFFF\x2\x2A\x1\xCC\x1\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x1\xD0\x1\x2A\x1"+
			"\xFFFF\x2\x2A\x4\xFFFF\x1\xC0\x3\x2A\x1\xD7\x5\x2A\x1\xDD\x1\xFFFF\x3"+
			"\x2A\x1\xFFFF\x3\x2A\x1\xE4\x1\x2A\x1\xE6\x1\xFFFF\x2\x2A\x1\xE9\x2\x2A"+
			"\x1\xFFFF\x1\x2A\x1\xED\x1\x2A\x1\xEF\x1\xF0\x1\xF1\x1\xFFFF\x1\x2A\x1"+
			"\xFFFF\x2\x2A\x1\xFFFF\x1\x2A\x1\xF6\x1\x2A\x1\xFFFF\x1\xF8\x3\xFFFF"+
			"\x4\x2A\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xFE\x1\xFF\x1\x100\x1\x101\x1\x2A"+
			"\x4\xFFFF\x5\x2A\x1\x108\x1\xFFFF";
		private const string DFA20_eofS =
			"\x109\xFFFF";
		private const string DFA20_minS =
			"\x1\x9\x4\xFFFF\x1\x2D\x1\x2E\x1\x2A\x1\x3A\x1\xFFFF\x1\x3D\x1\xFFFF"+
			"\x1\x3D\x2\xFFFF\x1\x61\x1\x6F\x1\x6E\x1\x63\x2\x65\x1\x75\x1\x6E\x2"+
			"\xFFFF\x1\x5E\x1\x6E\x2\x6F\x1\x65\x1\x6C\x1\x66\x1\x65\x1\x6F\x1\x72"+
			"\x1\x6F\x1\x68\x1\x6F\x3\xFFFF\x1\x61\x2\xFFFF\x2\x2E\x10\xFFFF\x1\x67"+
			"\x1\x6F\x1\x6C\x1\x74\x1\x6C\x1\x64\x1\x61\x1\x71\x1\x72\x1\x70\x1\x6C"+
			"\x2\xFFFF\x2\x64\x1\x6E\x1\x72\x1\x73\x1\x64\x1\x24\x1\x70\x1\x24\x1"+
			"\x65\x2\x74\x1\x6C\x1\x24\x1\x73\x2\x65\x1\x75\x1\x72\x1\x6C\x2\xFFFF"+
			"\x1\x2E\x1\x24\x2\x6C\x1\x65\x1\x41\x1\x65\x1\x6C\x1\x75\x1\x24\x1\x69"+
			"\x1\x6C\x1\x69\x1\x24\x1\x79\x1\x74\x1\x69\x1\x65\x1\x69\x1\xFFFF\x1"+
			"\x6C\x1\x74\x1\x24\x1\xFFFF\x1\x72\x2\x24\x1\x6C\x1\xFFFF\x1\x74\x1\x24"+
			"\x1\x6E\x1\x65\x1\x24\x1\x73\x1\xFFFF\x2\x65\x1\x67\x2\x6E\x1\x65\x1"+
			"\x6F\x1\x72\x1\x24\x1\x65\x1\xFFFF\x1\x6E\x1\x65\x1\x6D\x1\xFFFF\x1\x24"+
			"\x1\x65\x1\x76\x1\x24\x1\x66\x1\x69\x1\x24\x1\x6C\x1\xFFFF\x1\x61\x2"+
			"\xFFFF\x2\x24\x1\xFFFF\x2\x24\x1\xFFFF\x1\x65\x1\x61\x1\x63\x1\x65\x1"+
			"\x79\x1\x76\x1\x73\x1\x69\x1\x65\x1\xFFFF\x1\x6E\x1\x67\x1\x24\x1\x69"+
			"\x1\xFFFF\x1\x78\x1\x61\x1\xFFFF\x1\x24\x1\x65\x1\xFFFF\x1\x69\x1\x74"+
			"\x4\xFFFF\x1\x24\x1\x6E\x1\x74\x1\x72\x1\x24\x1\x61\x1\x73\x2\x64\x1"+
			"\x63\x1\x24\x1\xFFFF\x3\x74\x1\xFFFF\x1\x73\x1\x64\x1\x65\x1\x24\x1\x69"+
			"\x1\x24\x1\xFFFF\x1\x6C\x1\x61\x1\x24\x1\x53\x1\x65\x1\xFFFF\x1\x65\x1"+
			"\x24\x1\x65\x3\x24\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x69\x1\x67\x1\xFFFF\x1"+
			"\x65\x1\x24\x1\x64\x1\xFFFF\x1\x24\x3\xFFFF\x1\x6E\x1\x64\x1\x65\x1\x74"+
			"\x1\xFFFF\x1\x4E\x1\xFFFF\x4\x24\x1\x61\x4\xFFFF\x1\x74\x1\x75\x1\x72"+
			"\x1\x61\x1\x6C\x1\x24\x1\xFFFF";
		private const string DFA20_maxS =
			"\x1\xFFFD\x4\xFFFF\x1\x3E\x1\x2E\x1\x2A\x1\x3A\x1\xFFFF\x1\x3E\x1\xFFFF"+
			"\x1\x3D\x2\xFFFF\x2\x6F\x1\x6E\x1\x72\x1\x65\x1\x74\x1\x75\x1\x6E\x2"+
			"\xFFFF\x1\x5E\x1\x6E\x2\x6F\x1\x65\x1\x6E\x1\x74\x1\x65\x1\x75\x3\x72"+
			"\x1\x6F\x3\xFFFF\x1\x61\x2\xFFFF\x2\x65\x10\xFFFF\x1\x67\x1\x6F\x1\x6C"+
			"\x1\x74\x1\x6C\x1\x64\x1\x61\x1\x74\x1\x72\x1\x70\x1\x6C\x2\xFFFF\x2"+
			"\x64\x1\x6E\x1\x72\x1\x73\x1\x64\x1\xFFFD\x1\x70\x1\xFFFD\x1\x65\x2\x74"+
			"\x1\x6C\x1\xFFFD\x1\x73\x2\x65\x1\x75\x1\x72\x1\x6C\x2\xFFFF\x1\x65\x1"+
			"\xFFFD\x2\x6C\x1\x65\x1\x56\x1\x65\x1\x6C\x1\x75\x1\xFFFD\x1\x69\x1\x6C"+
			"\x1\x69\x1\xFFFD\x1\x79\x1\x74\x1\x69\x1\x65\x1\x69\x1\xFFFF\x1\x6C\x1"+
			"\x74\x1\xFFFD\x1\xFFFF\x1\x72\x2\xFFFD\x1\x6C\x1\xFFFF\x1\x74\x1\xFFFD"+
			"\x1\x6E\x1\x65\x1\xFFFD\x1\x73\x1\xFFFF\x2\x65\x1\x67\x2\x6E\x1\x65\x1"+
			"\x6F\x1\x72\x1\xFFFD\x1\x65\x1\xFFFF\x1\x6E\x1\x65\x1\x6D\x1\xFFFF\x1"+
			"\xFFFD\x1\x65\x1\x76\x1\xFFFD\x1\x66\x1\x69\x1\xFFFD\x1\x6C\x1\xFFFF"+
			"\x1\x61\x2\xFFFF\x2\xFFFD\x1\xFFFF\x2\xFFFD\x1\xFFFF\x1\x65\x1\x61\x1"+
			"\x63\x1\x65\x1\x79\x1\x76\x1\x73\x1\x69\x1\x65\x1\xFFFF\x1\x6E\x1\x67"+
			"\x1\xFFFD\x1\x69\x1\xFFFF\x1\x78\x1\x61\x1\xFFFF\x1\xFFFD\x1\x65\x1\xFFFF"+
			"\x1\x69\x1\x74\x4\xFFFF\x1\xFFFD\x1\x6E\x1\x74\x1\x72\x1\xFFFD\x1\x61"+
			"\x1\x73\x2\x64\x1\x63\x1\xFFFD\x1\xFFFF\x3\x74\x1\xFFFF\x1\x73\x1\x64"+
			"\x1\x65\x1\xFFFD\x1\x69\x1\xFFFD\x1\xFFFF\x1\x6C\x1\x61\x1\xFFFD\x1\x53"+
			"\x1\x65\x1\xFFFF\x1\x65\x1\xFFFD\x1\x65\x3\xFFFD\x1\xFFFF\x1\x6F\x1\xFFFF"+
			"\x1\x69\x1\x67\x1\xFFFF\x1\x65\x1\xFFFD\x1\x64\x1\xFFFF\x1\xFFFD\x3\xFFFF"+
			"\x1\x6E\x1\x64\x1\x65\x1\x74\x1\xFFFF\x1\x4E\x1\xFFFF\x4\xFFFD\x1\x61"+
			"\x4\xFFFF\x1\x74\x1\x75\x1\x72\x1\x61\x1\x6C\x1\xFFFD\x1\xFFFF";
		private const string DFA20_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x4\xFFFF\x1\xC\x1\xFFFF\x1\x10\x1\xFFFF"+
			"\x1\x13\x1\x14\x8\xFFFF\x1\x24\x1\x25\xD\xFFFF\x1\x3B\x1\x3C\x1\x3D\x1"+
			"\xFFFF\x1\x41\x1\x42\x2\xFFFF\x1\x45\x1\x48\x1\x6\x1\x47\x1\x5\x1\x8"+
			"\x1\x7\x1\x46\x1\x9\x1\xB\x1\xA\x1\xE\x1\xF\x1\xD\x1\x12\x1\x11\xB\xFFFF"+
			"\x1\x27\x1\x26\x14\xFFFF\x1\x43\x1\x44\x13\xFFFF\x1\x2E\x3\xFFFF\x1\x30"+
			"\x4\xFFFF\x1\x36\x6\xFFFF\x1\x15\xA\xFFFF\x1\x20\x3\xFFFF\x1\x28\x8\xFFFF"+
			"\x1\x32\x1\xFFFF\x1\x34\x1\x35\x2\xFFFF\x1\x38\x2\xFFFF\x1\x3A\x9\xFFFF"+
			"\x1\x1E\x4\xFFFF\x1\x29\x2\xFFFF\x1\x2C\x2\xFFFF\x1\x31\x2\xFFFF\x1\x3F"+
			"\x1\x37\x1\x39\x1\x3E\xB\xFFFF\x1\x22\x3\xFFFF\x1\x2D\x6\xFFFF\x1\x19"+
			"\x5\xFFFF\x1\x21\x6\xFFFF\x1\x16\x1\xFFFF\x1\x18\x2\xFFFF\x1\x1C\x3\xFFFF"+
			"\x1\x2A\x1\xFFFF\x1\x2F\x1\x40\x1\x33\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x2B"+
			"\x5\xFFFF\x1\x17\x1\x1A\x1\x1B\x1\x1D\x6\xFFFF\x1\x23";
		private const string DFA20_specialS =
			"\x109\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x2\x2F\x1\xFFFF\x2\x2F\x12\xFFFF\x1\x2F\x3\xFFFF\x1\x2A\x2\xFFFF\x1"+
				"\x2E\x1\x1\x1\x2\x1\x2B\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x2C\x9\x2D"+
				"\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\x2A\x1\xF\x1\x10\x5\x2A"+
				"\x1\x11\x5\x2A\x1\x12\x2\x2A\x1\x13\x1\x14\x1\x15\x1\x16\x5\x2A\x1\x17"+
				"\x1\xFFFF\x1\x18\x1\x19\x1\x2A\x1\xFFFF\x1\x1A\x1\x1B\x1\x1C\x1\x1D"+
				"\x1\x1E\x1\x29\x2\x2A\x1\x1F\x2\x2A\x1\x20\x1\x2A\x1\x21\x1\x22\x1\x23"+
				"\x3\x2A\x1\x24\x3\x2A\x1\x25\x2\x2A\x1\x26\x1\x27\x1\x28\x42\xFFFF\x17"+
				"\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF\xE\x2A\x1\xFFFF\x1C81"+
				"\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF\x3F0\x2A\x11\xFFFF"+
				"\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"",
				"",
				"",
				"",
				"\x1\x31\x10\xFFFF\x1\x30",
				"\x1\x33",
				"\x1\x35",
				"\x1\x37",
				"",
				"\x1\x39\x1\x3A",
				"",
				"\x1\x3C",
				"",
				"",
				"\x1\x3E\xD\xFFFF\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42\xE\xFFFF\x1\x43",
				"\x1\x44",
				"\x1\x45\xE\xFFFF\x1\x46",
				"\x1\x47",
				"\x1\x48",
				"",
				"",
				"\x1\x49",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F\x1\xFFFF\x1\x50",
				"\x1\x51\x6\xFFFF\x1\x52\x1\x53\x5\xFFFF\x1\x54",
				"\x1\x55",
				"\x1\x56\x5\xFFFF\x1\x57",
				"\x1\x58",
				"\x1\x59\x2\xFFFF\x1\x5A",
				"\x1\x5B\x9\xFFFF\x1\x5C",
				"\x1\x5D",
				"",
				"",
				"",
				"\x1\x5E",
				"",
				"",
				"\x1\x60\x1\xFFFF\xA\x60\xB\xFFFF\x1\x60\x1F\xFFFF\x1\x60",
				"\x1\x60\x1\xFFFF\xA\x61\xB\xFFFF\x1\x60\x1F\xFFFF\x1\x60",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69\x2\xFFFF\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"\x1\x6D",
				"",
				"",
				"\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x75",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x8"+
				"\x2A\x1\x76\xC\x2A\x1\x77\x4\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A"+
				"\x1\xFFFF\x208\x2A\x70\xFFFF\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A"+
				"\x62\xFFFF\x120\x2A\xA70\xFFFF\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF"+
				"\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x79",
				"\x1\x7A",
				"\x1\x7B",
				"\x1\x7C",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x80",
				"\x1\x81",
				"\x1\x82",
				"\x1\x83",
				"",
				"",
				"\x1\x60\x1\xFFFF\xA\x61\xB\xFFFF\x1\x60\x1F\xFFFF\x1\x60",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x85",
				"\x1\x86",
				"\x1\x87",
				"\x1\x88\x7\xFFFF\x1\x89\x3\xFFFF\x1\x8A\x8\xFFFF\x1\x8B",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x97",
				"\x1\x98",
				"",
				"\x1\x99",
				"\x1\x9A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1"+
				"\x9B\x19\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70"+
				"\xFFFF\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A"+
				"\xA70\xFFFF\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF"+
				"\x20E\x2A",
				"",
				"\x1\x9D",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xA0",
				"",
				"\x1\xA1",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xA3",
				"\x1\xA4",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xA6",
				"",
				"\x1\xA7",
				"\x1\xA8",
				"\x1\xA9",
				"\x1\xAA",
				"\x1\xAB",
				"\x1\xAC",
				"\x1\xAD",
				"\x1\xAE",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xB0",
				"",
				"\x1\xB1",
				"\x1\xB2",
				"\x1\xB3",
				"",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xB5",
				"\x1\xB6",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xBB",
				"",
				"\x1\xBC",
				"",
				"",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"",
				"\x1\xC1",
				"\x1\xC2",
				"\x1\xC3",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"\x1\xC9",
				"",
				"\x1\xCA",
				"\x1\xCB",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xCD",
				"",
				"\x1\xCE",
				"\x1\xCF",
				"",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xD1",
				"",
				"\x1\xD2",
				"\x1\xD3",
				"",
				"",
				"",
				"",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xD8",
				"\x1\xD9",
				"\x1\xDA",
				"\x1\xDB",
				"\x1\xDC",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"",
				"\x1\xDE",
				"\x1\xDF",
				"\x1\xE0",
				"",
				"\x1\xE1",
				"\x1\xE2",
				"\x1\xE3",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xE5",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"",
				"\x1\xE7",
				"\x1\xE8",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xEA",
				"\x1\xEB",
				"",
				"\x1\xEC",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xEE",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"",
				"\x1\xF2",
				"",
				"\x1\xF3",
				"\x1\xF4",
				"",
				"\x1\xF5",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\xF7",
				"",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"",
				"",
				"",
				"\x1\xF9",
				"\x1\xFA",
				"\x1\xFB",
				"\x1\xFC",
				"",
				"\x1\xFD",
				"",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				"\x1\x102",
				"",
				"",
				"",
				"",
				"\x1\x103",
				"\x1\x104",
				"\x1\x105",
				"\x1\x106",
				"\x1\x107",
				"\x1\x2A\xB\xFFFF\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A"+
				"\x2A\x45\xFFFF\x17\x2A\x1\xFFFF\x1F\x2A\x1\xFFFF\x208\x2A\x70\xFFFF"+
				"\xE\x2A\x1\xFFFF\x1C81\x2A\xC\xFFFF\x2\x2A\x62\xFFFF\x120\x2A\xA70\xFFFF"+
				"\x3F0\x2A\x11\xFFFF\xA7FF\x2A\x2100\xFFFF\x4D0\x2A\x20\xFFFF\x20E\x2A",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | BooleanLiteralExp | NullLiteralExp | InvalidLiteralExp | SimpleName | UnlimitedNaturalLiteralExp | IntegerLiteralExp | RealLiteralExp | StringLiteralExp | NESTED_ML_COMMENT | LINE_COMMENT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Exolutio.Model.OCL.Compiler
