//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\Model\\OCL\\Grammar\\OCL.g3 2012-02-25 16:53:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using Exolutio.Model.OCL.AST;
using Exolutio.Model.OCL.Types;


using System.Collections.Generic;
using Antlr.Runtime;

namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BooleanLiteralExp", "Char", "EscapeSequence", "ExponentPart", "Hex", "IntegerLiteralExp", "InvalidLiteralExp", "LINE_COMMENT", "NESTED_ML_COMMENT", "NameChar", "NameStartChar", "NullLiteralExp", "Num", "RealLiteralExp", "SimpleName", "StringChar", "StringLiteralExp", "UnlimitedNaturalLiteralExp", "WS", "WhiteSpaceChar", "'('", "')'", "'+'", "','", "'-'", "'->'", "'.'", "'..'", "'/'", "':'", "'::'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'?'", "'@'", "'Bag'", "'Boolean'", "'Collection'", "'Integer'", "'OclAny'", "'OclInvalid'", "'OclMessage'", "'OclVoid'", "'OrderedSet'", "'Real'", "'Sequence'", "'Set'", "'String'", "'Tuple'", "'UnlimitedNatural'", "'['", "']'", "'^'", "'^^'", "'and'", "'body'", "'context'", "'derivate'", "'else'", "'endif'", "'if'", "'implies'", "'in'", "'init'", "'inv'", "'iterate'", "'let'", "'not'", "'or'", "'post'", "'pre'", "'then'", "'xor'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int BooleanLiteralExp=4;
	public const int Char=5;
	public const int EscapeSequence=6;
	public const int ExponentPart=7;
	public const int Hex=8;
	public const int IntegerLiteralExp=9;
	public const int InvalidLiteralExp=10;
	public const int LINE_COMMENT=11;
	public const int NESTED_ML_COMMENT=12;
	public const int NameChar=13;
	public const int NameStartChar=14;
	public const int NullLiteralExp=15;
	public const int Num=16;
	public const int RealLiteralExp=17;
	public const int SimpleName=18;
	public const int StringChar=19;
	public const int StringLiteralExp=20;
	public const int UnlimitedNaturalLiteralExp=21;
	public const int WS=22;
	public const int WhiteSpaceChar=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;

	// delegates
	// delegators

	public OCLParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public OCLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
		

	public override string[] TokenNames { get { return OCLParser.tokenNames; } }
	public override string GrammarFileName { get { return "..\\..\\Model\\OCL\\Grammar\\OCL.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules

	partial void EnterRule_contextDeclarationList();
	partial void LeaveRule_contextDeclarationList();

	// $ANTLR start "contextDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:17:1: public contextDeclarationList : ( contextDeclaration )* ;
	[GrammarRule("contextDeclarationList")]
	public void contextDeclarationList()
	{
		EnterRule_contextDeclarationList();
		EnterRule("contextDeclarationList", 1);
		TraceIn("contextDeclarationList", 1);
		try { DebugEnterRule(GrammarFileName, "contextDeclarationList");
		DebugLocation(17, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:18:2: ( ( contextDeclaration )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:18:3: ( contextDeclaration )*
			{
			DebugLocation(18, 3);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:18:3: ( contextDeclaration )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==65))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:18:3: contextDeclaration
					{
					DebugLocation(18, 3);
					PushFollow(Follow._contextDeclaration_in_contextDeclarationList59);
					contextDeclaration();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contextDeclarationList", 1);
			LeaveRule("contextDeclarationList", 1);
			LeaveRule_contextDeclarationList();
		}
		DebugLocation(19, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclarationList"); }
		return;

	}
	// $ANTLR end "contextDeclarationList"


	partial void EnterRule_contextDeclaration();
	partial void LeaveRule_contextDeclaration();

	// $ANTLR start "contextDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:22:1: public contextDeclaration returns [ClassifierConstraint Decl] : ( propertyContextDecl | classifierContextDecl | operationContextDecl );
	[GrammarRule("contextDeclaration")]
	public ClassifierConstraint contextDeclaration()
	{
		EnterRule_contextDeclaration();
		EnterRule("contextDeclaration", 2);
		TraceIn("contextDeclaration", 2);
		ClassifierConstraint Decl = default(ClassifierConstraint);

		ClassifierConstraint classifierContextDecl1 = default(ClassifierConstraint);

		try { DebugEnterRule(GrammarFileName, "contextDeclaration");
		DebugLocation(22, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:24:2: ( propertyContextDecl | classifierContextDecl | operationContextDecl )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			try
			{
				alt2 = dfa2.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:24:3: propertyContextDecl
				{
				DebugLocation(24, 3);
				PushFollow(Follow._propertyContextDecl_in_contextDeclaration78);
				propertyContextDecl();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:25:3: classifierContextDecl
				{
				DebugLocation(25, 3);
				PushFollow(Follow._classifierContextDecl_in_contextDeclaration82);
				classifierContextDecl1=classifierContextDecl();
				PopFollow();

				DebugLocation(25, 25);
				Decl =classifierContextDecl1;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:26:3: operationContextDecl
				{
				DebugLocation(26, 3);
				PushFollow(Follow._operationContextDecl_in_contextDeclaration88);
				operationContextDecl();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("contextDeclaration", 2);
			LeaveRule("contextDeclaration", 2);
			LeaveRule_contextDeclaration();
		}
		DebugLocation(27, 1);
		} finally { DebugExitRule(GrammarFileName, "contextDeclaration"); }
		return Decl;

	}
	// $ANTLR end "contextDeclaration"


	partial void EnterRule_propertyContextDecl();
	partial void LeaveRule_propertyContextDecl();

	// $ANTLR start "propertyContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:29:1: propertyContextDecl : propertyContextHead ( initOrDerValue )* ;
	[GrammarRule("propertyContextDecl")]
	private void propertyContextDecl()
	{
		EnterRule_propertyContextDecl();
		EnterRule("propertyContextDecl", 3);
		TraceIn("propertyContextDecl", 3);
		try { DebugEnterRule(GrammarFileName, "propertyContextDecl");
		DebugLocation(29, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:30:2: ( propertyContextHead ( initOrDerValue )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:30:3: propertyContextHead ( initOrDerValue )*
			{
			DebugLocation(30, 3);
			PushFollow(Follow._propertyContextHead_in_propertyContextDecl98);
			propertyContextHead();
			PopFollow();

			DebugLocation(30, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:30:23: ( initOrDerValue )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==66||LA3_0==72))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:30:23: initOrDerValue
					{
					DebugLocation(30, 23);
					PushFollow(Follow._initOrDerValue_in_propertyContextDecl100);
					initOrDerValue();
					PopFollow();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyContextDecl", 3);
			LeaveRule("propertyContextDecl", 3);
			LeaveRule_propertyContextDecl();
		}
		DebugLocation(31, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextDecl"); }
		return;

	}
	// $ANTLR end "propertyContextDecl"


	partial void EnterRule_propertyContextHead();
	partial void LeaveRule_propertyContextHead();

	// $ANTLR start "propertyContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:33:1: propertyContextHead : 'context' SimpleName '::' pathName ':' type ;
	[GrammarRule("propertyContextHead")]
	private void propertyContextHead()
	{
		EnterRule_propertyContextHead();
		EnterRule("propertyContextHead", 4);
		TraceIn("propertyContextHead", 4);
		try { DebugEnterRule(GrammarFileName, "propertyContextHead");
		DebugLocation(33, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:34:2: ( 'context' SimpleName '::' pathName ':' type )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:34:3: 'context' SimpleName '::' pathName ':' type
			{
			DebugLocation(34, 3);
			Match(input,65,Follow._65_in_propertyContextHead111); 
			DebugLocation(34, 13);
			Match(input,SimpleName,Follow._SimpleName_in_propertyContextHead113); 
			DebugLocation(34, 24);
			Match(input,34,Follow._34_in_propertyContextHead115); 
			DebugLocation(34, 29);
			PushFollow(Follow._pathName_in_propertyContextHead117);
			pathName();
			PopFollow();

			DebugLocation(34, 38);
			Match(input,33,Follow._33_in_propertyContextHead119); 
			DebugLocation(34, 42);
			PushFollow(Follow._type_in_propertyContextHead121);
			type();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyContextHead", 4);
			LeaveRule("propertyContextHead", 4);
			LeaveRule_propertyContextHead();
		}
		DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyContextHead"); }
		return;

	}
	// $ANTLR end "propertyContextHead"


	partial void EnterRule_operationContextDecl();
	partial void LeaveRule_operationContextDecl();

	// $ANTLR start "operationContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:37:1: operationContextDecl : operationContextHead ( prePostOrBodyDecl )* ;
	[GrammarRule("operationContextDecl")]
	private void operationContextDecl()
	{
		EnterRule_operationContextDecl();
		EnterRule("operationContextDecl", 5);
		TraceIn("operationContextDecl", 5);
		try { DebugEnterRule(GrammarFileName, "operationContextDecl");
		DebugLocation(37, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:38:2: ( operationContextHead ( prePostOrBodyDecl )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:38:3: operationContextHead ( prePostOrBodyDecl )*
			{
			DebugLocation(38, 3);
			PushFollow(Follow._operationContextHead_in_operationContextDecl131);
			operationContextHead();
			PopFollow();

			DebugLocation(38, 24);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:38:24: ( prePostOrBodyDecl )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==64||(LA4_0>=78 && LA4_0<=79)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:38:24: prePostOrBodyDecl
					{
					DebugLocation(38, 24);
					PushFollow(Follow._prePostOrBodyDecl_in_operationContextDecl133);
					prePostOrBodyDecl();
					PopFollow();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationContextDecl", 5);
			LeaveRule("operationContextDecl", 5);
			LeaveRule_operationContextDecl();
		}
		DebugLocation(39, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextDecl"); }
		return;

	}
	// $ANTLR end "operationContextDecl"


	partial void EnterRule_operationContextHead();
	partial void LeaveRule_operationContextHead();

	// $ANTLR start "operationContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:41:1: operationContextHead : 'context' operation ;
	[GrammarRule("operationContextHead")]
	private void operationContextHead()
	{
		EnterRule_operationContextHead();
		EnterRule("operationContextHead", 6);
		TraceIn("operationContextHead", 6);
		try { DebugEnterRule(GrammarFileName, "operationContextHead");
		DebugLocation(41, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:42:2: ( 'context' operation )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:42:3: 'context' operation
			{
			DebugLocation(42, 3);
			Match(input,65,Follow._65_in_operationContextHead144); 
			DebugLocation(42, 13);
			PushFollow(Follow._operation_in_operationContextHead146);
			operation();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operationContextHead", 6);
			LeaveRule("operationContextHead", 6);
			LeaveRule_operationContextHead();
		}
		DebugLocation(43, 1);
		} finally { DebugExitRule(GrammarFileName, "operationContextHead"); }
		return;

	}
	// $ANTLR end "operationContextHead"


	partial void EnterRule_classifierContextDecl();
	partial void LeaveRule_classifierContextDecl();

	// $ANTLR start "classifierContextDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:45:1: classifierContextDecl returns [ClassifierConstraint Decl] : classifierContextHead ( invOrDef )* ;
	[GrammarRule("classifierContextDecl")]
	private ClassifierConstraint classifierContextDecl()
	{
		EnterRule_classifierContextDecl();
		EnterRule("classifierContextDecl", 7);
		TraceIn("classifierContextDecl", 7);
		ClassifierConstraint Decl = default(ClassifierConstraint);

		OclExpression invOrDef2 = default(OclExpression);
		Classifier classifierContextHead3 = default(Classifier);

		List<OclExpression> invs=new List<OclExpression>(); 
		try { DebugEnterRule(GrammarFileName, "classifierContextDecl");
		DebugLocation(45, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:49:2: ( classifierContextHead ( invOrDef )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:49:3: classifierContextHead ( invOrDef )*
			{
			DebugLocation(49, 3);
			PushFollow(Follow._classifierContextHead_in_classifierContextDecl170);
			classifierContextHead3=classifierContextHead();
			PopFollow();

			DebugLocation(49, 25);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:49:25: ( invOrDef )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==73))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:49:26: invOrDef
					{
					DebugLocation(49, 26);
					PushFollow(Follow._invOrDef_in_classifierContextDecl173);
					invOrDef2=invOrDef();
					PopFollow();

					DebugLocation(49, 35);
					invs.Add(invOrDef2);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(49, 72);
			Decl = new ClassifierConstraint(classifierContextHead3,invs,null);

			}

			EnvironmentStack.Pop();EnvironmentStack.Pop();
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classifierContextDecl", 7);
			LeaveRule("classifierContextDecl", 7);
			LeaveRule_classifierContextDecl();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextDecl"); }
		return Decl;

	}
	// $ANTLR end "classifierContextDecl"


	partial void EnterRule_classifierContextHead();
	partial void LeaveRule_classifierContextHead();

	// $ANTLR start "classifierContextHead"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:52:1: classifierContextHead returns [Classifier Context] : ( 'context' pathName | 'context' SimpleName ':' pathName );
	[GrammarRule("classifierContextHead")]
	private Classifier classifierContextHead()
	{
		EnterRule_classifierContextHead();
		EnterRule("classifierContextHead", 8);
		TraceIn("classifierContextHead", 8);
		Classifier Context = default(Classifier);

		CommonToken SimpleName6 = default(CommonToken);
		OCLParser.pathName_return pathName4 = default(OCLParser.pathName_return);
		OCLParser.pathName_return pathName5 = default(OCLParser.pathName_return);

		try { DebugEnterRule(GrammarFileName, "classifierContextHead");
		DebugLocation(52, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:54:2: ( 'context' pathName | 'context' SimpleName ':' pathName )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==65))
			{
				int LA6_1 = input.LA(2);

				if ((LA6_1==SimpleName))
				{
					int LA6_2 = input.LA(3);

					if ((LA6_2==33))
					{
						alt6 = 2;
					}
					else if ((LA6_2==EOF||LA6_2==34||LA6_2==65||LA6_2==73))
					{
						alt6 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 6, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:54:3: 'context' pathName
				{
				DebugLocation(54, 3);
				Match(input,65,Follow._65_in_classifierContextHead195); 
				DebugLocation(54, 13);
				PushFollow(Follow._pathName_in_classifierContextHead197);
				pathName4=pathName();
				PopFollow();

				DebugLocation(54, 23);
				Context =ClassifierContextHead((pathName4!=null?pathName4.Path:default(List<string>)),"self");

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:55:3: 'context' SimpleName ':' pathName
				{
				DebugLocation(55, 3);
				Match(input,65,Follow._65_in_classifierContextHead204); 
				DebugLocation(55, 13);
				SimpleName6=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_classifierContextHead206); 
				DebugLocation(55, 23);
				Match(input,33,Follow._33_in_classifierContextHead207); 
				DebugLocation(55, 26);
				PushFollow(Follow._pathName_in_classifierContextHead208);
				pathName5=pathName();
				PopFollow();

				DebugLocation(55, 35);
				Context =ClassifierContextHead((pathName5!=null?pathName5.Path:default(List<string>)),SimpleName6.Text);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("classifierContextHead", 8);
			LeaveRule("classifierContextHead", 8);
			LeaveRule_classifierContextHead();
		}
		DebugLocation(56, 1);
		} finally { DebugExitRule(GrammarFileName, "classifierContextHead"); }
		return Context;

	}
	// $ANTLR end "classifierContextHead"


	partial void EnterRule_initOrDerValue();
	partial void LeaveRule_initOrDerValue();

	// $ANTLR start "initOrDerValue"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:58:1: initOrDerValue : ( 'init' ':' oclExpression | 'derivate' ':' oclExpression );
	[GrammarRule("initOrDerValue")]
	private void initOrDerValue()
	{
		EnterRule_initOrDerValue();
		EnterRule("initOrDerValue", 9);
		TraceIn("initOrDerValue", 9);
		try { DebugEnterRule(GrammarFileName, "initOrDerValue");
		DebugLocation(58, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:59:2: ( 'init' ':' oclExpression | 'derivate' ':' oclExpression )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==72))
			{
				alt7 = 1;
			}
			else if ((LA7_0==66))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:59:3: 'init' ':' oclExpression
				{
				DebugLocation(59, 3);
				Match(input,72,Follow._72_in_initOrDerValue220); 
				DebugLocation(59, 10);
				Match(input,33,Follow._33_in_initOrDerValue222); 
				DebugLocation(59, 14);
				PushFollow(Follow._oclExpression_in_initOrDerValue224);
				oclExpression();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:60:3: 'derivate' ':' oclExpression
				{
				DebugLocation(60, 3);
				Match(input,66,Follow._66_in_initOrDerValue229); 
				DebugLocation(60, 14);
				Match(input,33,Follow._33_in_initOrDerValue231); 
				DebugLocation(60, 18);
				PushFollow(Follow._oclExpression_in_initOrDerValue233);
				oclExpression();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("initOrDerValue", 9);
			LeaveRule("initOrDerValue", 9);
			LeaveRule_initOrDerValue();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "initOrDerValue"); }
		return;

	}
	// $ANTLR end "initOrDerValue"


	partial void EnterRule_invOrDef();
	partial void LeaveRule_invOrDef();

	// $ANTLR start "invOrDef"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:63:1: invOrDef returns [OclExpression Constraint] : 'inv' ( SimpleName )? ':' oclExpression ;
	[GrammarRule("invOrDef")]
	private OclExpression invOrDef()
	{
		EnterRule_invOrDef();
		EnterRule("invOrDef", 10);
		TraceIn("invOrDef", 10);
		OclExpression Constraint = default(OclExpression);

		OclExpression oclExpression7 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "invOrDef");
		DebugLocation(63, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:65:2: ( 'inv' ( SimpleName )? ':' oclExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:65:3: 'inv' ( SimpleName )? ':' oclExpression
			{
			DebugLocation(65, 3);
			Match(input,73,Follow._73_in_invOrDef248); 
			DebugLocation(65, 9);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:65:9: ( SimpleName )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==SimpleName))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:65:10: SimpleName
				{
				DebugLocation(65, 10);
				Match(input,SimpleName,Follow._SimpleName_in_invOrDef251); 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(65, 24);
			Match(input,33,Follow._33_in_invOrDef256); 
			DebugLocation(65, 28);
			PushFollow(Follow._oclExpression_in_invOrDef258);
			oclExpression7=oclExpression();
			PopFollow();

			DebugLocation(65, 42);
			Constraint =oclExpression7;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("invOrDef", 10);
			LeaveRule("invOrDef", 10);
			LeaveRule_invOrDef();
		}
		DebugLocation(67, 1);
		} finally { DebugExitRule(GrammarFileName, "invOrDef"); }
		return Constraint;

	}
	// $ANTLR end "invOrDef"


	partial void EnterRule_prePostOrBodyDecl();
	partial void LeaveRule_prePostOrBodyDecl();

	// $ANTLR start "prePostOrBodyDecl"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:69:1: prePostOrBodyDecl : ( 'pre' ( SimpleName )? ':' oclExpression | 'post' ( SimpleName )? ':' oclExpression | 'body' ( SimpleName )? ':' oclExpression );
	[GrammarRule("prePostOrBodyDecl")]
	private void prePostOrBodyDecl()
	{
		EnterRule_prePostOrBodyDecl();
		EnterRule("prePostOrBodyDecl", 11);
		TraceIn("prePostOrBodyDecl", 11);
		try { DebugEnterRule(GrammarFileName, "prePostOrBodyDecl");
		DebugLocation(69, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:70:2: ( 'pre' ( SimpleName )? ':' oclExpression | 'post' ( SimpleName )? ':' oclExpression | 'body' ( SimpleName )? ':' oclExpression )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 79:
				{
				alt12 = 1;
				}
				break;
			case 78:
				{
				alt12 = 2;
				}
				break;
			case 64:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:70:3: 'pre' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(70, 3);
				Match(input,79,Follow._79_in_prePostOrBodyDecl272); 
				DebugLocation(70, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:70:9: ( SimpleName )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==SimpleName))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:70:10: SimpleName
					{
					DebugLocation(70, 10);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl275); 

					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(70, 23);
				Match(input,33,Follow._33_in_prePostOrBodyDecl279); 
				DebugLocation(70, 27);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl281);
				oclExpression();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:71:3: 'post' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(71, 3);
				Match(input,78,Follow._78_in_prePostOrBodyDecl286); 
				DebugLocation(71, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:71:10: ( SimpleName )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==SimpleName))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:71:11: SimpleName
					{
					DebugLocation(71, 11);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl289); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(71, 24);
				Match(input,33,Follow._33_in_prePostOrBodyDecl293); 
				DebugLocation(71, 28);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl295);
				oclExpression();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:72:3: 'body' ( SimpleName )? ':' oclExpression
				{
				DebugLocation(72, 3);
				Match(input,64,Follow._64_in_prePostOrBodyDecl300); 
				DebugLocation(72, 10);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:72:10: ( SimpleName )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==SimpleName))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:72:11: SimpleName
					{
					DebugLocation(72, 11);
					Match(input,SimpleName,Follow._SimpleName_in_prePostOrBodyDecl303); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(72, 24);
				Match(input,33,Follow._33_in_prePostOrBodyDecl307); 
				DebugLocation(72, 28);
				PushFollow(Follow._oclExpression_in_prePostOrBodyDecl309);
				oclExpression();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prePostOrBodyDecl", 11);
			LeaveRule("prePostOrBodyDecl", 11);
			LeaveRule_prePostOrBodyDecl();
		}
		DebugLocation(73, 1);
		} finally { DebugExitRule(GrammarFileName, "prePostOrBodyDecl"); }
		return;

	}
	// $ANTLR end "prePostOrBodyDecl"


	partial void EnterRule_operation();
	partial void LeaveRule_operation();

	// $ANTLR start "operation"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:76:1: operation : pathName '(' parameters ')' ':' ( type )? ;
	[GrammarRule("operation")]
	private void operation()
	{
		EnterRule_operation();
		EnterRule("operation", 12);
		TraceIn("operation", 12);
		try { DebugEnterRule(GrammarFileName, "operation");
		DebugLocation(76, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:77:2: ( pathName '(' parameters ')' ':' ( type )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:77:3: pathName '(' parameters ')' ':' ( type )?
			{
			DebugLocation(77, 3);
			PushFollow(Follow._pathName_in_operation320);
			pathName();
			PopFollow();

			DebugLocation(77, 32);
			Match(input,24,Follow._24_in_operation324); 
			DebugLocation(77, 36);
			PushFollow(Follow._parameters_in_operation326);
			parameters();
			PopFollow();

			DebugLocation(77, 47);
			Match(input,25,Follow._25_in_operation328); 
			DebugLocation(77, 51);
			Match(input,33,Follow._33_in_operation330); 
			DebugLocation(77, 55);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:77:55: ( type )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==SimpleName||(LA13_0>=44 && LA13_0<=58)))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:77:55: type
				{
				DebugLocation(77, 55);
				PushFollow(Follow._type_in_operation332);
				type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operation", 12);
			LeaveRule("operation", 12);
			LeaveRule_operation();
		}
		DebugLocation(78, 1);
		} finally { DebugExitRule(GrammarFileName, "operation"); }
		return;

	}
	// $ANTLR end "operation"


	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();

	// $ANTLR start "parameters"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:80:1: parameters : variableDeclaration[VariableDeclarationRequirement.OperationContext] ( ',' parameters )? ;
	[GrammarRule("parameters")]
	private void parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 13);
		TraceIn("parameters", 13);
		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(80, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:81:2: ( variableDeclaration[VariableDeclarationRequirement.OperationContext] ( ',' parameters )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:81:3: variableDeclaration[VariableDeclarationRequirement.OperationContext] ( ',' parameters )?
			{
			DebugLocation(81, 3);
			PushFollow(Follow._variableDeclaration_in_parameters343);
			variableDeclaration(VariableDeclarationRequirement.OperationContext);
			PopFollow();

			DebugLocation(81, 72);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:81:72: ( ',' parameters )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==27))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:81:73: ',' parameters
				{
				DebugLocation(81, 73);
				Match(input,27,Follow._27_in_parameters347); 
				DebugLocation(81, 77);
				PushFollow(Follow._parameters_in_parameters349);
				parameters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameters", 13);
			LeaveRule("parameters", 13);
			LeaveRule_parameters();
		}
		DebugLocation(82, 1);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return;

	}
	// $ANTLR end "parameters"


	partial void EnterRule_oclExpression();
	partial void LeaveRule_oclExpression();

	// $ANTLR start "oclExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:85:1: public oclExpression returns [OclExpression Value] : logicalImpliesExpression ;
	[GrammarRule("oclExpression")]
	public OclExpression oclExpression()
	{
		EnterRule_oclExpression();
		EnterRule("oclExpression", 14);
		TraceIn("oclExpression", 14);
		OclExpression Value = default(OclExpression);

		OclExpression logicalImpliesExpression8 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "oclExpression");
		DebugLocation(85, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:87:2: ( logicalImpliesExpression )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:87:3: logicalImpliesExpression
			{
			DebugLocation(87, 3);
			PushFollow(Follow._logicalImpliesExpression_in_oclExpression369);
			logicalImpliesExpression8=logicalImpliesExpression();
			PopFollow();

			DebugLocation(87, 28);
			Value =logicalImpliesExpression8; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclExpression", 14);
			LeaveRule("oclExpression", 14);
			LeaveRule_oclExpression();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "oclExpression"); }
		return Value;

	}
	// $ANTLR end "oclExpression"


	partial void EnterRule_logicalImpliesExpression();
	partial void LeaveRule_logicalImpliesExpression();

	// $ANTLR start "logicalImpliesExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:91:1: logicalImpliesExpression returns [OclExpression Value] : res= logicalXorExpression (opToken= 'implies' expr= logicalXorExpression )* ;
	[GrammarRule("logicalImpliesExpression")]
	private OclExpression logicalImpliesExpression()
	{
		EnterRule_logicalImpliesExpression();
		EnterRule("logicalImpliesExpression", 15);
		TraceIn("logicalImpliesExpression", 15);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "logicalImpliesExpression");
		DebugLocation(91, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:93:2: (res= logicalXorExpression (opToken= 'implies' expr= logicalXorExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:93:4: res= logicalXorExpression (opToken= 'implies' expr= logicalXorExpression )*
			{
			DebugLocation(93, 7);
			PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression392);
			res=logicalXorExpression();
			PopFollow();

			DebugLocation(93, 29);
			Value =res;
			DebugLocation(93, 50);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:93:50: (opToken= 'implies' expr= logicalXorExpression )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==70))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:93:51: opToken= 'implies' expr= logicalXorExpression
					{
					DebugLocation(93, 58);
					opToken=(CommonToken)Match(input,70,Follow._70_in_logicalImpliesExpression399); 
					DebugLocation(93, 73);
					PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression403);
					expr=logicalXorExpression();
					PopFollow();

					DebugLocation(93, 95);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalImpliesExpression", 15);
			LeaveRule("logicalImpliesExpression", 15);
			LeaveRule_logicalImpliesExpression();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalImpliesExpression"); }
		return Value;

	}
	// $ANTLR end "logicalImpliesExpression"


	partial void EnterRule_logicalXorExpression();
	partial void LeaveRule_logicalXorExpression();

	// $ANTLR start "logicalXorExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:95:1: logicalXorExpression returns [OclExpression Value] : res= logicalOrExpression (opToken= 'xor' expr= logicalOrExpression )* ;
	[GrammarRule("logicalXorExpression")]
	private OclExpression logicalXorExpression()
	{
		EnterRule_logicalXorExpression();
		EnterRule("logicalXorExpression", 16);
		TraceIn("logicalXorExpression", 16);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "logicalXorExpression");
		DebugLocation(95, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:97:2: (res= logicalOrExpression (opToken= 'xor' expr= logicalOrExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:97:4: res= logicalOrExpression (opToken= 'xor' expr= logicalOrExpression )*
			{
			DebugLocation(97, 7);
			PushFollow(Follow._logicalOrExpression_in_logicalXorExpression424);
			res=logicalOrExpression();
			PopFollow();

			DebugLocation(97, 28);
			Value =res;
			DebugLocation(97, 49);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:97:49: (opToken= 'xor' expr= logicalOrExpression )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==81))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:97:50: opToken= 'xor' expr= logicalOrExpression
					{
					DebugLocation(97, 57);
					opToken=(CommonToken)Match(input,81,Follow._81_in_logicalXorExpression431); 
					DebugLocation(97, 68);
					PushFollow(Follow._logicalOrExpression_in_logicalXorExpression435);
					expr=logicalOrExpression();
					PopFollow();

					DebugLocation(97, 88);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalXorExpression", 16);
			LeaveRule("logicalXorExpression", 16);
			LeaveRule_logicalXorExpression();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalXorExpression"); }
		return Value;

	}
	// $ANTLR end "logicalXorExpression"


	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();

	// $ANTLR start "logicalOrExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:99:1: logicalOrExpression returns [OclExpression Value] : res= logicalAndExpression (opToken= 'or' expr= logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private OclExpression logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 17);
		TraceIn("logicalOrExpression", 17);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(99, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:101:2: (res= logicalAndExpression (opToken= 'or' expr= logicalAndExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:101:4: res= logicalAndExpression (opToken= 'or' expr= logicalAndExpression )*
			{
			DebugLocation(101, 7);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression455);
			res=logicalAndExpression();
			PopFollow();

			DebugLocation(101, 29);
			Value =res;
			DebugLocation(101, 50);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:101:50: (opToken= 'or' expr= logicalAndExpression )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==77))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:101:51: opToken= 'or' expr= logicalAndExpression
					{
					DebugLocation(101, 58);
					opToken=(CommonToken)Match(input,77,Follow._77_in_logicalOrExpression462); 
					DebugLocation(101, 68);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression466);
					expr=logicalAndExpression();
					PopFollow();

					DebugLocation(101, 89);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalOrExpression", 17);
			LeaveRule("logicalOrExpression", 17);
			LeaveRule_logicalOrExpression();
		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return Value;

	}
	// $ANTLR end "logicalOrExpression"


	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();

	// $ANTLR start "logicalAndExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:103:1: logicalAndExpression returns [OclExpression Value] : res= relationalEqExpression (opToken= 'and' expr= relationalEqExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private OclExpression logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 18);
		TraceIn("logicalAndExpression", 18);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(103, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:105:2: (res= relationalEqExpression (opToken= 'and' expr= relationalEqExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:105:4: res= relationalEqExpression (opToken= 'and' expr= relationalEqExpression )*
			{
			DebugLocation(105, 7);
			PushFollow(Follow._relationalEqExpression_in_logicalAndExpression486);
			res=relationalEqExpression();
			PopFollow();

			DebugLocation(105, 31);
			Value =res;
			DebugLocation(105, 52);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:105:52: (opToken= 'and' expr= relationalEqExpression )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==63))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:105:53: opToken= 'and' expr= relationalEqExpression
					{
					DebugLocation(105, 60);
					opToken=(CommonToken)Match(input,63,Follow._63_in_logicalAndExpression493); 
					DebugLocation(105, 71);
					PushFollow(Follow._relationalEqExpression_in_logicalAndExpression497);
					expr=relationalEqExpression();
					PopFollow();

					DebugLocation(105, 94);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalAndExpression", 18);
			LeaveRule("logicalAndExpression", 18);
			LeaveRule_logicalAndExpression();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return Value;

	}
	// $ANTLR end "logicalAndExpression"


	partial void EnterRule_relationalEqExpression();
	partial void LeaveRule_relationalEqExpression();

	// $ANTLR start "relationalEqExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:108:1: relationalEqExpression returns [OclExpression Value] : res= relationalNotEqExprassion ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion )* ;
	[GrammarRule("relationalEqExpression")]
	private OclExpression relationalEqExpression()
	{
		EnterRule_relationalEqExpression();
		EnterRule("relationalEqExpression", 19);
		TraceIn("relationalEqExpression", 19);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "relationalEqExpression");
		DebugLocation(108, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:110:2: (res= relationalNotEqExprassion ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:110:5: res= relationalNotEqExprassion ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion )*
			{
			DebugLocation(110, 8);
			PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression519);
			res=relationalNotEqExprassion();
			PopFollow();

			DebugLocation(110, 35);
			Value =res;
			DebugLocation(110, 56);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:110:56: ( (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==39))
				{
					alt20 = 1;
				}
				else if ((LA20_0==38))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:110:57: (opToken= '=' |opToken= '<>' ) expr= relationalNotEqExprassion
					{
					DebugLocation(110, 57);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:110:57: (opToken= '=' |opToken= '<>' )
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==39))
					{
						alt19 = 1;
					}
					else if ((LA19_0==38))
					{
						alt19 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:110:58: opToken= '='
						{
						DebugLocation(110, 65);
						opToken=(CommonToken)Match(input,39,Follow._39_in_relationalEqExpression527); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:110:70: opToken= '<>'
						{
						DebugLocation(110, 77);
						opToken=(CommonToken)Match(input,38,Follow._38_in_relationalEqExpression531); 

						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(110, 88);
					PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression536);
					expr=relationalNotEqExprassion();
					PopFollow();

					DebugLocation(110, 114);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalEqExpression", 19);
			LeaveRule("relationalEqExpression", 19);
			LeaveRule_relationalEqExpression();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalEqExpression"); }
		return Value;

	}
	// $ANTLR end "relationalEqExpression"


	partial void EnterRule_relationalNotEqExprassion();
	partial void LeaveRule_relationalNotEqExprassion();

	// $ANTLR start "relationalNotEqExprassion"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:112:1: relationalNotEqExprassion returns [OclExpression Value] : res= additiveExpression ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression )* ;
	[GrammarRule("relationalNotEqExprassion")]
	private OclExpression relationalNotEqExprassion()
	{
		EnterRule_relationalNotEqExprassion();
		EnterRule("relationalNotEqExprassion", 20);
		TraceIn("relationalNotEqExprassion", 20);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "relationalNotEqExprassion");
		DebugLocation(112, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:2: (res= additiveExpression ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:3: res= additiveExpression ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression )*
			{
			DebugLocation(114, 6);
			PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion558);
			res=additiveExpression();
			PopFollow();

			DebugLocation(114, 26);
			Value =res;
			DebugLocation(114, 47);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:47: ( (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				switch (input.LA(1))
				{
				case 36:
					{
					alt22 = 1;
					}
					break;
				case 40:
					{
					alt22 = 1;
					}
					break;
				case 37:
					{
					alt22 = 1;
					}
					break;
				case 41:
					{
					alt22 = 1;
					}
					break;

				}

				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:48: (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' ) expr= additiveExpression
					{
					DebugLocation(114, 48);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:48: (opToken= '<' |opToken= '>' |opToken= '<=' |opToken= '>=' )
					int alt21=4;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, false);
					switch (input.LA(1))
					{
					case 36:
						{
						alt21 = 1;
						}
						break;
					case 40:
						{
						alt21 = 2;
						}
						break;
					case 37:
						{
						alt21 = 3;
						}
						break;
					case 41:
						{
						alt21 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:49: opToken= '<'
						{
						DebugLocation(114, 56);
						opToken=(CommonToken)Match(input,36,Follow._36_in_relationalNotEqExprassion566); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:62: opToken= '>'
						{
						DebugLocation(114, 69);
						opToken=(CommonToken)Match(input,40,Follow._40_in_relationalNotEqExprassion571); 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:75: opToken= '<='
						{
						DebugLocation(114, 82);
						opToken=(CommonToken)Match(input,37,Follow._37_in_relationalNotEqExprassion576); 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:114:89: opToken= '>='
						{
						DebugLocation(114, 96);
						opToken=(CommonToken)Match(input,41,Follow._41_in_relationalNotEqExprassion581); 

						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(114, 107);
					PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion586);
					expr=additiveExpression();
					PopFollow();

					DebugLocation(114, 126);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalNotEqExprassion", 20);
			LeaveRule("relationalNotEqExprassion", 20);
			LeaveRule_relationalNotEqExprassion();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalNotEqExprassion"); }
		return Value;

	}
	// $ANTLR end "relationalNotEqExprassion"


	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:119:1: additiveExpression returns [OclExpression Value] : res= multiplicativeExpression ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private OclExpression additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 21);
		TraceIn("additiveExpression", 21);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(119, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:121:2: (res= multiplicativeExpression ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:121:4: res= multiplicativeExpression ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression )*
			{
			DebugLocation(121, 7);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression611);
			res=multiplicativeExpression();
			PopFollow();

			DebugLocation(121, 33);
			Value =res;
			DebugLocation(121, 54);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:121:54: ( (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==26))
				{
					alt24 = 1;
				}
				else if ((LA24_0==28))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:121:55: (opToken= '+' |opToken= '-' ) expr= multiplicativeExpression
					{
					DebugLocation(121, 55);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:121:55: (opToken= '+' |opToken= '-' )
					int alt23=2;
					try { DebugEnterSubRule(23);
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==26))
					{
						alt23 = 1;
					}
					else if ((LA23_0==28))
					{
						alt23 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:121:56: opToken= '+'
						{
						DebugLocation(121, 63);
						opToken=(CommonToken)Match(input,26,Follow._26_in_additiveExpression619); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:121:68: opToken= '-'
						{
						DebugLocation(121, 75);
						opToken=(CommonToken)Match(input,28,Follow._28_in_additiveExpression623); 

						}
						break;

					}
					} finally { DebugExitSubRule(23); }

					DebugLocation(121, 85);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression629);
					expr=multiplicativeExpression();
					PopFollow();

					DebugLocation(121, 111);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 21);
			LeaveRule("additiveExpression", 21);
			LeaveRule_additiveExpression();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return Value;

	}
	// $ANTLR end "additiveExpression"


	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:124:1: multiplicativeExpression returns [OclExpression Value] : res= unaryExpression ( (opToken= '*' |opToken= '/' ) expr= unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private OclExpression multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 22);
		TraceIn("multiplicativeExpression", 22);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression res = default(OclExpression);
		OclExpression expr = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(124, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:126:2: (res= unaryExpression ( (opToken= '*' |opToken= '/' ) expr= unaryExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:126:5: res= unaryExpression ( (opToken= '*' |opToken= '/' ) expr= unaryExpression )*
			{
			DebugLocation(126, 8);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression653);
			res=unaryExpression();
			PopFollow();

			DebugLocation(126, 25);
			Value =res;
			DebugLocation(126, 46);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:126:46: ( (opToken= '*' |opToken= '/' ) expr= unaryExpression )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==UnlimitedNaturalLiteralExp))
				{
					alt26 = 1;
				}
				else if ((LA26_0==32))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:126:47: (opToken= '*' |opToken= '/' ) expr= unaryExpression
					{
					DebugLocation(126, 47);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:126:47: (opToken= '*' |opToken= '/' )
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==UnlimitedNaturalLiteralExp))
					{
						alt25 = 1;
					}
					else if ((LA25_0==32))
					{
						alt25 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:126:48: opToken= '*'
						{
						DebugLocation(126, 55);
						opToken=(CommonToken)Match(input,UnlimitedNaturalLiteralExp,Follow._UnlimitedNaturalLiteralExp_in_multiplicativeExpression661); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:126:60: opToken= '/'
						{
						DebugLocation(126, 67);
						opToken=(CommonToken)Match(input,32,Follow._32_in_multiplicativeExpression665); 

						}
						break;

					}
					} finally { DebugExitSubRule(25); }

					DebugLocation(126, 77);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression670);
					expr=unaryExpression();
					PopFollow();

					DebugLocation(126, 93);
					Value =InfixOperation(Value,opToken.Text,expr);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 22);
			LeaveRule("multiplicativeExpression", 22);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return Value;

	}
	// $ANTLR end "multiplicativeExpression"


	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:129:1: unaryExpression returns [OclExpression Value] : ( (opToken= '-' |opToken= 'not' ) term= termExpression | termExpression );
	[GrammarRule("unaryExpression")]
	private OclExpression unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 23);
		TraceIn("unaryExpression", 23);
		OclExpression Value = default(OclExpression);

		CommonToken opToken = default(CommonToken);
		OclExpression term = default(OclExpression);
		OclExpression termExpression9 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(129, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:131:2: ( (opToken= '-' |opToken= 'not' ) term= termExpression | termExpression )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==28||LA28_0==76))
			{
				alt28 = 1;
			}
			else if ((LA28_0==BooleanLiteralExp||(LA28_0>=IntegerLiteralExp && LA28_0<=InvalidLiteralExp)||LA28_0==NullLiteralExp||(LA28_0>=RealLiteralExp && LA28_0<=SimpleName)||(LA28_0>=StringLiteralExp && LA28_0<=UnlimitedNaturalLiteralExp)||LA28_0==24||(LA28_0>=44 && LA28_0<=58)||LA28_0==69||(LA28_0>=74 && LA28_0<=75)))
			{
				alt28 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:131:4: (opToken= '-' |opToken= 'not' ) term= termExpression
				{
				DebugLocation(131, 4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:131:4: (opToken= '-' |opToken= 'not' )
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==28))
				{
					alt27 = 1;
				}
				else if ((LA27_0==76))
				{
					alt27 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:131:5: opToken= '-'
					{
					DebugLocation(131, 12);
					opToken=(CommonToken)Match(input,28,Follow._28_in_unaryExpression693); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:131:17: opToken= 'not'
					{
					DebugLocation(131, 24);
					opToken=(CommonToken)Match(input,76,Follow._76_in_unaryExpression697); 

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(131, 36);
				PushFollow(Follow._termExpression_in_unaryExpression702);
				term=termExpression();
				PopFollow();

				DebugLocation(131, 52);
				Value =UnaryOperation(opToken,term);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:132:4: termExpression
				{
				DebugLocation(132, 4);
				PushFollow(Follow._termExpression_in_unaryExpression709);
				termExpression9=termExpression();
				PopFollow();

				DebugLocation(132, 19);
				Value = termExpression9;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 23);
			LeaveRule("unaryExpression", 23);
			LeaveRule_unaryExpression();
		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return Value;

	}
	// $ANTLR end "unaryExpression"


	partial void EnterRule_termExpression();
	partial void LeaveRule_termExpression();

	// $ANTLR start "termExpression"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:135:1: termExpression returns [OclExpression Value] : expr= primaryExperession ( ( ( '.' | '->' ) expr= propertyCall[false,$expr.Value,separator] ) | oclMessageExp )* ;
	[GrammarRule("termExpression")]
	private OclExpression termExpression()
	{
		EnterRule_termExpression();
		EnterRule("termExpression", 24);
		TraceIn("termExpression", 24);
		OclExpression Value = default(OclExpression);

		OclExpression expr = default(OclExpression);


				SeparatorType separator= SeparatorType.None;
			
		try { DebugEnterRule(GrammarFileName, "termExpression");
		DebugLocation(135, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:2: (expr= primaryExperession ( ( ( '.' | '->' ) expr= propertyCall[false,$expr.Value,separator] ) | oclMessageExp )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:4: expr= primaryExperession ( ( ( '.' | '->' ) expr= propertyCall[false,$expr.Value,separator] ) | oclMessageExp )*
			{
			DebugLocation(140, 9);
			PushFollow(Follow._primaryExperession_in_termExpression737);
			expr=primaryExperession();
			PopFollow();

			DebugLocation(140, 30);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:30: ( ( ( '.' | '->' ) expr= propertyCall[false,$expr.Value,separator] ) | oclMessageExp )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=3;
				try { DebugEnterDecision(30, false);
				switch (input.LA(1))
				{
				case 30:
					{
					alt30 = 1;
					}
					break;
				case 29:
					{
					alt30 = 1;
					}
					break;
				case 62:
					{
					alt30 = 2;
					}
					break;
				case 61:
					{
					alt30 = 2;
					}
					break;

				}

				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:32: ( ( '.' | '->' ) expr= propertyCall[false,$expr.Value,separator] )
					{
					DebugLocation(140, 32);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:32: ( ( '.' | '->' ) expr= propertyCall[false,$expr.Value,separator] )
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:33: ( '.' | '->' ) expr= propertyCall[false,$expr.Value,separator]
					{
					DebugLocation(140, 33);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:33: ( '.' | '->' )
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==30))
					{
						alt29 = 1;
					}
					else if ((LA29_0==29))
					{
						alt29 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:34: '.'
						{
						DebugLocation(140, 34);
						Match(input,30,Follow._30_in_termExpression743); 
						DebugLocation(140, 38);
						separator=SeparatorType.Dot;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:69: '->'
						{
						DebugLocation(140, 69);
						Match(input,29,Follow._29_in_termExpression747); 
						DebugLocation(140, 73);
						separator=SeparatorType.Arrow;

						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(140, 111);
					PushFollow(Follow._propertyCall_in_termExpression753);
					expr=propertyCall(false, expr, separator);
					PopFollow();


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:140:156: oclMessageExp
					{
					DebugLocation(140, 156);
					PushFollow(Follow._oclMessageExp_in_termExpression758);
					oclMessageExp();
					PopFollow();


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(140, 172);
			Value = expr;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("termExpression", 24);
			LeaveRule("termExpression", 24);
			LeaveRule_termExpression();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "termExpression"); }
		return Value;

	}
	// $ANTLR end "termExpression"


	partial void EnterRule_primaryExperession();
	partial void LeaveRule_primaryExperession();

	// $ANTLR start "primaryExperession"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:144:1: primaryExperession returns [OclExpression Value] : ( collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp | enumAndType | propertyCall[true,null,SeparatorType.None] | '(' oclExpression ')' | ifExp | letExp );
	[GrammarRule("primaryExperession")]
	private OclExpression primaryExperession()
	{
		EnterRule_primaryExperession();
		EnterRule("primaryExperession", 25);
		TraceIn("primaryExperession", 25);
		OclExpression Value = default(OclExpression);

		OclExpression collectionLiteralExpAndType10 = default(OclExpression);
		TupleLiteralExp tupleLiteralExp11 = default(TupleLiteralExp);
		LiteralExp primitiveLiteralExp12 = default(LiteralExp);
		TypeExp enumAndType13 = default(TypeExp);
		OclExpression propertyCall14 = default(OclExpression);
		OclExpression oclExpression15 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "primaryExperession");
		DebugLocation(144, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:146:2: ( collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp | enumAndType | propertyCall[true,null,SeparatorType.None] | '(' oclExpression ')' | ifExp | letExp )
			int alt31=8;
			try { DebugEnterDecision(31, false);
			try
			{
				alt31 = dfa31.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:150:8: collectionLiteralExpAndType
				{
				DebugLocation(150, 8);
				PushFollow(Follow._collectionLiteralExpAndType_in_primaryExperession794);
				collectionLiteralExpAndType10=collectionLiteralExpAndType();
				PopFollow();

				DebugLocation(151, 4);
				Value = collectionLiteralExpAndType10;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:152:4: tupleLiteralExp
				{
				DebugLocation(152, 4);
				PushFollow(Follow._tupleLiteralExp_in_primaryExperession805);
				tupleLiteralExp11=tupleLiteralExp();
				PopFollow();

				DebugLocation(153, 4);
				Value = tupleLiteralExp11;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:154:4: primitiveLiteralExp
				{
				DebugLocation(154, 4);
				PushFollow(Follow._primitiveLiteralExp_in_primaryExperession816);
				primitiveLiteralExp12=primitiveLiteralExp();
				PopFollow();

				DebugLocation(155, 4);
				Value = primitiveLiteralExp12;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:157:4: enumAndType
				{
				DebugLocation(157, 4);
				PushFollow(Follow._enumAndType_in_primaryExperession829);
				enumAndType13=enumAndType();
				PopFollow();

				DebugLocation(158, 4);
				Value = enumAndType13;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:159:4: propertyCall[true,null,SeparatorType.None]
				{
				DebugLocation(159, 4);
				PushFollow(Follow._propertyCall_in_primaryExperession840);
				propertyCall14=propertyCall(true, null, SeparatorType.None);
				PopFollow();

				DebugLocation(160, 4);
				Value = propertyCall14;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:161:4: '(' oclExpression ')'
				{
				DebugLocation(161, 4);
				Match(input,24,Follow._24_in_primaryExperession851); 
				DebugLocation(161, 7);
				PushFollow(Follow._oclExpression_in_primaryExperession852);
				oclExpression15=oclExpression();
				PopFollow();

				DebugLocation(161, 20);
				Match(input,25,Follow._25_in_primaryExperession853); 
				DebugLocation(162, 4);
				Value = oclExpression15;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:163:4: ifExp
				{
				DebugLocation(163, 4);
				PushFollow(Follow._ifExp_in_primaryExperession863);
				ifExp();
				PopFollow();


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:164:4: letExp
				{
				DebugLocation(164, 4);
				PushFollow(Follow._letExp_in_primaryExperession868);
				letExp();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExperession", 25);
			LeaveRule("primaryExperession", 25);
			LeaveRule_primaryExperession();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExperession"); }
		return Value;

	}
	// $ANTLR end "primaryExperession"


	partial void EnterRule_propertyCall();
	partial void LeaveRule_propertyCall();

	// $ANTLR start "propertyCall"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:166:1: propertyCall[bool isRoot,OclExpression root,SeparatorType separator] returns [OclExpression Value] : ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs[root] ')' )? | 'iterate' '(' ( variableDeclaration[VariableDeclarationRequirement.Iterate] ( ';' )? )+ '|' oclExpression ')' );
	[GrammarRule("propertyCall")]
	private OclExpression propertyCall(bool isRoot, OclExpression root, SeparatorType separator)
	{
		EnterRule_propertyCall();
		EnterRule("propertyCall", 26);
		TraceIn("propertyCall", 26);
		OclExpression Value = default(OclExpression);

		OCLParser.pathName_return pathName16 = default(OCLParser.pathName_return);
		OCLParser.arguments_return arguments17 = default(OCLParser.arguments_return);
		bool isMarkedPre18 = default(bool);
		OCLParser.propertyCallParametrs_return propertyCallParametrs19 = default(OCLParser.propertyCallParametrs_return);

		try { DebugEnterRule(GrammarFileName, "propertyCall");
		DebugLocation(166, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:2: ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs[root] ')' )? | 'iterate' '(' ( variableDeclaration[VariableDeclarationRequirement.Iterate] ( ';' )? )+ '|' oclExpression ')' )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==SimpleName))
			{
				alt37 = 1;
			}
			else if ((LA37_0==74))
			{
				alt37 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:4: pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs[root] ')' )?
				{
				DebugLocation(168, 4);
				PushFollow(Follow._pathName_in_propertyCall883);
				pathName16=pathName();
				PopFollow();

				DebugLocation(168, 13);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:13: ( '[' arguments ']' )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==59))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:14: '[' arguments ']'
					{
					DebugLocation(168, 14);
					Match(input,59,Follow._59_in_propertyCall886); 
					DebugLocation(168, 17);
					PushFollow(Follow._arguments_in_propertyCall887);
					arguments17=arguments();
					PopFollow();

					DebugLocation(168, 26);
					Match(input,60,Follow._60_in_propertyCall888); 

					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(168, 32);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:32: ( isMarkedPre )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==43))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:32: isMarkedPre
					{
					DebugLocation(168, 32);
					PushFollow(Follow._isMarkedPre_in_propertyCall892);
					isMarkedPre18=isMarkedPre();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(168, 45);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:45: ( '(' propertyCallParametrs[root] ')' )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==24))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:168:46: '(' propertyCallParametrs[root] ')'
					{
					DebugLocation(168, 46);
					Match(input,24,Follow._24_in_propertyCall896); 
					DebugLocation(168, 49);
					PushFollow(Follow._propertyCallParametrs_in_propertyCall897);
					propertyCallParametrs19=propertyCallParametrs(root);
					PopFollow();

					DebugLocation(168, 76);
					Match(input,25,Follow._25_in_propertyCall899); 

					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(169, 4);
				Value =PropertyCall(isRoot,separator,(pathName16!=null?pathName16.Path:default(List<string>)),root,(arguments17!=null?arguments17.Values:default(List<ArgumentBag>)),isMarkedPre18,(propertyCallParametrs19!=null?propertyCallParametrs19.VariableDecl:default(List<TypeDefBag>)),(propertyCallParametrs19!=null?propertyCallParametrs19.Arguments:default(List<ArgumentBag>)));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:172:3: 'iterate' '(' ( variableDeclaration[VariableDeclarationRequirement.Iterate] ( ';' )? )+ '|' oclExpression ')'
				{
				DebugLocation(172, 3);
				Match(input,74,Follow._74_in_propertyCall918); 
				DebugLocation(172, 13);
				Match(input,24,Follow._24_in_propertyCall920); 
				DebugLocation(172, 16);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:172:16: ( variableDeclaration[VariableDeclarationRequirement.Iterate] ( ';' )? )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==SimpleName))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:172:17: variableDeclaration[VariableDeclarationRequirement.Iterate] ( ';' )?
						{
						DebugLocation(172, 17);
						PushFollow(Follow._variableDeclaration_in_propertyCall922);
						variableDeclaration(VariableDeclarationRequirement.Iterate);
						PopFollow();

						DebugLocation(172, 77);
						// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:172:77: ( ';' )?
						int alt35=2;
						try { DebugEnterSubRule(35);
						try { DebugEnterDecision(35, false);
						int LA35_0 = input.LA(1);

						if ((LA35_0==35))
						{
							alt35 = 1;
						}
						} finally { DebugExitDecision(35); }
						switch (alt35)
						{
						case 1:
							DebugEnterAlt(1);
							// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:172:77: ';'
							{
							DebugLocation(172, 77);
							Match(input,35,Follow._35_in_propertyCall925); 

							}
							break;

						}
						} finally { DebugExitSubRule(35); }


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(172, 84);
				Match(input,83,Follow._83_in_propertyCall930); 
				DebugLocation(172, 88);
				PushFollow(Follow._oclExpression_in_propertyCall932);
				oclExpression();
				PopFollow();

				DebugLocation(172, 102);
				Match(input,25,Follow._25_in_propertyCall934); 
				DebugLocation(172, 106);
				throw new System.NotSupportedException();

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyCall", 26);
			LeaveRule("propertyCall", 26);
			LeaveRule_propertyCall();
		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCall"); }
		return Value;

	}
	// $ANTLR end "propertyCall"

	private sealed partial class propertyCallParametrs_return : ParserRuleReturnScope<CommonToken>
	{
		public List<TypeDefBag> VariableDecl;
		public List<ArgumentBag> Arguments;
		public propertyCallParametrs_return(OCLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLParser grammar);
	}

	partial void EnterRule_propertyCallParametrs();
	partial void LeaveRule_propertyCallParametrs();

	// $ANTLR start "propertyCallParametrs"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:179:1: propertyCallParametrs[OclExpression root] returns [List<TypeDefBag> VariableDecl,List<ArgumentBag> Arguments] : ( declarePropertyCallParametrs[root] )? ( arguments )? ;
	[GrammarRule("propertyCallParametrs")]
	private OCLParser.propertyCallParametrs_return propertyCallParametrs(OclExpression root)
	{
		EnterRule_propertyCallParametrs();
		EnterRule("propertyCallParametrs", 27);
		TraceIn("propertyCallParametrs", 27);
		OCLParser.propertyCallParametrs_return retval = new OCLParser.propertyCallParametrs_return(this);
		retval.Start = (CommonToken)input.LT(1);

		OCLParser.arguments_return arguments20 = default(OCLParser.arguments_return);
		OCLParser.declarePropertyCallParametrs_return declarePropertyCallParametrs21 = default(OCLParser.declarePropertyCallParametrs_return);


				int pushedVar = 0;
			
		try { DebugEnterRule(GrammarFileName, "propertyCallParametrs");
		DebugLocation(179, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:190:2: ( ( declarePropertyCallParametrs[root] )? ( arguments )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:190:4: ( declarePropertyCallParametrs[root] )? ( arguments )?
			{
			DebugLocation(190, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:190:4: ( declarePropertyCallParametrs[root] )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==SimpleName))
			{
				int LA38_1 = input.LA(2);

				if ((LA38_1==33||LA38_1==83))
				{
					alt38 = 1;
				}
				else if ((LA38_1==27))
				{
					int LA38_4 = input.LA(3);

					if ((LA38_4==SimpleName))
					{
						int LA38_5 = input.LA(4);

						if ((LA38_5==33||LA38_5==83))
						{
							alt38 = 1;
						}
					}
				}
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:190:4: declarePropertyCallParametrs[root]
				{
				DebugLocation(190, 4);
				PushFollow(Follow._declarePropertyCallParametrs_in_propertyCallParametrs973);
				declarePropertyCallParametrs21=declarePropertyCallParametrs(root);
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(190, 40);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:190:40: ( arguments )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==BooleanLiteralExp||(LA39_0>=IntegerLiteralExp && LA39_0<=InvalidLiteralExp)||LA39_0==NullLiteralExp||(LA39_0>=RealLiteralExp && LA39_0<=SimpleName)||(LA39_0>=StringLiteralExp && LA39_0<=UnlimitedNaturalLiteralExp)||LA39_0==24||LA39_0==28||(LA39_0>=44 && LA39_0<=58)||LA39_0==69||(LA39_0>=74 && LA39_0<=76)))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:190:40: arguments
				{
				DebugLocation(190, 40);
				PushFollow(Follow._arguments_in_propertyCallParametrs977);
				arguments20=arguments();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(190, 51);
			if((arguments20!=null?arguments20.Values:default(List<ArgumentBag>))== null) retval.Arguments = new List<ArgumentBag>(); else retval.Arguments = (arguments20!=null?arguments20.Values:default(List<ArgumentBag>)); retval.VariableDecl =(declarePropertyCallParametrs21!=null?declarePropertyCallParametrs21.VariableDecl:default(List<TypeDefBag>));pushedVar = (declarePropertyCallParametrs21!=null?declarePropertyCallParametrs21.pushedVar:default(int));

			}

			retval.Stop = (CommonToken)input.LT(-1);


					// Clear pushed variable
					for(int i=0;i<pushedVar;i++){
						EnvironmentStack.Pop();
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyCallParametrs", 27);
			LeaveRule("propertyCallParametrs", 27);
			LeaveRule_propertyCallParametrs();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCallParametrs"); }
		return retval;

	}
	// $ANTLR end "propertyCallParametrs"

	private sealed partial class declarePropertyCallParametrs_return : ParserRuleReturnScope<CommonToken>
	{
		public List<TypeDefBag> VariableDecl;
		public int pushedVar;
		public declarePropertyCallParametrs_return(OCLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLParser grammar);
	}

	partial void EnterRule_declarePropertyCallParametrs();
	partial void LeaveRule_declarePropertyCallParametrs();

	// $ANTLR start "declarePropertyCallParametrs"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:193:1: declarePropertyCallParametrs[OclExpression root] returns [List<TypeDefBag> VariableDecl,int pushedVar] : (t1= typedef[root] ( ',' t2= typedef[root] )? '|' ) ;
	[GrammarRule("declarePropertyCallParametrs")]
	private OCLParser.declarePropertyCallParametrs_return declarePropertyCallParametrs(OclExpression root)
	{
		EnterRule_declarePropertyCallParametrs();
		EnterRule("declarePropertyCallParametrs", 28);
		TraceIn("declarePropertyCallParametrs", 28);
		OCLParser.declarePropertyCallParametrs_return retval = new OCLParser.declarePropertyCallParametrs_return(this);
		retval.Start = (CommonToken)input.LT(1);

		TypeDefBag t1 = default(TypeDefBag);
		TypeDefBag t2 = default(TypeDefBag);


				retval.VariableDecl = new List<TypeDefBag>();
				retval.pushedVar = 0;
			
		try { DebugEnterRule(GrammarFileName, "declarePropertyCallParametrs");
		DebugLocation(193, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:208:2: ( (t1= typedef[root] ( ',' t2= typedef[root] )? '|' ) )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:208:4: (t1= typedef[root] ( ',' t2= typedef[root] )? '|' )
			{
			DebugLocation(208, 4);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:208:4: (t1= typedef[root] ( ',' t2= typedef[root] )? '|' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:208:6: t1= typedef[root] ( ',' t2= typedef[root] )? '|'
			{
			DebugLocation(208, 8);
			PushFollow(Follow._typedef_in_declarePropertyCallParametrs1013);
			t1=typedef(root);
			PopFollow();

			DebugLocation(208, 22);
			retval.VariableDecl.Add(t1);
			DebugLocation(208, 52);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:208:52: ( ',' t2= typedef[root] )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==27))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:208:53: ',' t2= typedef[root]
				{
				DebugLocation(208, 53);
				Match(input,27,Follow._27_in_declarePropertyCallParametrs1018); 
				DebugLocation(208, 59);
				PushFollow(Follow._typedef_in_declarePropertyCallParametrs1022);
				t2=typedef(root);
				PopFollow();

				DebugLocation(208, 73);
				retval.VariableDecl.Add(t2);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(208, 105);
			Match(input,83,Follow._83_in_declarePropertyCallParametrs1028); 

			}


			}

			retval.Stop = (CommonToken)input.LT(-1);


					// add variable to environment
					foreach(var variable in retval.VariableDecl)
					{
						var env = Environment.AddElement(variable.Name,variable.Type,variable.Declaration,true);
						EnvironmentStack.Push(env);
						retval.pushedVar++;
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declarePropertyCallParametrs", 28);
			LeaveRule("declarePropertyCallParametrs", 28);
			LeaveRule_declarePropertyCallParametrs();
		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "declarePropertyCallParametrs"); }
		return retval;

	}
	// $ANTLR end "declarePropertyCallParametrs"


	partial void EnterRule_typedef();
	partial void LeaveRule_typedef();

	// $ANTLR start "typedef"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:211:1: typedef[OclExpression root] returns [TypeDefBag Bag] : SimpleName ( ':' type )? ;
	[GrammarRule("typedef")]
	private TypeDefBag typedef(OclExpression root)
	{
		EnterRule_typedef();
		EnterRule("typedef", 29);
		TraceIn("typedef", 29);
		TypeDefBag Bag = default(TypeDefBag);

		CommonToken SimpleName22 = default(CommonToken);
		Classifier type23 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "typedef");
		DebugLocation(211, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:213:2: ( SimpleName ( ':' type )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:213:4: SimpleName ( ':' type )?
			{
			DebugLocation(213, 4);
			SimpleName22=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_typedef1047); 
			DebugLocation(213, 14);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:213:14: ( ':' type )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==33))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:213:15: ':' type
				{
				DebugLocation(213, 15);
				Match(input,33,Follow._33_in_typedef1049); 
				DebugLocation(213, 18);
				PushFollow(Follow._type_in_typedef1050);
				type23=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(213, 25);

				  var decl=CreateVariableDeclaration(SimpleName22,type23 == null? ((CollectionType)root.Type).ElementType:type23,null,VariableDeclarationRequirement.Iterator);
				  Bag = new TypeDefBag(SimpleName22.Text,type23,decl);
				  

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typedef", 29);
			LeaveRule("typedef", 29);
			LeaveRule_typedef();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "typedef"); }
		return Bag;

	}
	// $ANTLR end "typedef"


	partial void EnterRule_enumAndType();
	partial void LeaveRule_enumAndType();

	// $ANTLR start "enumAndType"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:219:1: enumAndType returns [TypeExp Value] : ( tupleType | primitiveType | oclType );
	[GrammarRule("enumAndType")]
	private TypeExp enumAndType()
	{
		EnterRule_enumAndType();
		EnterRule("enumAndType", 30);
		TraceIn("enumAndType", 30);
		TypeExp Value = default(TypeExp);

		TupleType tupleType24 = default(TupleType);
		Classifier primitiveType25 = default(Classifier);
		Classifier oclType26 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "enumAndType");
		DebugLocation(219, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:224:2: ( tupleType | primitiveType | oclType )
			int alt42=3;
			try { DebugEnterDecision(42, false);
			switch (input.LA(1))
			{
			case 57:
				{
				alt42 = 1;
				}
				break;
			case 45:
			case 47:
			case 53:
			case 56:
			case 58:
				{
				alt42 = 2;
				}
				break;
			case 48:
			case 49:
			case 50:
			case 51:
				{
				alt42 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:224:4: tupleType
				{
				DebugLocation(224, 4);
				PushFollow(Follow._tupleType_in_enumAndType1081);
				tupleType24=tupleType();
				PopFollow();

				DebugLocation(225, 3);
				Value = new TypeExp(tupleType24,TypesTable.Library.Type);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:226:4: primitiveType
				{
				DebugLocation(226, 4);
				PushFollow(Follow._primitiveType_in_enumAndType1095);
				primitiveType25=primitiveType();
				PopFollow();

				DebugLocation(227, 3);
				Value = new TypeExp(primitiveType25,TypesTable.Library.Type);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:228:4: oclType
				{
				DebugLocation(228, 4);
				PushFollow(Follow._oclType_in_enumAndType1105);
				oclType26=oclType();
				PopFollow();

				DebugLocation(229, 3);
				Value = new TypeExp(oclType26,TypesTable.Library.Type);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumAndType", 30);
			LeaveRule("enumAndType", 30);
			LeaveRule_enumAndType();
		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "enumAndType"); }
		return Value;

	}
	// $ANTLR end "enumAndType"

	private sealed partial class pathName_return : ParserRuleReturnScope<CommonToken>
	{
		public List<string> Path;
		public CommonToken FirstToken;
		public CommonToken LastToken;
		public pathName_return(OCLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLParser grammar);
	}

	partial void EnterRule_pathName();
	partial void LeaveRule_pathName();

	// $ANTLR start "pathName"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:234:1: pathName returns [List<string> Path,CommonToken FirstToken,CommonToken LastToken] : first= SimpleName ( '::' other+= SimpleName )* ;
	[GrammarRule("pathName")]
	private OCLParser.pathName_return pathName()
	{
		EnterRule_pathName();
		EnterRule("pathName", 31);
		TraceIn("pathName", 31);
		OCLParser.pathName_return retval = new OCLParser.pathName_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonToken first = default(CommonToken);
		CommonToken other = default(CommonToken);
		List<CommonToken> list_other = null;

		try { DebugEnterRule(GrammarFileName, "pathName");
		DebugLocation(234, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:236:2: (first= SimpleName ( '::' other+= SimpleName )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:236:4: first= SimpleName ( '::' other+= SimpleName )*
			{
			DebugLocation(236, 9);
			first=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_pathName1130); 
			DebugLocation(236, 21);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:236:21: ( '::' other+= SimpleName )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==34))
				{
					int LA43_2 = input.LA(2);

					if ((LA43_2==SimpleName))
					{
						int LA43_3 = input.LA(3);

						if ((LA43_3==EOF))
						{
							alt43 = 1;
						}
						else if ((LA43_3==SimpleName||LA43_3==UnlimitedNaturalLiteralExp||(LA43_3>=24 && LA43_3<=41)||LA43_3==43||(LA43_3>=59 && LA43_3<=68)||(LA43_3>=70 && LA43_3<=73)||(LA43_3>=77 && LA43_3<=81)||(LA43_3>=83 && LA43_3<=84)))
						{
							alt43 = 1;
						}


					}


				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:236:22: '::' other+= SimpleName
					{
					DebugLocation(236, 22);
					Match(input,34,Follow._34_in_pathName1133); 
					DebugLocation(236, 32);
					other=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_pathName1137); 
					if (list_other==null) list_other=new List<CommonToken>();
					list_other.Add(other);


					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(236, 47);
			retval.Path = ResolvePathName(first,list_other); retval.FirstToken = first; retval.LastToken =list_other!= null ? list_other[list_other.Count-1]:null;

			}

			retval.Stop = (CommonToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pathName", 31);
			LeaveRule("pathName", 31);
			LeaveRule_pathName();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "pathName"); }
		return retval;

	}
	// $ANTLR end "pathName"


	partial void EnterRule_collectionLiteralExpAndType();
	partial void LeaveRule_collectionLiteralExpAndType();

	// $ANTLR start "collectionLiteralExpAndType"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:240:1: collectionLiteralExpAndType returns [OclExpression Value] : collectionTypeIdentifier ( '(' type ')' )? ( '{' ( collectionLiteralParts )? '}' )? ;
	[GrammarRule("collectionLiteralExpAndType")]
	private OclExpression collectionLiteralExpAndType()
	{
		EnterRule_collectionLiteralExpAndType();
		EnterRule("collectionLiteralExpAndType", 32);
		TraceIn("collectionLiteralExpAndType", 32);
		OclExpression Value = default(OclExpression);

		OCLParser.collectionTypeIdentifier_return collectionTypeIdentifier27 = default(OCLParser.collectionTypeIdentifier_return);
		Classifier type28 = default(Classifier);
		List<CollectionLiteralPart> collectionLiteralParts29 = default(List<CollectionLiteralPart>);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralExpAndType");
		DebugLocation(240, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:2: ( collectionTypeIdentifier ( '(' type ')' )? ( '{' ( collectionLiteralParts )? '}' )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:3: collectionTypeIdentifier ( '(' type ')' )? ( '{' ( collectionLiteralParts )? '}' )?
			{
			DebugLocation(242, 3);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExpAndType1160);
			collectionTypeIdentifier27=collectionTypeIdentifier();
			PopFollow();

			DebugLocation(242, 28);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:28: ( '(' type ')' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==24))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:29: '(' type ')'
				{
				DebugLocation(242, 29);
				Match(input,24,Follow._24_in_collectionLiteralExpAndType1163); 
				DebugLocation(242, 33);
				PushFollow(Follow._type_in_collectionLiteralExpAndType1165);
				type28=type();
				PopFollow();

				DebugLocation(242, 39);
				Match(input,25,Follow._25_in_collectionLiteralExpAndType1168); 

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(242, 45);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:45: ( '{' ( collectionLiteralParts )? '}' )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==82))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:46: '{' ( collectionLiteralParts )? '}'
				{
				DebugLocation(242, 46);
				Match(input,82,Follow._82_in_collectionLiteralExpAndType1173); 
				DebugLocation(242, 50);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:50: ( collectionLiteralParts )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==BooleanLiteralExp||(LA45_0>=IntegerLiteralExp && LA45_0<=InvalidLiteralExp)||LA45_0==NullLiteralExp||(LA45_0>=RealLiteralExp && LA45_0<=SimpleName)||(LA45_0>=StringLiteralExp && LA45_0<=UnlimitedNaturalLiteralExp)||LA45_0==24||LA45_0==28||(LA45_0>=44 && LA45_0<=58)||LA45_0==69||(LA45_0>=74 && LA45_0<=76)))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:242:50: collectionLiteralParts
					{
					DebugLocation(242, 50);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExpAndType1175);
					collectionLiteralParts29=collectionLiteralParts();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(242, 74);
				Match(input,84,Follow._84_in_collectionLiteralExpAndType1178); 

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(243, 6);
			Value = CollectionLiteralExpAndType((collectionTypeIdentifier27!=null?collectionTypeIdentifier27.Kind:default(CollectionKind)),(collectionTypeIdentifier27!=null?collectionTypeIdentifier27.Token:default(CommonToken)),type28,collectionLiteralParts29);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralExpAndType", 32);
			LeaveRule("collectionLiteralExpAndType", 32);
			LeaveRule_collectionLiteralExpAndType();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExpAndType"); }
		return Value;

	}
	// $ANTLR end "collectionLiteralExpAndType"


	partial void EnterRule_enumLiteralExp();
	partial void LeaveRule_enumLiteralExp();

	// $ANTLR start "enumLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:246:1: enumLiteralExp : pathName '::' SimpleName ;
	[GrammarRule("enumLiteralExp")]
	private void enumLiteralExp()
	{
		EnterRule_enumLiteralExp();
		EnterRule("enumLiteralExp", 33);
		TraceIn("enumLiteralExp", 33);
		try { DebugEnterRule(GrammarFileName, "enumLiteralExp");
		DebugLocation(246, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:247:2: ( pathName '::' SimpleName )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:247:3: pathName '::' SimpleName
			{
			DebugLocation(247, 3);
			PushFollow(Follow._pathName_in_enumLiteralExp1199);
			pathName();
			PopFollow();

			DebugLocation(247, 11);
			Match(input,34,Follow._34_in_enumLiteralExp1200); 
			DebugLocation(247, 16);
			Match(input,SimpleName,Follow._SimpleName_in_enumLiteralExp1202); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumLiteralExp", 33);
			LeaveRule("enumLiteralExp", 33);
			LeaveRule_enumLiteralExp();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "enumLiteralExp"); }
		return;

	}
	// $ANTLR end "enumLiteralExp"


	partial void EnterRule_collectionLiteralExp();
	partial void LeaveRule_collectionLiteralExp();

	// $ANTLR start "collectionLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:250:1: collectionLiteralExp : ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' );
	[GrammarRule("collectionLiteralExp")]
	private void collectionLiteralExp()
	{
		EnterRule_collectionLiteralExp();
		EnterRule("collectionLiteralExp", 34);
		TraceIn("collectionLiteralExp", 34);
		try { DebugEnterRule(GrammarFileName, "collectionLiteralExp");
		DebugLocation(250, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:251:2: ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case 55:
				{
				int LA49_1 = input.LA(2);

				if ((LA49_1==82))
				{
					alt49 = 1;
				}
				else if ((LA49_1==24))
				{
					alt49 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 44:
				{
				int LA49_2 = input.LA(2);

				if ((LA49_2==82))
				{
					alt49 = 1;
				}
				else if ((LA49_2==24))
				{
					alt49 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 54:
				{
				int LA49_3 = input.LA(2);

				if ((LA49_3==82))
				{
					alt49 = 1;
				}
				else if ((LA49_3==24))
				{
					alt49 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 46:
				{
				int LA49_4 = input.LA(2);

				if ((LA49_4==82))
				{
					alt49 = 1;
				}
				else if ((LA49_4==24))
				{
					alt49 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 52:
				{
				int LA49_5 = input.LA(2);

				if ((LA49_5==82))
				{
					alt49 = 1;
				}
				else if ((LA49_5==24))
				{
					alt49 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:251:3: collectionTypeIdentifier '{' ( collectionLiteralParts )? '}'
				{
				DebugLocation(251, 3);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp1214);
				collectionTypeIdentifier();
				PopFollow();

				DebugLocation(251, 29);
				Match(input,82,Follow._82_in_collectionLiteralExp1217); 
				DebugLocation(251, 33);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:251:33: ( collectionLiteralParts )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==BooleanLiteralExp||(LA47_0>=IntegerLiteralExp && LA47_0<=InvalidLiteralExp)||LA47_0==NullLiteralExp||(LA47_0>=RealLiteralExp && LA47_0<=SimpleName)||(LA47_0>=StringLiteralExp && LA47_0<=UnlimitedNaturalLiteralExp)||LA47_0==24||LA47_0==28||(LA47_0>=44 && LA47_0<=58)||LA47_0==69||(LA47_0>=74 && LA47_0<=76)))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:251:33: collectionLiteralParts
					{
					DebugLocation(251, 33);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1219);
					collectionLiteralParts();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(251, 57);
				Match(input,84,Follow._84_in_collectionLiteralExp1222); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:252:3: collectionType '{' ( collectionLiteralParts )? '}'
				{
				DebugLocation(252, 3);
				PushFollow(Follow._collectionType_in_collectionLiteralExp1226);
				collectionType();
				PopFollow();

				DebugLocation(252, 18);
				Match(input,82,Follow._82_in_collectionLiteralExp1228); 
				DebugLocation(252, 22);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:252:22: ( collectionLiteralParts )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==BooleanLiteralExp||(LA48_0>=IntegerLiteralExp && LA48_0<=InvalidLiteralExp)||LA48_0==NullLiteralExp||(LA48_0>=RealLiteralExp && LA48_0<=SimpleName)||(LA48_0>=StringLiteralExp && LA48_0<=UnlimitedNaturalLiteralExp)||LA48_0==24||LA48_0==28||(LA48_0>=44 && LA48_0<=58)||LA48_0==69||(LA48_0>=74 && LA48_0<=76)))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:252:22: collectionLiteralParts
					{
					DebugLocation(252, 22);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp1230);
					collectionLiteralParts();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(252, 46);
				Match(input,84,Follow._84_in_collectionLiteralExp1233); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralExp", 34);
			LeaveRule("collectionLiteralExp", 34);
			LeaveRule_collectionLiteralExp();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExp"); }
		return;

	}
	// $ANTLR end "collectionLiteralExp"

	private sealed partial class collectionTypeIdentifier_return : ParserRuleReturnScope<CommonToken>
	{
		public CollectionKind Kind;
		public CommonToken Token;
		public collectionTypeIdentifier_return(OCLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLParser grammar);
	}

	partial void EnterRule_collectionTypeIdentifier();
	partial void LeaveRule_collectionTypeIdentifier();

	// $ANTLR start "collectionTypeIdentifier"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:260:1: collectionTypeIdentifier returns [CollectionKind Kind,CommonToken Token] : (tok= 'Set' |tok= 'Bag' |tok= 'Sequence' |tok= 'Collection' |tok= 'OrderedSet' );
	[GrammarRule("collectionTypeIdentifier")]
	private OCLParser.collectionTypeIdentifier_return collectionTypeIdentifier()
	{
		EnterRule_collectionTypeIdentifier();
		EnterRule("collectionTypeIdentifier", 35);
		TraceIn("collectionTypeIdentifier", 35);
		OCLParser.collectionTypeIdentifier_return retval = new OCLParser.collectionTypeIdentifier_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonToken tok = default(CommonToken);

		try { DebugEnterRule(GrammarFileName, "collectionTypeIdentifier");
		DebugLocation(260, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:262:2: (tok= 'Set' |tok= 'Bag' |tok= 'Sequence' |tok= 'Collection' |tok= 'OrderedSet' )
			int alt50=5;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case 55:
				{
				alt50 = 1;
				}
				break;
			case 44:
				{
				alt50 = 2;
				}
				break;
			case 54:
				{
				alt50 = 3;
				}
				break;
			case 46:
				{
				alt50 = 4;
				}
				break;
			case 52:
				{
				alt50 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:262:3: tok= 'Set'
				{
				DebugLocation(262, 6);
				tok=(CommonToken)Match(input,55,Follow._55_in_collectionTypeIdentifier1257); 
				DebugLocation(262, 14);
				retval.Kind = CollectionKind.Set; retval.Token = tok;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:263:3: tok= 'Bag'
				{
				DebugLocation(263, 6);
				tok=(CommonToken)Match(input,44,Follow._44_in_collectionTypeIdentifier1266); 
				DebugLocation(263, 14);
				retval.Kind = CollectionKind.Bag;retval.Token = tok;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:264:3: tok= 'Sequence'
				{
				DebugLocation(264, 6);
				tok=(CommonToken)Match(input,54,Follow._54_in_collectionTypeIdentifier1275); 
				DebugLocation(264, 18);
				retval.Kind = CollectionKind.Sequence;retval.Token = tok;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:265:3: tok= 'Collection'
				{
				DebugLocation(265, 6);
				tok=(CommonToken)Match(input,46,Follow._46_in_collectionTypeIdentifier1283); 
				DebugLocation(265, 19);
				retval.Kind = CollectionKind.Collection;retval.Token = tok;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:266:3: tok= 'OrderedSet'
				{
				DebugLocation(266, 6);
				tok=(CommonToken)Match(input,52,Follow._52_in_collectionTypeIdentifier1290); 
				DebugLocation(266, 19);
				retval.Kind = CollectionKind.OrderedSet;retval.Token = tok;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionTypeIdentifier", 35);
			LeaveRule("collectionTypeIdentifier", 35);
			LeaveRule_collectionTypeIdentifier();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionTypeIdentifier"); }
		return retval;

	}
	// $ANTLR end "collectionTypeIdentifier"


	partial void EnterRule_collectionLiteralParts();
	partial void LeaveRule_collectionLiteralParts();

	// $ANTLR start "collectionLiteralParts"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:269:1: collectionLiteralParts returns [List<CollectionLiteralPart> Values] : collectionLiteralPart ( ',' exists= collectionLiteralParts )? ;
	[GrammarRule("collectionLiteralParts")]
	private List<CollectionLiteralPart> collectionLiteralParts()
	{
		EnterRule_collectionLiteralParts();
		EnterRule("collectionLiteralParts", 36);
		TraceIn("collectionLiteralParts", 36);
		List<CollectionLiteralPart> Values = default(List<CollectionLiteralPart>);

		List<CollectionLiteralPart> exists = default(List<CollectionLiteralPart>);
		CollectionLiteralPart collectionLiteralPart30 = default(CollectionLiteralPart);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralParts");
		DebugLocation(269, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:271:2: ( collectionLiteralPart ( ',' exists= collectionLiteralParts )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:271:4: collectionLiteralPart ( ',' exists= collectionLiteralParts )?
			{
			DebugLocation(271, 4);
			PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts1308);
			collectionLiteralPart30=collectionLiteralPart();
			PopFollow();

			DebugLocation(271, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:271:26: ( ',' exists= collectionLiteralParts )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==27))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:271:28: ',' exists= collectionLiteralParts
				{
				DebugLocation(271, 28);
				Match(input,27,Follow._27_in_collectionLiteralParts1312); 
				DebugLocation(271, 38);
				PushFollow(Follow._collectionLiteralParts_in_collectionLiteralParts1316);
				exists=collectionLiteralParts();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(272, 3);

						if(exists == null){
							Values = new List<CollectionLiteralPart>();
						} else {
							Values = exists;
						}
						Values.Add(collectionLiteralPart30);
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralParts", 36);
			LeaveRule("collectionLiteralParts", 36);
			LeaveRule_collectionLiteralParts();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralParts"); }
		return Values;

	}
	// $ANTLR end "collectionLiteralParts"


	partial void EnterRule_collectionLiteralPart();
	partial void LeaveRule_collectionLiteralPart();

	// $ANTLR start "collectionLiteralPart"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:282:1: collectionLiteralPart returns [CollectionLiteralPart Part] : exp1= oclExpression ( '..' exp2= oclExpression )? ;
	[GrammarRule("collectionLiteralPart")]
	private CollectionLiteralPart collectionLiteralPart()
	{
		EnterRule_collectionLiteralPart();
		EnterRule("collectionLiteralPart", 37);
		TraceIn("collectionLiteralPart", 37);
		CollectionLiteralPart Part = default(CollectionLiteralPart);

		OclExpression exp1 = default(OclExpression);
		OclExpression exp2 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "collectionLiteralPart");
		DebugLocation(282, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:284:2: (exp1= oclExpression ( '..' exp2= oclExpression )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:284:4: exp1= oclExpression ( '..' exp2= oclExpression )?
			{
			DebugLocation(284, 8);
			PushFollow(Follow._oclExpression_in_collectionLiteralPart1342);
			exp1=oclExpression();
			PopFollow();

			DebugLocation(284, 23);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:284:23: ( '..' exp2= oclExpression )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==31))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:284:24: '..' exp2= oclExpression
				{
				DebugLocation(284, 24);
				Match(input,31,Follow._31_in_collectionLiteralPart1345); 
				DebugLocation(284, 33);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart1349);
				exp2=oclExpression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(285, 3);
			Part =CreateCollectionLiteralPart(exp1,exp2);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralPart", 37);
			LeaveRule("collectionLiteralPart", 37);
			LeaveRule_collectionLiteralPart();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralPart"); }
		return Part;

	}
	// $ANTLR end "collectionLiteralPart"


	partial void EnterRule_primitiveLiteralExp();
	partial void LeaveRule_primitiveLiteralExp();

	// $ANTLR start "primitiveLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:289:1: primitiveLiteralExp returns [LiteralExp Literal] : ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | BooleanLiteralExp | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp );
	[GrammarRule("primitiveLiteralExp")]
	private LiteralExp primitiveLiteralExp()
	{
		EnterRule_primitiveLiteralExp();
		EnterRule("primitiveLiteralExp", 38);
		TraceIn("primitiveLiteralExp", 38);
		LiteralExp Literal = default(LiteralExp);

		CommonToken IntegerLiteralExp31 = default(CommonToken);
		CommonToken RealLiteralExp32 = default(CommonToken);
		CommonToken StringLiteralExp33 = default(CommonToken);
		CommonToken BooleanLiteralExp34 = default(CommonToken);

		try { DebugEnterRule(GrammarFileName, "primitiveLiteralExp");
		DebugLocation(289, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:291:2: ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | BooleanLiteralExp | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp )
			int alt53=7;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case IntegerLiteralExp:
				{
				alt53 = 1;
				}
				break;
			case RealLiteralExp:
				{
				alt53 = 2;
				}
				break;
			case StringLiteralExp:
				{
				alt53 = 3;
				}
				break;
			case BooleanLiteralExp:
				{
				alt53 = 4;
				}
				break;
			case UnlimitedNaturalLiteralExp:
				{
				alt53 = 5;
				}
				break;
			case NullLiteralExp:
				{
				alt53 = 6;
				}
				break;
			case InvalidLiteralExp:
				{
				alt53 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:291:4: IntegerLiteralExp
				{
				DebugLocation(291, 4);
				IntegerLiteralExp31=(CommonToken)Match(input,IntegerLiteralExp,Follow._IntegerLiteralExp_in_primitiveLiteralExp1374); 
				DebugLocation(291, 25);
				Literal = CreateIntegerLiteral(IntegerLiteralExp31);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:292:4: RealLiteralExp
				{
				DebugLocation(292, 4);
				RealLiteralExp32=(CommonToken)Match(input,RealLiteralExp,Follow._RealLiteralExp_in_primitiveLiteralExp1384); 
				DebugLocation(292, 22);
				Literal = CreateRealLiteral(RealLiteralExp32);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:293:4: StringLiteralExp
				{
				DebugLocation(293, 4);
				StringLiteralExp33=(CommonToken)Match(input,StringLiteralExp,Follow._StringLiteralExp_in_primitiveLiteralExp1394); 
				DebugLocation(293, 24);
				Literal = CreateStringLiteral(StringLiteralExp33);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:294:4: BooleanLiteralExp
				{
				DebugLocation(294, 4);
				BooleanLiteralExp34=(CommonToken)Match(input,BooleanLiteralExp,Follow._BooleanLiteralExp_in_primitiveLiteralExp1404); 
				DebugLocation(294, 25);
				Literal = CreateBooleanLiteral(BooleanLiteralExp34.Text);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:295:4: UnlimitedNaturalLiteralExp
				{
				DebugLocation(295, 4);
				Match(input,UnlimitedNaturalLiteralExp,Follow._UnlimitedNaturalLiteralExp_in_primitiveLiteralExp1414); 
				DebugLocation(295, 31);
				Literal = CreateUnlimitedNaturalLiteral();

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:296:4: NullLiteralExp
				{
				DebugLocation(296, 4);
				Match(input,NullLiteralExp,Follow._NullLiteralExp_in_primitiveLiteralExp1421); 
				DebugLocation(296, 22);
				Literal = CreateNullLiteral();

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:297:4: InvalidLiteralExp
				{
				DebugLocation(297, 4);
				Match(input,InvalidLiteralExp,Follow._InvalidLiteralExp_in_primitiveLiteralExp1431); 
				DebugLocation(297, 25);
				Literal = CreateInvalidLiteral();

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveLiteralExp", 38);
			LeaveRule("primitiveLiteralExp", 38);
			LeaveRule_primitiveLiteralExp();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveLiteralExp"); }
		return Literal;

	}
	// $ANTLR end "primitiveLiteralExp"


	partial void EnterRule_tupleLiteralExp();
	partial void LeaveRule_tupleLiteralExp();

	// $ANTLR start "tupleLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:299:1: tupleLiteralExp returns [TupleLiteralExp Literal] : roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' ;
	[GrammarRule("tupleLiteralExp")]
	private TupleLiteralExp tupleLiteralExp()
	{
		EnterRule_tupleLiteralExp();
		EnterRule("tupleLiteralExp", 39);
		TraceIn("tupleLiteralExp", 39);
		TupleLiteralExp Literal = default(TupleLiteralExp);

		CommonToken roottoken = default(CommonToken);
		List<VariableDeclaration> variableDeclarationList35 = default(List<VariableDeclaration>);

		try { DebugEnterRule(GrammarFileName, "tupleLiteralExp");
		DebugLocation(299, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:301:2: (roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:301:4: roottoken= 'Tuple' '{' variableDeclarationList[VariableDeclarationRequirement.TupleLiteral] '}'
			{
			DebugLocation(301, 13);
			roottoken=(CommonToken)Match(input,57,Follow._57_in_tupleLiteralExp1454); 
			DebugLocation(301, 22);
			Match(input,82,Follow._82_in_tupleLiteralExp1456); 
			DebugLocation(301, 26);
			PushFollow(Follow._variableDeclarationList_in_tupleLiteralExp1458);
			variableDeclarationList35=variableDeclarationList(VariableDeclarationRequirement.TupleLiteral);
			PopFollow();

			DebugLocation(301, 95);
			Match(input,84,Follow._84_in_tupleLiteralExp1461); 
			DebugLocation(301, 99);
			Literal = CreateTupleLiteral(roottoken,variableDeclarationList35);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleLiteralExp", 39);
			LeaveRule("tupleLiteralExp", 39);
			LeaveRule_tupleLiteralExp();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleLiteralExp"); }
		return Literal;

	}
	// $ANTLR end "tupleLiteralExp"


	partial void EnterRule_typeLiteralExp();
	partial void LeaveRule_typeLiteralExp();

	// $ANTLR start "typeLiteralExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:304:1: typeLiteralExp : type ;
	[GrammarRule("typeLiteralExp")]
	private void typeLiteralExp()
	{
		EnterRule_typeLiteralExp();
		EnterRule("typeLiteralExp", 40);
		TraceIn("typeLiteralExp", 40);
		try { DebugEnterRule(GrammarFileName, "typeLiteralExp");
		DebugLocation(304, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:305:2: ( type )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:305:3: type
			{
			DebugLocation(305, 3);
			PushFollow(Follow._type_in_typeLiteralExp1475);
			type();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeLiteralExp", 40);
			LeaveRule("typeLiteralExp", 40);
			LeaveRule_typeLiteralExp();
		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "typeLiteralExp"); }
		return;

	}
	// $ANTLR end "typeLiteralExp"


	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:308:1: variableDeclaration[VariableDeclarationRequirement requirement] returns [VariableDeclaration Declaration] : SimpleName ( ':' type )? ( '=' oclExpression )? ;
	[GrammarRule("variableDeclaration")]
	private VariableDeclaration variableDeclaration(VariableDeclarationRequirement requirement)
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 41);
		TraceIn("variableDeclaration", 41);
		VariableDeclaration Declaration = default(VariableDeclaration);

		CommonToken SimpleName36 = default(CommonToken);
		Classifier type37 = default(Classifier);
		OclExpression oclExpression38 = default(OclExpression);

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(308, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:310:2: ( SimpleName ( ':' type )? ( '=' oclExpression )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:310:3: SimpleName ( ':' type )? ( '=' oclExpression )?
			{
			DebugLocation(310, 3);
			SimpleName36=(CommonToken)Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration1492); 
			DebugLocation(310, 14);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:310:14: ( ':' type )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==33))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:310:15: ':' type
				{
				DebugLocation(310, 15);
				Match(input,33,Follow._33_in_variableDeclaration1495); 
				DebugLocation(310, 19);
				PushFollow(Follow._type_in_variableDeclaration1497);
				type37=type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(310, 26);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:310:26: ( '=' oclExpression )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==39))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:310:28: '=' oclExpression
				{
				DebugLocation(310, 28);
				Match(input,39,Follow._39_in_variableDeclaration1503); 
				DebugLocation(310, 32);
				PushFollow(Follow._oclExpression_in_variableDeclaration1505);
				oclExpression38=oclExpression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(310, 49);
			Declaration =CreateVariableDeclaration(SimpleName36,type37,oclExpression38,requirement); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 41);
			LeaveRule("variableDeclaration", 41);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return Declaration;

	}
	// $ANTLR end "variableDeclaration"


	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:313:1: type returns [Classifier Type] : ( pathName | collectionType | tupleType | primitiveType | oclType );
	[GrammarRule("type")]
	private Classifier type()
	{
		EnterRule_type();
		EnterRule("type", 42);
		TraceIn("type", 42);
		Classifier Type = default(Classifier);

		OCLParser.pathName_return pathName39 = default(OCLParser.pathName_return);
		CollectionType collectionType40 = default(CollectionType);
		TupleType tupleType41 = default(TupleType);
		Classifier primitiveType42 = default(Classifier);
		Classifier oclType43 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(313, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:315:2: ( pathName | collectionType | tupleType | primitiveType | oclType )
			int alt56=5;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case SimpleName:
				{
				alt56 = 1;
				}
				break;
			case 44:
			case 46:
			case 52:
			case 54:
			case 55:
				{
				alt56 = 2;
				}
				break;
			case 57:
				{
				alt56 = 3;
				}
				break;
			case 45:
			case 47:
			case 53:
			case 56:
			case 58:
				{
				alt56 = 4;
				}
				break;
			case 48:
			case 49:
			case 50:
			case 51:
				{
				alt56 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:315:4: pathName
				{
				DebugLocation(315, 4);
				PushFollow(Follow._pathName_in_type1527);
				pathName39=pathName();
				PopFollow();

				DebugLocation(315, 15);
				Type = ResolveTypePathName((pathName39!=null?pathName39.Path:default(List<string>)),(pathName39!=null?pathName39.FirstToken:default(CommonToken)),(pathName39!=null?pathName39.LastToken:default(CommonToken)));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:316:4: collectionType
				{
				DebugLocation(316, 4);
				PushFollow(Follow._collectionType_in_type1536);
				collectionType40=collectionType();
				PopFollow();

				DebugLocation(316, 19);
				Type = collectionType40;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:317:4: tupleType
				{
				DebugLocation(317, 4);
				PushFollow(Follow._tupleType_in_type1543);
				tupleType41=tupleType();
				PopFollow();

				DebugLocation(317, 16);
				Type = tupleType41;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:318:4: primitiveType
				{
				DebugLocation(318, 4);
				PushFollow(Follow._primitiveType_in_type1552);
				primitiveType42=primitiveType();
				PopFollow();

				DebugLocation(318, 19);
				Type = primitiveType42;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:319:4: oclType
				{
				DebugLocation(319, 4);
				PushFollow(Follow._oclType_in_type1560);
				oclType43=oclType();
				PopFollow();

				DebugLocation(319, 14);
				Type = oclType43;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 42);
			LeaveRule("type", 42);
			LeaveRule_type();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return Type;

	}
	// $ANTLR end "type"


	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();

	// $ANTLR start "primitiveType"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:322:1: primitiveType returns [Classifier Type] : ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' );
	[GrammarRule("primitiveType")]
	private Classifier primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 43);
		TraceIn("primitiveType", 43);
		Classifier Type = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(322, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:324:2: ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' )
			int alt57=5;
			try { DebugEnterDecision(57, false);
			switch (input.LA(1))
			{
			case 45:
				{
				alt57 = 1;
				}
				break;
			case 47:
				{
				alt57 = 2;
				}
				break;
			case 53:
				{
				alt57 = 3;
				}
				break;
			case 56:
				{
				alt57 = 4;
				}
				break;
			case 58:
				{
				alt57 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:324:4: 'Boolean'
				{
				DebugLocation(324, 4);
				Match(input,45,Follow._45_in_primitiveType1583); 
				DebugLocation(324, 17);
				Type = TypesTable.Library.Boolean;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:325:4: 'Integer'
				{
				DebugLocation(325, 4);
				Match(input,47,Follow._47_in_primitiveType1593); 
				DebugLocation(325, 17);
				Type = TypesTable.Library.Integer;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:326:4: 'Real'
				{
				DebugLocation(326, 4);
				Match(input,53,Follow._53_in_primitiveType1603); 
				DebugLocation(326, 14);
				Type = TypesTable.Library.Real;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:327:4: 'String'
				{
				DebugLocation(327, 4);
				Match(input,56,Follow._56_in_primitiveType1613); 
				DebugLocation(327, 16);
				Type = TypesTable.Library.String;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:328:4: 'UnlimitedNatural'
				{
				DebugLocation(328, 4);
				Match(input,58,Follow._58_in_primitiveType1623); 
				DebugLocation(328, 23);
				Type = TypesTable.Library.UnlimitedNatural;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 43);
			LeaveRule("primitiveType", 43);
			LeaveRule_primitiveType();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return Type;

	}
	// $ANTLR end "primitiveType"


	partial void EnterRule_oclType();
	partial void LeaveRule_oclType();

	// $ANTLR start "oclType"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:331:1: oclType returns [Classifier Type] : ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' );
	[GrammarRule("oclType")]
	private Classifier oclType()
	{
		EnterRule_oclType();
		EnterRule("oclType", 44);
		TraceIn("oclType", 44);
		Classifier Type = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "oclType");
		DebugLocation(331, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:333:2: ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' )
			int alt58=4;
			try { DebugEnterDecision(58, false);
			switch (input.LA(1))
			{
			case 48:
				{
				alt58 = 1;
				}
				break;
			case 49:
				{
				alt58 = 2;
				}
				break;
			case 50:
				{
				alt58 = 3;
				}
				break;
			case 51:
				{
				alt58 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:333:4: 'OclAny'
				{
				DebugLocation(333, 4);
				Match(input,48,Follow._48_in_oclType1643); 
				DebugLocation(333, 16);
				Type = TypesTable.Library.Any;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:334:4: 'OclInvalid'
				{
				DebugLocation(334, 4);
				Match(input,49,Follow._49_in_oclType1653); 
				DebugLocation(334, 19);
				Type = TypesTable.Library.Invalid;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:335:4: 'OclMessage'
				{
				DebugLocation(335, 4);
				Match(input,50,Follow._50_in_oclType1662); 
				DebugLocation(335, 19);
				Type = TypesTable.Library.Message; throw new System.NotSupportedException();

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:336:4: 'OclVoid'
				{
				DebugLocation(336, 4);
				Match(input,51,Follow._51_in_oclType1671); 
				DebugLocation(336, 17);
				Type = TypesTable.Library.Void;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclType", 44);
			LeaveRule("oclType", 44);
			LeaveRule_oclType();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "oclType"); }
		return Type;

	}
	// $ANTLR end "oclType"


	partial void EnterRule_collectionType();
	partial void LeaveRule_collectionType();

	// $ANTLR start "collectionType"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:339:1: collectionType returns [CollectionType Type] : collectionTypeIdentifier '(' type ')' ;
	[GrammarRule("collectionType")]
	private CollectionType collectionType()
	{
		EnterRule_collectionType();
		EnterRule("collectionType", 45);
		TraceIn("collectionType", 45);
		CollectionType Type = default(CollectionType);

		OCLParser.collectionTypeIdentifier_return collectionTypeIdentifier44 = default(OCLParser.collectionTypeIdentifier_return);
		Classifier type45 = default(Classifier);

		try { DebugEnterRule(GrammarFileName, "collectionType");
		DebugLocation(339, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:341:2: ( collectionTypeIdentifier '(' type ')' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:341:4: collectionTypeIdentifier '(' type ')'
			{
			DebugLocation(341, 4);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionType1693);
			collectionTypeIdentifier44=collectionTypeIdentifier();
			PopFollow();

			DebugLocation(341, 29);
			Match(input,24,Follow._24_in_collectionType1695); 
			DebugLocation(341, 33);
			PushFollow(Follow._type_in_collectionType1697);
			type45=type();
			PopFollow();

			DebugLocation(341, 39);
			Match(input,25,Follow._25_in_collectionType1700); 
			DebugLocation(341, 43);
			Type = CreateCollectionType((collectionTypeIdentifier44!=null?collectionTypeIdentifier44.Kind:default(CollectionKind)),type45);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionType", 45);
			LeaveRule("collectionType", 45);
			LeaveRule_collectionType();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionType"); }
		return Type;

	}
	// $ANTLR end "collectionType"


	partial void EnterRule_tupleType();
	partial void LeaveRule_tupleType();

	// $ANTLR start "tupleType"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:344:1: tupleType returns [TupleType Type] : token= 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')' ;
	[GrammarRule("tupleType")]
	private TupleType tupleType()
	{
		EnterRule_tupleType();
		EnterRule("tupleType", 46);
		TraceIn("tupleType", 46);
		TupleType Type = default(TupleType);

		CommonToken token = default(CommonToken);
		List<VariableDeclaration> variableDeclarationList46 = default(List<VariableDeclaration>);

		try { DebugEnterRule(GrammarFileName, "tupleType");
		DebugLocation(344, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:346:2: (token= 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:346:4: token= 'Tuple' '(' ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )? ')'
			{
			DebugLocation(346, 9);
			token=(CommonToken)Match(input,57,Follow._57_in_tupleType1722); 
			DebugLocation(346, 18);
			Match(input,24,Follow._24_in_tupleType1724); 
			DebugLocation(346, 22);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:346:22: ( variableDeclarationList[VariableDeclarationRequirement.TupleType] )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==SimpleName))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:346:22: variableDeclarationList[VariableDeclarationRequirement.TupleType]
				{
				DebugLocation(346, 22);
				PushFollow(Follow._variableDeclarationList_in_tupleType1726);
				variableDeclarationList46=variableDeclarationList(VariableDeclarationRequirement.TupleType);
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(346, 89);
			Match(input,25,Follow._25_in_tupleType1730); 
			DebugLocation(346, 93);
			Type = CreateTupleType(token,variableDeclarationList46);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleType", 46);
			LeaveRule("tupleType", 46);
			LeaveRule_tupleType();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleType"); }
		return Type;

	}
	// $ANTLR end "tupleType"


	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:350:1: variableDeclarationList[VariableDeclarationRequirement requirement] returns [List<VariableDeclaration> DeclarationList ] : variableDeclaration[requirement] ( ',' exists= variableDeclarationList[requirement] )? ;
	[GrammarRule("variableDeclarationList")]
	private List<VariableDeclaration> variableDeclarationList(VariableDeclarationRequirement requirement)
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 47);
		TraceIn("variableDeclarationList", 47);
		List<VariableDeclaration> DeclarationList = default(List<VariableDeclaration>);

		List<VariableDeclaration> exists = default(List<VariableDeclaration>);
		VariableDeclaration variableDeclaration47 = default(VariableDeclaration);

		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(350, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:352:2: ( variableDeclaration[requirement] ( ',' exists= variableDeclarationList[requirement] )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:352:4: variableDeclaration[requirement] ( ',' exists= variableDeclarationList[requirement] )?
			{
			DebugLocation(352, 4);
			PushFollow(Follow._variableDeclaration_in_variableDeclarationList1751);
			variableDeclaration47=variableDeclaration(requirement);
			PopFollow();

			DebugLocation(352, 37);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:352:37: ( ',' exists= variableDeclarationList[requirement] )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==27))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:352:38: ',' exists= variableDeclarationList[requirement]
				{
				DebugLocation(352, 38);
				Match(input,27,Follow._27_in_variableDeclarationList1755); 
				DebugLocation(352, 47);
				PushFollow(Follow._variableDeclarationList_in_variableDeclarationList1758);
				exists=variableDeclarationList(requirement);
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(352, 88);
			DeclarationList = CreatevariableDeclarationList(variableDeclaration47,exists);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationList", 47);
			LeaveRule("variableDeclarationList", 47);
			LeaveRule_variableDeclarationList();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return DeclarationList;

	}
	// $ANTLR end "variableDeclarationList"


	partial void EnterRule_isMarkedPre();
	partial void LeaveRule_isMarkedPre();

	// $ANTLR start "isMarkedPre"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:355:1: isMarkedPre returns [bool IsPre = false] : '@' 'pre' ;
	[GrammarRule("isMarkedPre")]
	private bool isMarkedPre()
	{
		EnterRule_isMarkedPre();
		EnterRule("isMarkedPre", 48);
		TraceIn("isMarkedPre", 48);
		bool IsPre =  false;

		try { DebugEnterRule(GrammarFileName, "isMarkedPre");
		DebugLocation(355, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:357:2: ( '@' 'pre' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:357:4: '@' 'pre'
			{
			DebugLocation(357, 4);
			Match(input,43,Follow._43_in_isMarkedPre1782); 
			DebugLocation(357, 8);
			Match(input,79,Follow._79_in_isMarkedPre1784); 
			DebugLocation(357, 14);
			IsPre = true;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("isMarkedPre", 48);
			LeaveRule("isMarkedPre", 48);
			LeaveRule_isMarkedPre();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "isMarkedPre"); }
		return IsPre;

	}
	// $ANTLR end "isMarkedPre"

	private sealed partial class arguments_return : ParserRuleReturnScope<CommonToken>
	{
		public List<ArgumentBag> Values;
		public arguments_return(OCLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(OCLParser grammar);
	}

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:360:1: arguments returns [List<ArgumentBag> Values] : exp1= oclExpression ( ',' exp2= oclExpression )* ;
	[GrammarRule("arguments")]
	private OCLParser.arguments_return arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 49);
		TraceIn("arguments", 49);
		OCLParser.arguments_return retval = new OCLParser.arguments_return(this);
		retval.Start = (CommonToken)input.LT(1);

		OclExpression exp1 = default(OclExpression);
		OclExpression exp2 = default(OclExpression);


				retval.Values = new List<ArgumentBag>();
			
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(360, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:365:2: (exp1= oclExpression ( ',' exp2= oclExpression )* )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:365:4: exp1= oclExpression ( ',' exp2= oclExpression )*
			{
			DebugLocation(365, 9);
			PushFollow(Follow._oclExpression_in_arguments1812);
			exp1=oclExpression();
			PopFollow();

			DebugLocation(365, 25);
			retval.Values.Add(new ArgumentBag(exp1,retval.Start,retval.Stop));
			DebugLocation(365, 103);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:365:103: ( ',' exp2= oclExpression )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==27))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:365:105: ',' exp2= oclExpression
					{
					DebugLocation(365, 105);
					Match(input,27,Follow._27_in_arguments1818); 
					DebugLocation(365, 113);
					PushFollow(Follow._oclExpression_in_arguments1822);
					exp2=oclExpression();
					PopFollow();

					DebugLocation(365, 127);
					retval.Values.Add(new ArgumentBag(exp2,retval.Start,retval.Stop));

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 49);
			LeaveRule("arguments", 49);
			LeaveRule_arguments();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"


	partial void EnterRule_letExp();
	partial void LeaveRule_letExp();

	// $ANTLR start "letExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:369:1: letExp : 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub ;
	[GrammarRule("letExp")]
	private void letExp()
	{
		EnterRule_letExp();
		EnterRule("letExp", 50);
		TraceIn("letExp", 50);
		try { DebugEnterRule(GrammarFileName, "letExp");
		DebugLocation(369, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:370:2: ( 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:370:4: 'let' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub
			{
			DebugLocation(370, 4);
			Match(input,75,Follow._75_in_letExp1839); 
			DebugLocation(370, 10);
			PushFollow(Follow._variableDeclaration_in_letExp1841);
			variableDeclaration(VariableDeclarationRequirement.Let);
			PopFollow();

			DebugLocation(370, 66);
			PushFollow(Follow._letExpSub_in_letExp1844);
			letExpSub();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("letExp", 50);
			LeaveRule("letExp", 50);
			LeaveRule_letExp();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "letExp"); }
		return;

	}
	// $ANTLR end "letExp"


	partial void EnterRule_letExpSub();
	partial void LeaveRule_letExpSub();

	// $ANTLR start "letExpSub"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:373:1: letExpSub : ( ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub | 'in' ( options {greedy=false; } : oclExpression ) );
	[GrammarRule("letExpSub")]
	private void letExpSub()
	{
		EnterRule_letExpSub();
		EnterRule("letExpSub", 51);
		TraceIn("letExpSub", 51);
		try { DebugEnterRule(GrammarFileName, "letExpSub");
		DebugLocation(373, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:374:2: ( ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub | 'in' ( options {greedy=false; } : oclExpression ) )
			int alt62=2;
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==27))
			{
				alt62 = 1;
			}
			else if ((LA62_0==71))
			{
				alt62 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:374:4: ',' variableDeclaration[VariableDeclarationRequirement.Let] letExpSub
				{
				DebugLocation(374, 4);
				Match(input,27,Follow._27_in_letExpSub1856); 
				DebugLocation(374, 8);
				PushFollow(Follow._variableDeclaration_in_letExpSub1858);
				variableDeclaration(VariableDeclarationRequirement.Let);
				PopFollow();

				DebugLocation(374, 64);
				PushFollow(Follow._letExpSub_in_letExpSub1861);
				letExpSub();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:375:4: 'in' ( options {greedy=false; } : oclExpression )
				{
				DebugLocation(375, 4);
				Match(input,71,Follow._71_in_letExpSub1866); 
				DebugLocation(375, 9);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:375:9: ( options {greedy=false; } : oclExpression )
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:375:35: oclExpression
				{
				DebugLocation(375, 35);
				PushFollow(Follow._oclExpression_in_letExpSub1877);
				oclExpression();
				PopFollow();


				}


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("letExpSub", 51);
			LeaveRule("letExpSub", 51);
			LeaveRule_letExpSub();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "letExpSub"); }
		return;

	}
	// $ANTLR end "letExpSub"


	partial void EnterRule_oclMessageExp();
	partial void LeaveRule_oclMessageExp();

	// $ANTLR start "oclMessageExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:378:1: oclMessageExp : ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' );
	[GrammarRule("oclMessageExp")]
	private void oclMessageExp()
	{
		EnterRule_oclMessageExp();
		EnterRule("oclMessageExp", 52);
		TraceIn("oclMessageExp", 52);
		try { DebugEnterRule(GrammarFileName, "oclMessageExp");
		DebugLocation(378, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:379:2: ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==62))
			{
				alt65 = 1;
			}
			else if ((LA65_0==61))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:379:4: '^^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(379, 4);
				Match(input,62,Follow._62_in_oclMessageExp1889); 
				DebugLocation(379, 9);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1891); 
				DebugLocation(379, 20);
				Match(input,24,Follow._24_in_oclMessageExp1893); 
				DebugLocation(379, 24);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:379:24: ( oclMessageArguments )?
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==BooleanLiteralExp||(LA63_0>=IntegerLiteralExp && LA63_0<=InvalidLiteralExp)||LA63_0==NullLiteralExp||(LA63_0>=RealLiteralExp && LA63_0<=SimpleName)||(LA63_0>=StringLiteralExp && LA63_0<=UnlimitedNaturalLiteralExp)||LA63_0==24||LA63_0==28||LA63_0==42||(LA63_0>=44 && LA63_0<=58)||LA63_0==69||(LA63_0>=74 && LA63_0<=76)))
				{
					alt63 = 1;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:379:24: oclMessageArguments
					{
					DebugLocation(379, 24);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1895);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(63); }

				DebugLocation(379, 45);
				Match(input,25,Follow._25_in_oclMessageExp1898); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:380:4: '^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(380, 4);
				Match(input,61,Follow._61_in_oclMessageExp1903); 
				DebugLocation(380, 8);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1905); 
				DebugLocation(380, 19);
				Match(input,24,Follow._24_in_oclMessageExp1907); 
				DebugLocation(380, 23);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:380:23: ( oclMessageArguments )?
				int alt64=2;
				try { DebugEnterSubRule(64);
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==BooleanLiteralExp||(LA64_0>=IntegerLiteralExp && LA64_0<=InvalidLiteralExp)||LA64_0==NullLiteralExp||(LA64_0>=RealLiteralExp && LA64_0<=SimpleName)||(LA64_0>=StringLiteralExp && LA64_0<=UnlimitedNaturalLiteralExp)||LA64_0==24||LA64_0==28||LA64_0==42||(LA64_0>=44 && LA64_0<=58)||LA64_0==69||(LA64_0>=74 && LA64_0<=76)))
				{
					alt64 = 1;
				}
				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:380:23: oclMessageArguments
					{
					DebugLocation(380, 23);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1909);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(64); }

				DebugLocation(380, 44);
				Match(input,25,Follow._25_in_oclMessageExp1912); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageExp", 52);
			LeaveRule("oclMessageExp", 52);
			LeaveRule_oclMessageExp();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageExp"); }
		return;

	}
	// $ANTLR end "oclMessageExp"


	partial void EnterRule_oclMessageArguments();
	partial void LeaveRule_oclMessageArguments();

	// $ANTLR start "oclMessageArguments"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:382:1: oclMessageArguments : oclMessageArg ( ',' oclMessageArguments )? ;
	[GrammarRule("oclMessageArguments")]
	private void oclMessageArguments()
	{
		EnterRule_oclMessageArguments();
		EnterRule("oclMessageArguments", 53);
		TraceIn("oclMessageArguments", 53);
		try { DebugEnterRule(GrammarFileName, "oclMessageArguments");
		DebugLocation(382, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:383:2: ( oclMessageArg ( ',' oclMessageArguments )? )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:383:4: oclMessageArg ( ',' oclMessageArguments )?
			{
			DebugLocation(383, 4);
			PushFollow(Follow._oclMessageArg_in_oclMessageArguments1922);
			oclMessageArg();
			PopFollow();

			DebugLocation(383, 18);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:383:18: ( ',' oclMessageArguments )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==27))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:383:20: ',' oclMessageArguments
				{
				DebugLocation(383, 20);
				Match(input,27,Follow._27_in_oclMessageArguments1926); 
				DebugLocation(383, 24);
				PushFollow(Follow._oclMessageArguments_in_oclMessageArguments1928);
				oclMessageArguments();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArguments", 53);
			LeaveRule("oclMessageArguments", 53);
			LeaveRule_oclMessageArguments();
		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArguments"); }
		return;

	}
	// $ANTLR end "oclMessageArguments"


	partial void EnterRule_oclMessageArg();
	partial void LeaveRule_oclMessageArg();

	// $ANTLR start "oclMessageArg"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:386:1: oclMessageArg : ( '?' ( ':' type )? | oclExpression );
	[GrammarRule("oclMessageArg")]
	private void oclMessageArg()
	{
		EnterRule_oclMessageArg();
		EnterRule("oclMessageArg", 54);
		TraceIn("oclMessageArg", 54);
		try { DebugEnterRule(GrammarFileName, "oclMessageArg");
		DebugLocation(386, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:387:2: ( '?' ( ':' type )? | oclExpression )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==42))
			{
				alt68 = 1;
			}
			else if ((LA68_0==BooleanLiteralExp||(LA68_0>=IntegerLiteralExp && LA68_0<=InvalidLiteralExp)||LA68_0==NullLiteralExp||(LA68_0>=RealLiteralExp && LA68_0<=SimpleName)||(LA68_0>=StringLiteralExp && LA68_0<=UnlimitedNaturalLiteralExp)||LA68_0==24||LA68_0==28||(LA68_0>=44 && LA68_0<=58)||LA68_0==69||(LA68_0>=74 && LA68_0<=76)))
			{
				alt68 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:387:4: '?' ( ':' type )?
				{
				DebugLocation(387, 4);
				Match(input,42,Follow._42_in_oclMessageArg1943); 
				DebugLocation(387, 8);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:387:8: ( ':' type )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==33))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:387:9: ':' type
					{
					DebugLocation(387, 9);
					Match(input,33,Follow._33_in_oclMessageArg1946); 
					DebugLocation(387, 13);
					PushFollow(Follow._type_in_oclMessageArg1948);
					type();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(67); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:388:4: oclExpression
				{
				DebugLocation(388, 4);
				PushFollow(Follow._oclExpression_in_oclMessageArg1955);
				oclExpression();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArg", 54);
			LeaveRule("oclMessageArg", 54);
			LeaveRule_oclMessageArg();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArg"); }
		return;

	}
	// $ANTLR end "oclMessageArg"


	partial void EnterRule_ifExp();
	partial void LeaveRule_ifExp();

	// $ANTLR start "ifExp"
	// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:391:1: ifExp : 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' ;
	[GrammarRule("ifExp")]
	private void ifExp()
	{
		EnterRule_ifExp();
		EnterRule("ifExp", 55);
		TraceIn("ifExp", 55);
		try { DebugEnterRule(GrammarFileName, "ifExp");
		DebugLocation(391, 1);
		try
		{
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:392:2: ( 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' )
			DebugEnterAlt(1);
			// ..\\..\\Model\\OCL\\Grammar\\OCL.g3:392:4: 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif'
			{
			DebugLocation(392, 4);
			Match(input,69,Follow._69_in_ifExp1967); 
			DebugLocation(392, 9);
			PushFollow(Follow._oclExpression_in_ifExp1969);
			oclExpression();
			PopFollow();

			DebugLocation(392, 23);
			Match(input,80,Follow._80_in_ifExp1971); 
			DebugLocation(392, 30);
			PushFollow(Follow._oclExpression_in_ifExp1973);
			oclExpression();
			PopFollow();

			DebugLocation(392, 44);
			Match(input,67,Follow._67_in_ifExp1975); 
			DebugLocation(392, 51);
			PushFollow(Follow._oclExpression_in_ifExp1977);
			oclExpression();
			PopFollow();

			DebugLocation(392, 65);
			Match(input,68,Follow._68_in_ifExp1979); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifExp", 55);
			LeaveRule("ifExp", 55);
			LeaveRule_ifExp();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "ifExp"); }
		return;

	}
	// $ANTLR end "ifExp"
	#endregion Rules


	#region DFA
	private DFA2 dfa2;
	private DFA31 dfa31;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa2 = new DFA2( this );
		dfa31 = new DFA31( this );
	}

	private class DFA2 : DFA
	{
		private const string DFA2_eotS =
			"\xA\xFFFF";
		private const string DFA2_eofS =
			"\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x1\x4";
		private const string DFA2_minS =
			"\x1\x41\x1\x12\x1\x18\x1\x12\x2\xFFFF\x1\x18\x1\x12\x1\xFFFF\x1\x18";
		private const string DFA2_maxS =
			"\x1\x41\x1\x12\x1\x49\x1\x12\x2\xFFFF\x1\x49\x1\x12\x1\xFFFF\x1\x49";
		private const string DFA2_acceptS =
			"\x4\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA2_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA2_transitionS =
			{
				"\x1\x1",
				"\x1\x2",
				"\x1\x5\x8\xFFFF\x1\x4\x1\x3\x1E\xFFFF\x1\x4\x7\xFFFF\x1\x4",
				"\x1\x6",
				"",
				"",
				"\x1\x5\x8\xFFFF\x1\x8\x1\x7\x1E\xFFFF\x1\x4\x7\xFFFF\x1\x4",
				"\x1\x9",
				"",
				"\x1\x5\x8\xFFFF\x1\x8\x1\x7\x1E\xFFFF\x1\x4\x7\xFFFF\x1\x4"
			};

		private static readonly short[] DFA2_eot = DFA.UnpackEncodedString(DFA2_eotS);
		private static readonly short[] DFA2_eof = DFA.UnpackEncodedString(DFA2_eofS);
		private static readonly char[] DFA2_min = DFA.UnpackEncodedStringToUnsignedChars(DFA2_minS);
		private static readonly char[] DFA2_max = DFA.UnpackEncodedStringToUnsignedChars(DFA2_maxS);
		private static readonly short[] DFA2_accept = DFA.UnpackEncodedString(DFA2_acceptS);
		private static readonly short[] DFA2_special = DFA.UnpackEncodedString(DFA2_specialS);
		private static readonly short[][] DFA2_transition;

		static DFA2()
		{
			int numStates = DFA2_transitionS.Length;
			DFA2_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA2_transition[i] = DFA.UnpackEncodedString(DFA2_transitionS[i]);
			}
		}

		public DFA2( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}

		public override string Description { get { return "22:1: public contextDeclaration returns [ClassifierConstraint Decl] : ( propertyContextDecl | classifierContextDecl | operationContextDecl );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA31 : DFA
	{
		private const string DFA31_eotS =
			"\xA\xFFFF";
		private const string DFA31_eofS =
			"\xA\xFFFF";
		private const string DFA31_minS =
			"\x1\x4\x1\xFFFF\x1\x18\x7\xFFFF";
		private const string DFA31_maxS =
			"\x1\x4B\x1\xFFFF\x1\x52\x7\xFFFF";
		private const string DFA31_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x2";
		private const string DFA31_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA31_transitionS =
			{
				"\x1\x3\x4\xFFFF\x2\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x5\x1\xFFFF\x2"+
				"\x3\x2\xFFFF\x1\x6\x13\xFFFF\x1\x1\x1\x4\x1\x1\x5\x4\x1\x1\x1\x4\x2"+
				"\x1\x1\x4\x1\x2\x1\x4\xA\xFFFF\x1\x7\x4\xFFFF\x1\x5\x1\x8",
				"",
				"\x1\x4\x39\xFFFF\x1\x9",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA31_eot = DFA.UnpackEncodedString(DFA31_eotS);
		private static readonly short[] DFA31_eof = DFA.UnpackEncodedString(DFA31_eofS);
		private static readonly char[] DFA31_min = DFA.UnpackEncodedStringToUnsignedChars(DFA31_minS);
		private static readonly char[] DFA31_max = DFA.UnpackEncodedStringToUnsignedChars(DFA31_maxS);
		private static readonly short[] DFA31_accept = DFA.UnpackEncodedString(DFA31_acceptS);
		private static readonly short[] DFA31_special = DFA.UnpackEncodedString(DFA31_specialS);
		private static readonly short[][] DFA31_transition;

		static DFA31()
		{
			int numStates = DFA31_transitionS.Length;
			DFA31_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA31_transition[i] = DFA.UnpackEncodedString(DFA31_transitionS[i]);
			}
		}

		public DFA31( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 31;
			this.eot = DFA31_eot;
			this.eof = DFA31_eof;
			this.min = DFA31_min;
			this.max = DFA31_max;
			this.accept = DFA31_accept;
			this.special = DFA31_special;
			this.transition = DFA31_transition;
		}

		public override string Description { get { return "144:1: primaryExperession returns [OclExpression Value] : ( collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp | enumAndType | propertyCall[true,null,SeparatorType.None] | '(' oclExpression ')' | ifExp | letExp );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _contextDeclaration_in_contextDeclarationList59 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _propertyContextDecl_in_contextDeclaration78 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextDecl_in_contextDeclaration82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextDecl_in_contextDeclaration88 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyContextHead_in_propertyContextDecl98 = new BitSet(new ulong[]{0x2UL,0x104UL});
		public static readonly BitSet _initOrDerValue_in_propertyContextDecl100 = new BitSet(new ulong[]{0x2UL,0x104UL});
		public static readonly BitSet _65_in_propertyContextHead111 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_propertyContextHead113 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_propertyContextHead115 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _pathName_in_propertyContextHead117 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_propertyContextHead119 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_propertyContextHead121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operationContextHead_in_operationContextDecl131 = new BitSet(new ulong[]{0x2UL,0xC001UL});
		public static readonly BitSet _prePostOrBodyDecl_in_operationContextDecl133 = new BitSet(new ulong[]{0x2UL,0xC001UL});
		public static readonly BitSet _65_in_operationContextHead144 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _operation_in_operationContextHead146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classifierContextHead_in_classifierContextDecl170 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _invOrDef_in_classifierContextDecl173 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _65_in_classifierContextHead195 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _pathName_in_classifierContextHead197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_classifierContextHead204 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_classifierContextHead206 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_classifierContextHead207 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _pathName_in_classifierContextHead208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_initOrDerValue220 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_initOrDerValue222 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_initOrDerValue229 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_initOrDerValue231 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_initOrDerValue233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_invOrDef248 = new BitSet(new ulong[]{0x200040000UL});
		public static readonly BitSet _SimpleName_in_invOrDef251 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_invOrDef256 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_invOrDef258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_prePostOrBodyDecl272 = new BitSet(new ulong[]{0x200040000UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl275 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_prePostOrBodyDecl279 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_prePostOrBodyDecl286 = new BitSet(new ulong[]{0x200040000UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl289 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_prePostOrBodyDecl293 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_prePostOrBodyDecl300 = new BitSet(new ulong[]{0x200040000UL});
		public static readonly BitSet _SimpleName_in_prePostOrBodyDecl303 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_prePostOrBodyDecl307 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_prePostOrBodyDecl309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_operation320 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_operation324 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _parameters_in_operation326 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_operation328 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_operation330 = new BitSet(new ulong[]{0x7FFF00000040002UL});
		public static readonly BitSet _type_in_operation332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_parameters343 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_parameters347 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _parameters_in_parameters349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalImpliesExpression_in_oclExpression369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression392 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_logicalImpliesExpression399 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression403 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression424 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_logicalXorExpression431 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression435 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression455 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_logicalOrExpression462 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression466 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression486 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_logicalAndExpression493 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression497 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression519 = new BitSet(new ulong[]{0xC000000002UL});
		public static readonly BitSet _39_in_relationalEqExpression527 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _38_in_relationalEqExpression531 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression536 = new BitSet(new ulong[]{0xC000000002UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion558 = new BitSet(new ulong[]{0x33000000002UL});
		public static readonly BitSet _36_in_relationalNotEqExprassion566 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _40_in_relationalNotEqExprassion571 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _37_in_relationalNotEqExprassion576 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _41_in_relationalNotEqExprassion581 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion586 = new BitSet(new ulong[]{0x33000000002UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression611 = new BitSet(new ulong[]{0x14000002UL});
		public static readonly BitSet _26_in_additiveExpression619 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _28_in_additiveExpression623 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression629 = new BitSet(new ulong[]{0x14000002UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression653 = new BitSet(new ulong[]{0x100200002UL});
		public static readonly BitSet _UnlimitedNaturalLiteralExp_in_multiplicativeExpression661 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _32_in_multiplicativeExpression665 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression670 = new BitSet(new ulong[]{0x100200002UL});
		public static readonly BitSet _28_in_unaryExpression693 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _76_in_unaryExpression697 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _termExpression_in_unaryExpression702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _termExpression_in_unaryExpression709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExperession_in_termExpression737 = new BitSet(new ulong[]{0x6000000060000002UL});
		public static readonly BitSet _30_in_termExpression743 = new BitSet(new ulong[]{0x40000UL,0x400UL});
		public static readonly BitSet _29_in_termExpression747 = new BitSet(new ulong[]{0x40000UL,0x400UL});
		public static readonly BitSet _propertyCall_in_termExpression753 = new BitSet(new ulong[]{0x6000000060000002UL});
		public static readonly BitSet _oclMessageExp_in_termExpression758 = new BitSet(new ulong[]{0x6000000060000002UL});
		public static readonly BitSet _collectionLiteralExpAndType_in_primaryExperession794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleLiteralExp_in_primaryExperession805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveLiteralExp_in_primaryExperession816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumAndType_in_primaryExperession829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyCall_in_primaryExperession840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _24_in_primaryExperession851 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_primaryExperession852 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_primaryExperession853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifExp_in_primaryExperession863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _letExp_in_primaryExperession868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_propertyCall883 = new BitSet(new ulong[]{0x800080001000002UL});
		public static readonly BitSet _59_in_propertyCall886 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _arguments_in_propertyCall887 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_propertyCall888 = new BitSet(new ulong[]{0x80001000002UL});
		public static readonly BitSet _isMarkedPre_in_propertyCall892 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _24_in_propertyCall896 = new BitSet(new ulong[]{0x7FFF00013368610UL,0x1C20UL});
		public static readonly BitSet _propertyCallParametrs_in_propertyCall897 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_propertyCall899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_propertyCall918 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_propertyCall920 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclaration_in_propertyCall922 = new BitSet(new ulong[]{0x800040000UL,0x80000UL});
		public static readonly BitSet _35_in_propertyCall925 = new BitSet(new ulong[]{0x40000UL,0x80000UL});
		public static readonly BitSet _83_in_propertyCall930 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_propertyCall932 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_propertyCall934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarePropertyCallParametrs_in_propertyCallParametrs973 = new BitSet(new ulong[]{0x7FFF00011368612UL,0x1C20UL});
		public static readonly BitSet _arguments_in_propertyCallParametrs977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs1013 = new BitSet(new ulong[]{0x8000000UL,0x80000UL});
		public static readonly BitSet _27_in_declarePropertyCallParametrs1018 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs1022 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_declarePropertyCallParametrs1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_typedef1047 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_typedef1049 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_typedef1050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_enumAndType1081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_enumAndType1095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_enumAndType1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_pathName1130 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _34_in_pathName1133 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_pathName1137 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExpAndType1160 = new BitSet(new ulong[]{0x1000002UL,0x40000UL});
		public static readonly BitSet _24_in_collectionLiteralExpAndType1163 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_collectionLiteralExpAndType1165 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_collectionLiteralExpAndType1168 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_collectionLiteralExpAndType1173 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x101C20UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExpAndType1175 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_collectionLiteralExpAndType1178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_enumLiteralExp1199 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_enumLiteralExp1200 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_enumLiteralExp1202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp1214 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_collectionLiteralExp1217 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x101C20UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1219 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_collectionLiteralExp1222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_collectionLiteralExp1226 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_collectionLiteralExp1228 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x101C20UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp1230 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_collectionLiteralExp1233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_collectionTypeIdentifier1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_collectionTypeIdentifier1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_collectionTypeIdentifier1275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_collectionTypeIdentifier1283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_collectionTypeIdentifier1290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts1308 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_collectionLiteralParts1312 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralParts1316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1342 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_collectionLiteralPart1345 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart1349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IntegerLiteralExp_in_primitiveLiteralExp1374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RealLiteralExp_in_primitiveLiteralExp1384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteralExp_in_primitiveLiteralExp1394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanLiteralExp_in_primitiveLiteralExp1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnlimitedNaturalLiteralExp_in_primitiveLiteralExp1414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NullLiteralExp_in_primitiveLiteralExp1421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _InvalidLiteralExp_in_primitiveLiteralExp1431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_tupleLiteralExp1454 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_tupleLiteralExp1456 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleLiteralExp1458 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_tupleLiteralExp1461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeLiteralExp1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration1492 = new BitSet(new ulong[]{0x8200000002UL});
		public static readonly BitSet _33_in_variableDeclaration1495 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_variableDeclaration1497 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_variableDeclaration1503 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_variableDeclaration1505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_type1527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_type1536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_type1543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_type1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_type1560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_primitiveType1583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_primitiveType1593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_primitiveType1603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_primitiveType1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_primitiveType1623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_oclType1643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_oclType1653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_oclType1662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_oclType1671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionType1693 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_collectionType1695 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_collectionType1697 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_collectionType1700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_tupleType1722 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_tupleType1724 = new BitSet(new ulong[]{0x2040000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleType1726 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_tupleType1730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList1751 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_variableDeclarationList1755 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclarationList_in_variableDeclarationList1758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_isMarkedPre1782 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_isMarkedPre1784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_arguments1812 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_arguments1818 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_arguments1822 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _75_in_letExp1839 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclaration_in_letExp1841 = new BitSet(new ulong[]{0x8000000UL,0x80UL});
		public static readonly BitSet _letExpSub_in_letExp1844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_letExpSub1856 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclaration_in_letExpSub1858 = new BitSet(new ulong[]{0x8000000UL,0x80UL});
		public static readonly BitSet _letExpSub_in_letExpSub1861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_letExpSub1866 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_letExpSub1877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_oclMessageExp1889 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1891 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_oclMessageExp1893 = new BitSet(new ulong[]{0x7FFF40013368610UL,0x1C20UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1895 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_oclMessageExp1898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_oclMessageExp1903 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1905 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_oclMessageExp1907 = new BitSet(new ulong[]{0x7FFF40013368610UL,0x1C20UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1909 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_oclMessageExp1912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclMessageArg_in_oclMessageArguments1922 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_oclMessageArguments1926 = new BitSet(new ulong[]{0x7FFF40011368610UL,0x1C20UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageArguments1928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_oclMessageArg1943 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_oclMessageArg1946 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_oclMessageArg1948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_oclMessageArg1955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_ifExp1967 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_ifExp1969 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_ifExp1971 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_ifExp1973 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _67_in_ifExp1975 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x1C20UL});
		public static readonly BitSet _oclExpression_in_ifExp1977 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_ifExp1979 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace Exolutio.Model.OCL.Compiler
