//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 OCL.g3 2011-08-25 12:24:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

namespace Exolutio.Model.OCL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class OCLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BooleanLiteralExp", "Char", "EscapeSequence", "ExponentPart", "Hex", "IntegerLiteralExp", "InvalidLiteralExp", "LINE_COMMENT", "NESTED_ML_COMMENT", "NameChar", "NameStartChar", "NullLiteralExp", "Num", "RealLiteralExp", "SimpleName", "StringChar", "StringLiteralExp", "UnlimitedNaturalLiteralExp", "WS", "WhiteSpaceChar", "'('", "')'", "'+'", "','", "'-'", "'->'", "'.'", "'..'", "'/'", "':'", "'::'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'?'", "'@'", "'Bag'", "'Boolean'", "'Collection'", "'Integer'", "'OclAny'", "'OclInvalid'", "'OclMessage'", "'OclVoid'", "'OrderedSet'", "'Real'", "'Sequence'", "'Set'", "'String'", "'Tuple'", "'UnlimitedNatural'", "'['", "']'", "'^'", "'^^'", "'and'", "'else'", "'endif'", "'if'", "'implies'", "'in'", "'iterate'", "'let'", "'not'", "'or'", "'pre'", "'self'", "'then'", "'xor'", "'{'", "'|'", "'}'"
	};
	public const int EOF=-1;
	public const int BooleanLiteralExp=4;
	public const int Char=5;
	public const int EscapeSequence=6;
	public const int ExponentPart=7;
	public const int Hex=8;
	public const int IntegerLiteralExp=9;
	public const int InvalidLiteralExp=10;
	public const int LINE_COMMENT=11;
	public const int NESTED_ML_COMMENT=12;
	public const int NameChar=13;
	public const int NameStartChar=14;
	public const int NullLiteralExp=15;
	public const int Num=16;
	public const int RealLiteralExp=17;
	public const int SimpleName=18;
	public const int StringChar=19;
	public const int StringLiteralExp=20;
	public const int UnlimitedNaturalLiteralExp=21;
	public const int WS=22;
	public const int WhiteSpaceChar=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;

	// delegates
	// delegators

	public OCLParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public OCLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
		

	public override string[] TokenNames { get { return OCLParser.tokenNames; } }
	public override string GrammarFileName { get { return "OCL.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules

	partial void EnterRule_oclExpression();
	partial void LeaveRule_oclExpression();

	// $ANTLR start "oclExpression"
	// OCL.g3:7:1: oclExpression : logicalImpliesExpression ;
	[GrammarRule("oclExpression")]
	private void oclExpression()
	{
		EnterRule_oclExpression();
		EnterRule("oclExpression", 1);
		TraceIn("oclExpression", 1);
		try { DebugEnterRule(GrammarFileName, "oclExpression");
		DebugLocation(7, 1);
		try
		{
			// OCL.g3:8:2: ( logicalImpliesExpression )
			DebugEnterAlt(1);
			// OCL.g3:8:3: logicalImpliesExpression
			{
			DebugLocation(8, 3);
			PushFollow(Follow._logicalImpliesExpression_in_oclExpression26);
			logicalImpliesExpression();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclExpression", 1);
			LeaveRule("oclExpression", 1);
			LeaveRule_oclExpression();
		}
		DebugLocation(10, 1);
		} finally { DebugExitRule(GrammarFileName, "oclExpression"); }
		return;

	}
	// $ANTLR end "oclExpression"


	partial void EnterRule_logicalImpliesExpression();
	partial void LeaveRule_logicalImpliesExpression();

	// $ANTLR start "logicalImpliesExpression"
	// OCL.g3:12:1: logicalImpliesExpression : logicalXorExpression ( 'implies' logicalXorExpression )* ;
	[GrammarRule("logicalImpliesExpression")]
	private void logicalImpliesExpression()
	{
		EnterRule_logicalImpliesExpression();
		EnterRule("logicalImpliesExpression", 2);
		TraceIn("logicalImpliesExpression", 2);
		try { DebugEnterRule(GrammarFileName, "logicalImpliesExpression");
		DebugLocation(12, 1);
		try
		{
			// OCL.g3:13:2: ( logicalXorExpression ( 'implies' logicalXorExpression )* )
			DebugEnterAlt(1);
			// OCL.g3:13:4: logicalXorExpression ( 'implies' logicalXorExpression )*
			{
			DebugLocation(13, 4);
			PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression40);
			logicalXorExpression();
			PopFollow();

			DebugLocation(13, 25);
			// OCL.g3:13:25: ( 'implies' logicalXorExpression )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==67))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:13:26: 'implies' logicalXorExpression
					{
					DebugLocation(13, 26);
					Match(input,67,Follow._67_in_logicalImpliesExpression43); 
					DebugLocation(13, 36);
					PushFollow(Follow._logicalXorExpression_in_logicalImpliesExpression45);
					logicalXorExpression();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalImpliesExpression", 2);
			LeaveRule("logicalImpliesExpression", 2);
			LeaveRule_logicalImpliesExpression();
		}
		DebugLocation(14, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalImpliesExpression"); }
		return;

	}
	// $ANTLR end "logicalImpliesExpression"


	partial void EnterRule_logicalXorExpression();
	partial void LeaveRule_logicalXorExpression();

	// $ANTLR start "logicalXorExpression"
	// OCL.g3:15:1: logicalXorExpression : logicalOrExpression ( 'xor' logicalOrExpression )* ;
	[GrammarRule("logicalXorExpression")]
	private void logicalXorExpression()
	{
		EnterRule_logicalXorExpression();
		EnterRule("logicalXorExpression", 3);
		TraceIn("logicalXorExpression", 3);
		try { DebugEnterRule(GrammarFileName, "logicalXorExpression");
		DebugLocation(15, 1);
		try
		{
			// OCL.g3:16:2: ( logicalOrExpression ( 'xor' logicalOrExpression )* )
			DebugEnterAlt(1);
			// OCL.g3:16:4: logicalOrExpression ( 'xor' logicalOrExpression )*
			{
			DebugLocation(16, 4);
			PushFollow(Follow._logicalOrExpression_in_logicalXorExpression57);
			logicalOrExpression();
			PopFollow();

			DebugLocation(16, 24);
			// OCL.g3:16:24: ( 'xor' logicalOrExpression )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==76))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:16:25: 'xor' logicalOrExpression
					{
					DebugLocation(16, 25);
					Match(input,76,Follow._76_in_logicalXorExpression60); 
					DebugLocation(16, 31);
					PushFollow(Follow._logicalOrExpression_in_logicalXorExpression62);
					logicalOrExpression();
					PopFollow();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalXorExpression", 3);
			LeaveRule("logicalXorExpression", 3);
			LeaveRule_logicalXorExpression();
		}
		DebugLocation(17, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalXorExpression"); }
		return;

	}
	// $ANTLR end "logicalXorExpression"


	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();

	// $ANTLR start "logicalOrExpression"
	// OCL.g3:18:1: logicalOrExpression : logicalAndExpression ( 'or' logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private void logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 4);
		TraceIn("logicalOrExpression", 4);
		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(18, 1);
		try
		{
			// OCL.g3:19:2: ( logicalAndExpression ( 'or' logicalAndExpression )* )
			DebugEnterAlt(1);
			// OCL.g3:19:4: logicalAndExpression ( 'or' logicalAndExpression )*
			{
			DebugLocation(19, 4);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression74);
			logicalAndExpression();
			PopFollow();

			DebugLocation(19, 25);
			// OCL.g3:19:25: ( 'or' logicalAndExpression )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==72))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:19:26: 'or' logicalAndExpression
					{
					DebugLocation(19, 26);
					Match(input,72,Follow._72_in_logicalOrExpression77); 
					DebugLocation(19, 31);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression79);
					logicalAndExpression();
					PopFollow();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalOrExpression", 4);
			LeaveRule("logicalOrExpression", 4);
			LeaveRule_logicalOrExpression();
		}
		DebugLocation(20, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return;

	}
	// $ANTLR end "logicalOrExpression"


	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();

	// $ANTLR start "logicalAndExpression"
	// OCL.g3:21:1: logicalAndExpression : relationalEqExpression ( 'and' relationalEqExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private void logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 5);
		TraceIn("logicalAndExpression", 5);
		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(21, 1);
		try
		{
			// OCL.g3:22:2: ( relationalEqExpression ( 'and' relationalEqExpression )* )
			DebugEnterAlt(1);
			// OCL.g3:22:4: relationalEqExpression ( 'and' relationalEqExpression )*
			{
			DebugLocation(22, 4);
			PushFollow(Follow._relationalEqExpression_in_logicalAndExpression91);
			relationalEqExpression();
			PopFollow();

			DebugLocation(22, 27);
			// OCL.g3:22:27: ( 'and' relationalEqExpression )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==63))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:22:28: 'and' relationalEqExpression
					{
					DebugLocation(22, 28);
					Match(input,63,Follow._63_in_logicalAndExpression94); 
					DebugLocation(22, 34);
					PushFollow(Follow._relationalEqExpression_in_logicalAndExpression96);
					relationalEqExpression();
					PopFollow();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalAndExpression", 5);
			LeaveRule("logicalAndExpression", 5);
			LeaveRule_logicalAndExpression();
		}
		DebugLocation(23, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return;

	}
	// $ANTLR end "logicalAndExpression"


	partial void EnterRule_relationalEqExpression();
	partial void LeaveRule_relationalEqExpression();

	// $ANTLR start "relationalEqExpression"
	// OCL.g3:25:1: relationalEqExpression : relationalNotEqExprassion ( ( '=' | '<>' ) relationalNotEqExprassion )* ;
	[GrammarRule("relationalEqExpression")]
	private void relationalEqExpression()
	{
		EnterRule_relationalEqExpression();
		EnterRule("relationalEqExpression", 6);
		TraceIn("relationalEqExpression", 6);
		try { DebugEnterRule(GrammarFileName, "relationalEqExpression");
		DebugLocation(25, 1);
		try
		{
			// OCL.g3:26:2: ( relationalNotEqExprassion ( ( '=' | '<>' ) relationalNotEqExprassion )* )
			DebugEnterAlt(1);
			// OCL.g3:26:5: relationalNotEqExprassion ( ( '=' | '<>' ) relationalNotEqExprassion )*
			{
			DebugLocation(26, 5);
			PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression110);
			relationalNotEqExprassion();
			PopFollow();

			DebugLocation(26, 31);
			// OCL.g3:26:31: ( ( '=' | '<>' ) relationalNotEqExprassion )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>=38 && LA5_0<=39)))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:26:32: ( '=' | '<>' ) relationalNotEqExprassion
					{
					DebugLocation(26, 32);
					if ((input.LA(1)>=38 && input.LA(1)<=39))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(26, 43);
					PushFollow(Follow._relationalNotEqExprassion_in_relationalEqExpression119);
					relationalNotEqExprassion();
					PopFollow();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalEqExpression", 6);
			LeaveRule("relationalEqExpression", 6);
			LeaveRule_relationalEqExpression();
		}
		DebugLocation(27, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalEqExpression"); }
		return;

	}
	// $ANTLR end "relationalEqExpression"


	partial void EnterRule_relationalNotEqExprassion();
	partial void LeaveRule_relationalNotEqExprassion();

	// $ANTLR start "relationalNotEqExprassion"
	// OCL.g3:28:1: relationalNotEqExprassion : additiveExpression ( ( '<' | '>' | '<=' | '>=' ) additiveExpression )* ;
	[GrammarRule("relationalNotEqExprassion")]
	private void relationalNotEqExprassion()
	{
		EnterRule_relationalNotEqExprassion();
		EnterRule("relationalNotEqExprassion", 7);
		TraceIn("relationalNotEqExprassion", 7);
		try { DebugEnterRule(GrammarFileName, "relationalNotEqExprassion");
		DebugLocation(28, 1);
		try
		{
			// OCL.g3:29:2: ( additiveExpression ( ( '<' | '>' | '<=' | '>=' ) additiveExpression )* )
			DebugEnterAlt(1);
			// OCL.g3:29:3: additiveExpression ( ( '<' | '>' | '<=' | '>=' ) additiveExpression )*
			{
			DebugLocation(29, 3);
			PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion133);
			additiveExpression();
			PopFollow();

			DebugLocation(29, 22);
			// OCL.g3:29:22: ( ( '<' | '>' | '<=' | '>=' ) additiveExpression )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=36 && LA6_0<=37)||(LA6_0>=40 && LA6_0<=41)))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:29:23: ( '<' | '>' | '<=' | '>=' ) additiveExpression
					{
					DebugLocation(29, 23);
					if ((input.LA(1)>=36 && input.LA(1)<=37)||(input.LA(1)>=40 && input.LA(1)<=41))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(29, 46);
					PushFollow(Follow._additiveExpression_in_relationalNotEqExprassion149);
					additiveExpression();
					PopFollow();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalNotEqExprassion", 7);
			LeaveRule("relationalNotEqExprassion", 7);
			LeaveRule_relationalNotEqExprassion();
		}
		DebugLocation(31, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalNotEqExprassion"); }
		return;

	}
	// $ANTLR end "relationalNotEqExprassion"


	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// OCL.g3:34:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private void additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 8);
		TraceIn("additiveExpression", 8);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(34, 1);
		try
		{
			// OCL.g3:35:2: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// OCL.g3:35:4: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
			{
			DebugLocation(35, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression166);
			multiplicativeExpression();
			PopFollow();

			DebugLocation(35, 29);
			// OCL.g3:35:29: ( ( '+' | '-' ) multiplicativeExpression )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==26||LA7_0==28))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:35:30: ( '+' | '-' ) multiplicativeExpression
					{
					DebugLocation(35, 30);
					if (input.LA(1)==26||input.LA(1)==28)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(35, 41);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression176);
					multiplicativeExpression();
					PopFollow();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 8);
			LeaveRule("additiveExpression", 8);
			LeaveRule_additiveExpression();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return;

	}
	// $ANTLR end "additiveExpression"


	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// OCL.g3:38:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' ) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private void multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 9);
		TraceIn("multiplicativeExpression", 9);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(38, 1);
		try
		{
			// OCL.g3:39:2: ( unaryExpression ( ( '*' | '/' ) unaryExpression )* )
			DebugEnterAlt(1);
			// OCL.g3:39:5: unaryExpression ( ( '*' | '/' ) unaryExpression )*
			{
			DebugLocation(39, 5);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression192);
			unaryExpression();
			PopFollow();

			DebugLocation(39, 21);
			// OCL.g3:39:21: ( ( '*' | '/' ) unaryExpression )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==UnlimitedNaturalLiteralExp||LA8_0==32))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:39:22: ( '*' | '/' ) unaryExpression
					{
					DebugLocation(39, 22);
					if (input.LA(1)==UnlimitedNaturalLiteralExp||input.LA(1)==32)
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(39, 32);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression201);
					unaryExpression();
					PopFollow();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 9);
			LeaveRule("multiplicativeExpression", 9);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(40, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return;

	}
	// $ANTLR end "multiplicativeExpression"


	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// OCL.g3:42:1: unaryExpression : ( ( '-' | 'not' ) termExpression | termExpression );
	[GrammarRule("unaryExpression")]
	private void unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 10);
		TraceIn("unaryExpression", 10);
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(42, 1);
		try
		{
			// OCL.g3:43:2: ( ( '-' | 'not' ) termExpression | termExpression )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==28||LA9_0==71))
			{
				alt9 = 1;
			}
			else if ((LA9_0==BooleanLiteralExp||(LA9_0>=IntegerLiteralExp && LA9_0<=InvalidLiteralExp)||LA9_0==NullLiteralExp||(LA9_0>=RealLiteralExp && LA9_0<=SimpleName)||(LA9_0>=StringLiteralExp && LA9_0<=UnlimitedNaturalLiteralExp)||LA9_0==24||(LA9_0>=44 && LA9_0<=58)||LA9_0==66||(LA9_0>=69 && LA9_0<=70)||LA9_0==74))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:43:4: ( '-' | 'not' ) termExpression
				{
				DebugLocation(43, 4);
				if (input.LA(1)==28||input.LA(1)==71)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(43, 16);
				PushFollow(Follow._termExpression_in_unaryExpression221);
				termExpression();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:44:4: termExpression
				{
				DebugLocation(44, 4);
				PushFollow(Follow._termExpression_in_unaryExpression226);
				termExpression();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 10);
			LeaveRule("unaryExpression", 10);
			LeaveRule_unaryExpression();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return;

	}
	// $ANTLR end "unaryExpression"


	partial void EnterRule_termExpression();
	partial void LeaveRule_termExpression();

	// $ANTLR start "termExpression"
	// OCL.g3:47:1: termExpression : primaryExperession ( ( ( '.' | '->' ) propertyCall ) | oclMessageExp )* ;
	[GrammarRule("termExpression")]
	private void termExpression()
	{
		EnterRule_termExpression();
		EnterRule("termExpression", 11);
		TraceIn("termExpression", 11);
		try { DebugEnterRule(GrammarFileName, "termExpression");
		DebugLocation(47, 1);
		try
		{
			// OCL.g3:48:2: ( primaryExperession ( ( ( '.' | '->' ) propertyCall ) | oclMessageExp )* )
			DebugEnterAlt(1);
			// OCL.g3:48:4: primaryExperession ( ( ( '.' | '->' ) propertyCall ) | oclMessageExp )*
			{
			DebugLocation(48, 4);
			PushFollow(Follow._primaryExperession_in_termExpression238);
			primaryExperession();
			PopFollow();

			DebugLocation(48, 23);
			// OCL.g3:48:23: ( ( ( '.' | '->' ) propertyCall ) | oclMessageExp )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=3;
				try { DebugEnterDecision(10, false);
				switch (input.LA(1))
				{
				case 29:
				case 30:
					{
					alt10 = 1;
					}
					break;
				case 62:
					{
					alt10 = 2;
					}
					break;
				case 61:
					{
					alt10 = 2;
					}
					break;

				}

				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:48:25: ( ( '.' | '->' ) propertyCall )
					{
					DebugLocation(48, 25);
					// OCL.g3:48:25: ( ( '.' | '->' ) propertyCall )
					DebugEnterAlt(1);
					// OCL.g3:48:26: ( '.' | '->' ) propertyCall
					{
					DebugLocation(48, 26);
					if ((input.LA(1)>=29 && input.LA(1)<=30))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(48, 36);
					PushFollow(Follow._propertyCall_in_termExpression248);
					propertyCall();
					PopFollow();


					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// OCL.g3:48:51: oclMessageExp
					{
					DebugLocation(48, 51);
					PushFollow(Follow._oclMessageExp_in_termExpression252);
					oclMessageExp();
					PopFollow();


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("termExpression", 11);
			LeaveRule("termExpression", 11);
			LeaveRule_termExpression();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "termExpression"); }
		return;

	}
	// $ANTLR end "termExpression"


	partial void EnterRule_primaryExperession();
	partial void LeaveRule_primaryExperession();

	// $ANTLR start "primaryExperession"
	// OCL.g3:52:1: primaryExperession : ( 'self' | collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp | enumAndType | propertyCall | '(' oclExpression ')' | ifExp | letExp );
	[GrammarRule("primaryExperession")]
	private void primaryExperession()
	{
		EnterRule_primaryExperession();
		EnterRule("primaryExperession", 12);
		TraceIn("primaryExperession", 12);
		try { DebugEnterRule(GrammarFileName, "primaryExperession");
		DebugLocation(52, 1);
		try
		{
			// OCL.g3:53:2: ( 'self' | collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp | enumAndType | propertyCall | '(' oclExpression ')' | ifExp | letExp )
			int alt11=9;
			try { DebugEnterDecision(11, false);
			try
			{
				alt11 = dfa11.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:54:4: 'self'
				{
				DebugLocation(54, 4);
				Match(input,74,Follow._74_in_primaryExperession276); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:56:4: collectionLiteralExpAndType
				{
				DebugLocation(56, 4);
				PushFollow(Follow._collectionLiteralExpAndType_in_primaryExperession285);
				collectionLiteralExpAndType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// OCL.g3:57:4: tupleLiteralExp
				{
				DebugLocation(57, 4);
				PushFollow(Follow._tupleLiteralExp_in_primaryExperession291);
				tupleLiteralExp();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// OCL.g3:58:4: primitiveLiteralExp
				{
				DebugLocation(58, 4);
				PushFollow(Follow._primitiveLiteralExp_in_primaryExperession297);
				primitiveLiteralExp();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// OCL.g3:60:4: enumAndType
				{
				DebugLocation(60, 4);
				PushFollow(Follow._enumAndType_in_primaryExperession305);
				enumAndType();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// OCL.g3:61:4: propertyCall
				{
				DebugLocation(61, 4);
				PushFollow(Follow._propertyCall_in_primaryExperession311);
				propertyCall();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// OCL.g3:63:4: '(' oclExpression ')'
				{
				DebugLocation(63, 4);
				Match(input,24,Follow._24_in_primaryExperession318); 
				DebugLocation(63, 7);
				PushFollow(Follow._oclExpression_in_primaryExperession319);
				oclExpression();
				PopFollow();

				DebugLocation(63, 20);
				Match(input,25,Follow._25_in_primaryExperession320); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// OCL.g3:64:4: ifExp
				{
				DebugLocation(64, 4);
				PushFollow(Follow._ifExp_in_primaryExperession325);
				ifExp();
				PopFollow();


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// OCL.g3:65:4: letExp
				{
				DebugLocation(65, 4);
				PushFollow(Follow._letExp_in_primaryExperession330);
				letExp();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExperession", 12);
			LeaveRule("primaryExperession", 12);
			LeaveRule_primaryExperession();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExperession"); }
		return;

	}
	// $ANTLR end "primaryExperession"


	partial void EnterRule_propertyCall();
	partial void LeaveRule_propertyCall();

	// $ANTLR start "propertyCall"
	// OCL.g3:67:1: propertyCall : ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )? | 'iterate' '(' ( variableDeclaration ( ';' )? )+ '|' oclExpression ')' );
	[GrammarRule("propertyCall")]
	private void propertyCall()
	{
		EnterRule_propertyCall();
		EnterRule("propertyCall", 13);
		TraceIn("propertyCall", 13);
		try { DebugEnterRule(GrammarFileName, "propertyCall");
		DebugLocation(67, 1);
		try
		{
			// OCL.g3:68:2: ( pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )? | 'iterate' '(' ( variableDeclaration ( ';' )? )+ '|' oclExpression ')' )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==SimpleName))
			{
				alt17 = 1;
			}
			else if ((LA17_0==69))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:68:4: pathName ( '[' arguments ']' )? ( isMarkedPre )? ( '(' propertyCallParametrs ')' )?
				{
				DebugLocation(68, 4);
				PushFollow(Follow._pathName_in_propertyCall340);
				pathName();
				PopFollow();

				DebugLocation(68, 13);
				// OCL.g3:68:13: ( '[' arguments ']' )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==59))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:68:14: '[' arguments ']'
					{
					DebugLocation(68, 14);
					Match(input,59,Follow._59_in_propertyCall343); 
					DebugLocation(68, 17);
					PushFollow(Follow._arguments_in_propertyCall344);
					arguments();
					PopFollow();

					DebugLocation(68, 26);
					Match(input,60,Follow._60_in_propertyCall345); 

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(68, 32);
				// OCL.g3:68:32: ( isMarkedPre )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==43))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:68:32: isMarkedPre
					{
					DebugLocation(68, 32);
					PushFollow(Follow._isMarkedPre_in_propertyCall349);
					isMarkedPre();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(68, 45);
				// OCL.g3:68:45: ( '(' propertyCallParametrs ')' )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==24))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:68:46: '(' propertyCallParametrs ')'
					{
					DebugLocation(68, 46);
					Match(input,24,Follow._24_in_propertyCall353); 
					DebugLocation(68, 49);
					PushFollow(Follow._propertyCallParametrs_in_propertyCall354);
					propertyCallParametrs();
					PopFollow();

					DebugLocation(68, 70);
					Match(input,25,Follow._25_in_propertyCall355); 

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:71:3: 'iterate' '(' ( variableDeclaration ( ';' )? )+ '|' oclExpression ')'
				{
				DebugLocation(71, 3);
				Match(input,69,Follow._69_in_propertyCall369); 
				DebugLocation(71, 13);
				Match(input,24,Follow._24_in_propertyCall371); 
				DebugLocation(71, 16);
				// OCL.g3:71:16: ( variableDeclaration ( ';' )? )+
				int cnt16=0;
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==SimpleName))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// OCL.g3:71:17: variableDeclaration ( ';' )?
						{
						DebugLocation(71, 17);
						PushFollow(Follow._variableDeclaration_in_propertyCall373);
						variableDeclaration();
						PopFollow();

						DebugLocation(71, 37);
						// OCL.g3:71:37: ( ';' )?
						int alt15=2;
						try { DebugEnterSubRule(15);
						try { DebugEnterDecision(15, false);
						int LA15_0 = input.LA(1);

						if ((LA15_0==35))
						{
							alt15 = 1;
						}
						} finally { DebugExitDecision(15); }
						switch (alt15)
						{
						case 1:
							DebugEnterAlt(1);
							// OCL.g3:71:37: ';'
							{
							DebugLocation(71, 37);
							Match(input,35,Follow._35_in_propertyCall375); 

							}
							break;

						}
						} finally { DebugExitSubRule(15); }


						}
						break;

					default:
						if (cnt16 >= 1)
							goto loop16;

						EarlyExitException eee16 = new EarlyExitException( 16, input );
						DebugRecognitionException(eee16);
						throw eee16;
					}
					cnt16++;
				}
				loop16:
					;

				} finally { DebugExitSubRule(16); }

				DebugLocation(71, 44);
				Match(input,78,Follow._78_in_propertyCall380); 
				DebugLocation(71, 48);
				PushFollow(Follow._oclExpression_in_propertyCall382);
				oclExpression();
				PopFollow();

				DebugLocation(71, 62);
				Match(input,25,Follow._25_in_propertyCall384); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyCall", 13);
			LeaveRule("propertyCall", 13);
			LeaveRule_propertyCall();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCall"); }
		return;

	}
	// $ANTLR end "propertyCall"


	partial void EnterRule_propertyCallParametrs();
	partial void LeaveRule_propertyCallParametrs();

	// $ANTLR start "propertyCallParametrs"
	// OCL.g3:78:1: propertyCallParametrs : ( declarePropertyCallParametrs )? ( arguments )? ;
	[GrammarRule("propertyCallParametrs")]
	private void propertyCallParametrs()
	{
		EnterRule_propertyCallParametrs();
		EnterRule("propertyCallParametrs", 14);
		TraceIn("propertyCallParametrs", 14);
		try { DebugEnterRule(GrammarFileName, "propertyCallParametrs");
		DebugLocation(78, 1);
		try
		{
			// OCL.g3:79:2: ( ( declarePropertyCallParametrs )? ( arguments )? )
			DebugEnterAlt(1);
			// OCL.g3:79:4: ( declarePropertyCallParametrs )? ( arguments )?
			{
			DebugLocation(79, 4);
			// OCL.g3:79:4: ( declarePropertyCallParametrs )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==SimpleName))
			{
				int LA18_1 = input.LA(2);

				if ((LA18_1==33||LA18_1==78))
				{
					alt18 = 1;
				}
				else if ((LA18_1==27))
				{
					int LA18_4 = input.LA(3);

					if ((LA18_4==SimpleName))
					{
						int LA18_5 = input.LA(4);

						if ((LA18_5==33||LA18_5==78))
						{
							alt18 = 1;
						}
					}
				}
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:79:4: declarePropertyCallParametrs
				{
				DebugLocation(79, 4);
				PushFollow(Follow._declarePropertyCallParametrs_in_propertyCallParametrs406);
				declarePropertyCallParametrs();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(79, 34);
			// OCL.g3:79:34: ( arguments )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==BooleanLiteralExp||(LA19_0>=IntegerLiteralExp && LA19_0<=InvalidLiteralExp)||LA19_0==NullLiteralExp||(LA19_0>=RealLiteralExp && LA19_0<=SimpleName)||(LA19_0>=StringLiteralExp && LA19_0<=UnlimitedNaturalLiteralExp)||LA19_0==24||LA19_0==28||(LA19_0>=44 && LA19_0<=58)||LA19_0==66||(LA19_0>=69 && LA19_0<=71)||LA19_0==74))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:79:34: arguments
				{
				DebugLocation(79, 34);
				PushFollow(Follow._arguments_in_propertyCallParametrs409);
				arguments();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyCallParametrs", 14);
			LeaveRule("propertyCallParametrs", 14);
			LeaveRule_propertyCallParametrs();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyCallParametrs"); }
		return;

	}
	// $ANTLR end "propertyCallParametrs"


	partial void EnterRule_declarePropertyCallParametrs();
	partial void LeaveRule_declarePropertyCallParametrs();

	// $ANTLR start "declarePropertyCallParametrs"
	// OCL.g3:82:1: declarePropertyCallParametrs : ( typedef ( ',' typedef )? '|' ) ;
	[GrammarRule("declarePropertyCallParametrs")]
	private void declarePropertyCallParametrs()
	{
		EnterRule_declarePropertyCallParametrs();
		EnterRule("declarePropertyCallParametrs", 15);
		TraceIn("declarePropertyCallParametrs", 15);
		try { DebugEnterRule(GrammarFileName, "declarePropertyCallParametrs");
		DebugLocation(82, 1);
		try
		{
			// OCL.g3:83:2: ( ( typedef ( ',' typedef )? '|' ) )
			DebugEnterAlt(1);
			// OCL.g3:83:4: ( typedef ( ',' typedef )? '|' )
			{
			DebugLocation(83, 4);
			// OCL.g3:83:4: ( typedef ( ',' typedef )? '|' )
			DebugEnterAlt(1);
			// OCL.g3:83:6: typedef ( ',' typedef )? '|'
			{
			DebugLocation(83, 6);
			PushFollow(Follow._typedef_in_declarePropertyCallParametrs425);
			typedef();
			PopFollow();

			DebugLocation(83, 14);
			// OCL.g3:83:14: ( ',' typedef )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==27))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:83:15: ',' typedef
				{
				DebugLocation(83, 15);
				Match(input,27,Follow._27_in_declarePropertyCallParametrs428); 
				DebugLocation(83, 19);
				PushFollow(Follow._typedef_in_declarePropertyCallParametrs430);
				typedef();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(83, 29);
			Match(input,78,Follow._78_in_declarePropertyCallParametrs434); 

			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("declarePropertyCallParametrs", 15);
			LeaveRule("declarePropertyCallParametrs", 15);
			LeaveRule_declarePropertyCallParametrs();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "declarePropertyCallParametrs"); }
		return;

	}
	// $ANTLR end "declarePropertyCallParametrs"


	partial void EnterRule_typedef();
	partial void LeaveRule_typedef();

	// $ANTLR start "typedef"
	// OCL.g3:85:1: typedef : SimpleName ( ':' type )? ;
	[GrammarRule("typedef")]
	private void typedef()
	{
		EnterRule_typedef();
		EnterRule("typedef", 16);
		TraceIn("typedef", 16);
		try { DebugEnterRule(GrammarFileName, "typedef");
		DebugLocation(85, 1);
		try
		{
			// OCL.g3:85:9: ( SimpleName ( ':' type )? )
			DebugEnterAlt(1);
			// OCL.g3:85:11: SimpleName ( ':' type )?
			{
			DebugLocation(85, 11);
			Match(input,SimpleName,Follow._SimpleName_in_typedef445); 
			DebugLocation(85, 21);
			// OCL.g3:85:21: ( ':' type )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==33))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:85:22: ':' type
				{
				DebugLocation(85, 22);
				Match(input,33,Follow._33_in_typedef447); 
				DebugLocation(85, 25);
				PushFollow(Follow._type_in_typedef448);
				type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typedef", 16);
			LeaveRule("typedef", 16);
			LeaveRule_typedef();
		}
		DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "typedef"); }
		return;

	}
	// $ANTLR end "typedef"


	partial void EnterRule_enumAndType();
	partial void LeaveRule_enumAndType();

	// $ANTLR start "enumAndType"
	// OCL.g3:88:1: enumAndType : ( tupleType | primitiveType | oclType );
	[GrammarRule("enumAndType")]
	private void enumAndType()
	{
		EnterRule_enumAndType();
		EnterRule("enumAndType", 17);
		TraceIn("enumAndType", 17);
		try { DebugEnterRule(GrammarFileName, "enumAndType");
		DebugLocation(88, 1);
		try
		{
			// OCL.g3:92:2: ( tupleType | primitiveType | oclType )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case 57:
				{
				alt22 = 1;
				}
				break;
			case 45:
			case 47:
			case 53:
			case 56:
			case 58:
				{
				alt22 = 2;
				}
				break;
			case 48:
			case 49:
			case 50:
			case 51:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:92:4: tupleType
				{
				DebugLocation(92, 4);
				PushFollow(Follow._tupleType_in_enumAndType471);
				tupleType();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:93:4: primitiveType
				{
				DebugLocation(93, 4);
				PushFollow(Follow._primitiveType_in_enumAndType476);
				primitiveType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// OCL.g3:94:4: oclType
				{
				DebugLocation(94, 4);
				PushFollow(Follow._oclType_in_enumAndType481);
				oclType();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumAndType", 17);
			LeaveRule("enumAndType", 17);
			LeaveRule_enumAndType();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "enumAndType"); }
		return;

	}
	// $ANTLR end "enumAndType"


	partial void EnterRule_pathName();
	partial void LeaveRule_pathName();

	// $ANTLR start "pathName"
	// OCL.g3:99:1: pathName : SimpleName ( '::' SimpleName )* ;
	[GrammarRule("pathName")]
	private void pathName()
	{
		EnterRule_pathName();
		EnterRule("pathName", 18);
		TraceIn("pathName", 18);
		try { DebugEnterRule(GrammarFileName, "pathName");
		DebugLocation(99, 1);
		try
		{
			// OCL.g3:100:2: ( SimpleName ( '::' SimpleName )* )
			DebugEnterAlt(1);
			// OCL.g3:100:4: SimpleName ( '::' SimpleName )*
			{
			DebugLocation(100, 4);
			Match(input,SimpleName,Follow._SimpleName_in_pathName495); 
			DebugLocation(100, 15);
			// OCL.g3:100:15: ( '::' SimpleName )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==34))
				{
					int LA23_2 = input.LA(2);

					if ((LA23_2==SimpleName))
					{
						int LA23_3 = input.LA(3);

						if ((LA23_3==EOF))
						{
							alt23 = 1;
						}
						else if ((LA23_3==SimpleName||LA23_3==UnlimitedNaturalLiteralExp||(LA23_3>=24 && LA23_3<=32)||(LA23_3>=34 && LA23_3<=41)||LA23_3==43||(LA23_3>=59 && LA23_3<=65)||(LA23_3>=67 && LA23_3<=68)||LA23_3==72||(LA23_3>=75 && LA23_3<=76)||(LA23_3>=78 && LA23_3<=79)))
						{
							alt23 = 1;
						}


					}


				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:100:16: '::' SimpleName
					{
					DebugLocation(100, 16);
					Match(input,34,Follow._34_in_pathName498); 
					DebugLocation(100, 21);
					Match(input,SimpleName,Follow._SimpleName_in_pathName500); 

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pathName", 18);
			LeaveRule("pathName", 18);
			LeaveRule_pathName();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "pathName"); }
		return;

	}
	// $ANTLR end "pathName"


	partial void EnterRule_collectionLiteralExpAndType();
	partial void LeaveRule_collectionLiteralExpAndType();

	// $ANTLR start "collectionLiteralExpAndType"
	// OCL.g3:104:1: collectionLiteralExpAndType : collectionTypeIdentifier ( '(' type ')' )? ( '{' ( collectionLiteralParts )? '}' )? ;
	[GrammarRule("collectionLiteralExpAndType")]
	private void collectionLiteralExpAndType()
	{
		EnterRule_collectionLiteralExpAndType();
		EnterRule("collectionLiteralExpAndType", 19);
		TraceIn("collectionLiteralExpAndType", 19);
		try { DebugEnterRule(GrammarFileName, "collectionLiteralExpAndType");
		DebugLocation(104, 1);
		try
		{
			// OCL.g3:105:2: ( collectionTypeIdentifier ( '(' type ')' )? ( '{' ( collectionLiteralParts )? '}' )? )
			DebugEnterAlt(1);
			// OCL.g3:105:3: collectionTypeIdentifier ( '(' type ')' )? ( '{' ( collectionLiteralParts )? '}' )?
			{
			DebugLocation(105, 3);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExpAndType515);
			collectionTypeIdentifier();
			PopFollow();

			DebugLocation(105, 28);
			// OCL.g3:105:28: ( '(' type ')' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==24))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:105:29: '(' type ')'
				{
				DebugLocation(105, 29);
				Match(input,24,Follow._24_in_collectionLiteralExpAndType518); 
				DebugLocation(105, 33);
				PushFollow(Follow._type_in_collectionLiteralExpAndType520);
				type();
				PopFollow();

				DebugLocation(105, 39);
				Match(input,25,Follow._25_in_collectionLiteralExpAndType523); 

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(105, 45);
			// OCL.g3:105:45: ( '{' ( collectionLiteralParts )? '}' )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==77))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:105:46: '{' ( collectionLiteralParts )? '}'
				{
				DebugLocation(105, 46);
				Match(input,77,Follow._77_in_collectionLiteralExpAndType528); 
				DebugLocation(105, 50);
				// OCL.g3:105:50: ( collectionLiteralParts )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==BooleanLiteralExp||(LA25_0>=IntegerLiteralExp && LA25_0<=InvalidLiteralExp)||LA25_0==NullLiteralExp||(LA25_0>=RealLiteralExp && LA25_0<=SimpleName)||(LA25_0>=StringLiteralExp && LA25_0<=UnlimitedNaturalLiteralExp)||LA25_0==24||LA25_0==28||(LA25_0>=44 && LA25_0<=58)||LA25_0==66||(LA25_0>=69 && LA25_0<=71)||LA25_0==74))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:105:50: collectionLiteralParts
					{
					DebugLocation(105, 50);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExpAndType530);
					collectionLiteralParts();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(105, 74);
				Match(input,79,Follow._79_in_collectionLiteralExpAndType533); 

				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralExpAndType", 19);
			LeaveRule("collectionLiteralExpAndType", 19);
			LeaveRule_collectionLiteralExpAndType();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExpAndType"); }
		return;

	}
	// $ANTLR end "collectionLiteralExpAndType"


	partial void EnterRule_enumLiteralExp();
	partial void LeaveRule_enumLiteralExp();

	// $ANTLR start "enumLiteralExp"
	// OCL.g3:108:1: enumLiteralExp : pathName '::' SimpleName ;
	[GrammarRule("enumLiteralExp")]
	private void enumLiteralExp()
	{
		EnterRule_enumLiteralExp();
		EnterRule("enumLiteralExp", 20);
		TraceIn("enumLiteralExp", 20);
		try { DebugEnterRule(GrammarFileName, "enumLiteralExp");
		DebugLocation(108, 1);
		try
		{
			// OCL.g3:109:2: ( pathName '::' SimpleName )
			DebugEnterAlt(1);
			// OCL.g3:109:3: pathName '::' SimpleName
			{
			DebugLocation(109, 3);
			PushFollow(Follow._pathName_in_enumLiteralExp547);
			pathName();
			PopFollow();

			DebugLocation(109, 11);
			Match(input,34,Follow._34_in_enumLiteralExp548); 
			DebugLocation(109, 16);
			Match(input,SimpleName,Follow._SimpleName_in_enumLiteralExp550); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumLiteralExp", 20);
			LeaveRule("enumLiteralExp", 20);
			LeaveRule_enumLiteralExp();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "enumLiteralExp"); }
		return;

	}
	// $ANTLR end "enumLiteralExp"


	partial void EnterRule_collectionLiteralExp();
	partial void LeaveRule_collectionLiteralExp();

	// $ANTLR start "collectionLiteralExp"
	// OCL.g3:112:1: collectionLiteralExp : ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' );
	[GrammarRule("collectionLiteralExp")]
	private void collectionLiteralExp()
	{
		EnterRule_collectionLiteralExp();
		EnterRule("collectionLiteralExp", 21);
		TraceIn("collectionLiteralExp", 21);
		try { DebugEnterRule(GrammarFileName, "collectionLiteralExp");
		DebugLocation(112, 1);
		try
		{
			// OCL.g3:113:2: ( collectionTypeIdentifier '{' ( collectionLiteralParts )? '}' | collectionType '{' ( collectionLiteralParts )? '}' )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==44||LA29_0==46||LA29_0==52||(LA29_0>=54 && LA29_0<=55)))
			{
				int LA29_1 = input.LA(2);

				if ((LA29_1==77))
				{
					alt29 = 1;
				}
				else if ((LA29_1==24))
				{
					alt29 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 29, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:113:3: collectionTypeIdentifier '{' ( collectionLiteralParts )? '}'
				{
				DebugLocation(113, 3);
				PushFollow(Follow._collectionTypeIdentifier_in_collectionLiteralExp562);
				collectionTypeIdentifier();
				PopFollow();

				DebugLocation(113, 29);
				Match(input,77,Follow._77_in_collectionLiteralExp565); 
				DebugLocation(113, 33);
				// OCL.g3:113:33: ( collectionLiteralParts )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==BooleanLiteralExp||(LA27_0>=IntegerLiteralExp && LA27_0<=InvalidLiteralExp)||LA27_0==NullLiteralExp||(LA27_0>=RealLiteralExp && LA27_0<=SimpleName)||(LA27_0>=StringLiteralExp && LA27_0<=UnlimitedNaturalLiteralExp)||LA27_0==24||LA27_0==28||(LA27_0>=44 && LA27_0<=58)||LA27_0==66||(LA27_0>=69 && LA27_0<=71)||LA27_0==74))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:113:33: collectionLiteralParts
					{
					DebugLocation(113, 33);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp567);
					collectionLiteralParts();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(113, 57);
				Match(input,79,Follow._79_in_collectionLiteralExp570); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:114:3: collectionType '{' ( collectionLiteralParts )? '}'
				{
				DebugLocation(114, 3);
				PushFollow(Follow._collectionType_in_collectionLiteralExp574);
				collectionType();
				PopFollow();

				DebugLocation(114, 18);
				Match(input,77,Follow._77_in_collectionLiteralExp576); 
				DebugLocation(114, 22);
				// OCL.g3:114:22: ( collectionLiteralParts )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==BooleanLiteralExp||(LA28_0>=IntegerLiteralExp && LA28_0<=InvalidLiteralExp)||LA28_0==NullLiteralExp||(LA28_0>=RealLiteralExp && LA28_0<=SimpleName)||(LA28_0>=StringLiteralExp && LA28_0<=UnlimitedNaturalLiteralExp)||LA28_0==24||LA28_0==28||(LA28_0>=44 && LA28_0<=58)||LA28_0==66||(LA28_0>=69 && LA28_0<=71)||LA28_0==74))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:114:22: collectionLiteralParts
					{
					DebugLocation(114, 22);
					PushFollow(Follow._collectionLiteralParts_in_collectionLiteralExp578);
					collectionLiteralParts();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(114, 46);
				Match(input,79,Follow._79_in_collectionLiteralExp581); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralExp", 21);
			LeaveRule("collectionLiteralExp", 21);
			LeaveRule_collectionLiteralExp();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralExp"); }
		return;

	}
	// $ANTLR end "collectionLiteralExp"


	partial void EnterRule_collectionTypeIdentifier();
	partial void LeaveRule_collectionTypeIdentifier();

	// $ANTLR start "collectionTypeIdentifier"
	// OCL.g3:122:1: collectionTypeIdentifier : ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' );
	[GrammarRule("collectionTypeIdentifier")]
	private void collectionTypeIdentifier()
	{
		EnterRule_collectionTypeIdentifier();
		EnterRule("collectionTypeIdentifier", 22);
		TraceIn("collectionTypeIdentifier", 22);
		try { DebugEnterRule(GrammarFileName, "collectionTypeIdentifier");
		DebugLocation(122, 1);
		try
		{
			// OCL.g3:123:2: ( 'Set' | 'Bag' | 'Sequence' | 'Collection' | 'OrderedSet' )
			DebugEnterAlt(1);
			// OCL.g3:
			{
			DebugLocation(123, 2);
			if (input.LA(1)==44||input.LA(1)==46||input.LA(1)==52||(input.LA(1)>=54 && input.LA(1)<=55))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionTypeIdentifier", 22);
			LeaveRule("collectionTypeIdentifier", 22);
			LeaveRule_collectionTypeIdentifier();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionTypeIdentifier"); }
		return;

	}
	// $ANTLR end "collectionTypeIdentifier"


	partial void EnterRule_collectionLiteralParts();
	partial void LeaveRule_collectionLiteralParts();

	// $ANTLR start "collectionLiteralParts"
	// OCL.g3:130:1: collectionLiteralParts : collectionLiteralPart ( ',' collectionLiteralParts )? ;
	[GrammarRule("collectionLiteralParts")]
	private void collectionLiteralParts()
	{
		EnterRule_collectionLiteralParts();
		EnterRule("collectionLiteralParts", 23);
		TraceIn("collectionLiteralParts", 23);
		try { DebugEnterRule(GrammarFileName, "collectionLiteralParts");
		DebugLocation(130, 1);
		try
		{
			// OCL.g3:131:2: ( collectionLiteralPart ( ',' collectionLiteralParts )? )
			DebugEnterAlt(1);
			// OCL.g3:131:4: collectionLiteralPart ( ',' collectionLiteralParts )?
			{
			DebugLocation(131, 4);
			PushFollow(Follow._collectionLiteralPart_in_collectionLiteralParts626);
			collectionLiteralPart();
			PopFollow();

			DebugLocation(131, 26);
			// OCL.g3:131:26: ( ',' collectionLiteralParts )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==27))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:131:28: ',' collectionLiteralParts
				{
				DebugLocation(131, 28);
				Match(input,27,Follow._27_in_collectionLiteralParts630); 
				DebugLocation(131, 32);
				PushFollow(Follow._collectionLiteralParts_in_collectionLiteralParts632);
				collectionLiteralParts();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralParts", 23);
			LeaveRule("collectionLiteralParts", 23);
			LeaveRule_collectionLiteralParts();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralParts"); }
		return;

	}
	// $ANTLR end "collectionLiteralParts"


	partial void EnterRule_collectionLiteralPart();
	partial void LeaveRule_collectionLiteralPart();

	// $ANTLR start "collectionLiteralPart"
	// OCL.g3:134:1: collectionLiteralPart : oclExpression ( '..' oclExpression )? ;
	[GrammarRule("collectionLiteralPart")]
	private void collectionLiteralPart()
	{
		EnterRule_collectionLiteralPart();
		EnterRule("collectionLiteralPart", 24);
		TraceIn("collectionLiteralPart", 24);
		try { DebugEnterRule(GrammarFileName, "collectionLiteralPart");
		DebugLocation(134, 1);
		try
		{
			// OCL.g3:135:2: ( oclExpression ( '..' oclExpression )? )
			DebugEnterAlt(1);
			// OCL.g3:135:4: oclExpression ( '..' oclExpression )?
			{
			DebugLocation(135, 4);
			PushFollow(Follow._oclExpression_in_collectionLiteralPart647);
			oclExpression();
			PopFollow();

			DebugLocation(135, 18);
			// OCL.g3:135:18: ( '..' oclExpression )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==31))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:135:19: '..' oclExpression
				{
				DebugLocation(135, 19);
				Match(input,31,Follow._31_in_collectionLiteralPart650); 
				DebugLocation(135, 24);
				PushFollow(Follow._oclExpression_in_collectionLiteralPart652);
				oclExpression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(31); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionLiteralPart", 24);
			LeaveRule("collectionLiteralPart", 24);
			LeaveRule_collectionLiteralPart();
		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionLiteralPart"); }
		return;

	}
	// $ANTLR end "collectionLiteralPart"


	partial void EnterRule_primitiveLiteralExp();
	partial void LeaveRule_primitiveLiteralExp();

	// $ANTLR start "primitiveLiteralExp"
	// OCL.g3:140:1: primitiveLiteralExp : ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | BooleanLiteralExp | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp );
	[GrammarRule("primitiveLiteralExp")]
	private void primitiveLiteralExp()
	{
		EnterRule_primitiveLiteralExp();
		EnterRule("primitiveLiteralExp", 25);
		TraceIn("primitiveLiteralExp", 25);
		try { DebugEnterRule(GrammarFileName, "primitiveLiteralExp");
		DebugLocation(140, 1);
		try
		{
			// OCL.g3:141:2: ( IntegerLiteralExp | RealLiteralExp | StringLiteralExp | BooleanLiteralExp | UnlimitedNaturalLiteralExp | NullLiteralExp | InvalidLiteralExp )
			DebugEnterAlt(1);
			// OCL.g3:
			{
			DebugLocation(141, 2);
			if (input.LA(1)==BooleanLiteralExp||(input.LA(1)>=IntegerLiteralExp && input.LA(1)<=InvalidLiteralExp)||input.LA(1)==NullLiteralExp||input.LA(1)==RealLiteralExp||(input.LA(1)>=StringLiteralExp && input.LA(1)<=UnlimitedNaturalLiteralExp))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveLiteralExp", 25);
			LeaveRule("primitiveLiteralExp", 25);
			LeaveRule_primitiveLiteralExp();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveLiteralExp"); }
		return;

	}
	// $ANTLR end "primitiveLiteralExp"


	partial void EnterRule_tupleLiteralExp();
	partial void LeaveRule_tupleLiteralExp();

	// $ANTLR start "tupleLiteralExp"
	// OCL.g3:149:1: tupleLiteralExp : 'Tuple' '{' variableDeclarationList '}' ;
	[GrammarRule("tupleLiteralExp")]
	private void tupleLiteralExp()
	{
		EnterRule_tupleLiteralExp();
		EnterRule("tupleLiteralExp", 26);
		TraceIn("tupleLiteralExp", 26);
		try { DebugEnterRule(GrammarFileName, "tupleLiteralExp");
		DebugLocation(149, 1);
		try
		{
			// OCL.g3:150:2: ( 'Tuple' '{' variableDeclarationList '}' )
			DebugEnterAlt(1);
			// OCL.g3:150:4: 'Tuple' '{' variableDeclarationList '}'
			{
			DebugLocation(150, 4);
			Match(input,57,Follow._57_in_tupleLiteralExp711); 
			DebugLocation(150, 12);
			Match(input,77,Follow._77_in_tupleLiteralExp713); 
			DebugLocation(150, 16);
			PushFollow(Follow._variableDeclarationList_in_tupleLiteralExp715);
			variableDeclarationList();
			PopFollow();

			DebugLocation(150, 40);
			Match(input,79,Follow._79_in_tupleLiteralExp717); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleLiteralExp", 26);
			LeaveRule("tupleLiteralExp", 26);
			LeaveRule_tupleLiteralExp();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleLiteralExp"); }
		return;

	}
	// $ANTLR end "tupleLiteralExp"


	partial void EnterRule_typeLiteralExp();
	partial void LeaveRule_typeLiteralExp();

	// $ANTLR start "typeLiteralExp"
	// OCL.g3:153:1: typeLiteralExp : type ;
	[GrammarRule("typeLiteralExp")]
	private void typeLiteralExp()
	{
		EnterRule_typeLiteralExp();
		EnterRule("typeLiteralExp", 27);
		TraceIn("typeLiteralExp", 27);
		try { DebugEnterRule(GrammarFileName, "typeLiteralExp");
		DebugLocation(153, 1);
		try
		{
			// OCL.g3:154:2: ( type )
			DebugEnterAlt(1);
			// OCL.g3:154:3: type
			{
			DebugLocation(154, 3);
			PushFollow(Follow._type_in_typeLiteralExp729);
			type();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeLiteralExp", 27);
			LeaveRule("typeLiteralExp", 27);
			LeaveRule_typeLiteralExp();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "typeLiteralExp"); }
		return;

	}
	// $ANTLR end "typeLiteralExp"


	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// OCL.g3:157:1: variableDeclaration : SimpleName ( ':' type )? ( '=' oclExpression )? ;
	[GrammarRule("variableDeclaration")]
	private void variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 28);
		TraceIn("variableDeclaration", 28);
		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(157, 1);
		try
		{
			// OCL.g3:158:2: ( SimpleName ( ':' type )? ( '=' oclExpression )? )
			DebugEnterAlt(1);
			// OCL.g3:158:3: SimpleName ( ':' type )? ( '=' oclExpression )?
			{
			DebugLocation(158, 3);
			Match(input,SimpleName,Follow._SimpleName_in_variableDeclaration740); 
			DebugLocation(158, 14);
			// OCL.g3:158:14: ( ':' type )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==33))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:158:15: ':' type
				{
				DebugLocation(158, 15);
				Match(input,33,Follow._33_in_variableDeclaration743); 
				DebugLocation(158, 19);
				PushFollow(Follow._type_in_variableDeclaration745);
				type();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(158, 26);
			// OCL.g3:158:26: ( '=' oclExpression )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==39))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:158:28: '=' oclExpression
				{
				DebugLocation(158, 28);
				Match(input,39,Follow._39_in_variableDeclaration751); 
				DebugLocation(158, 32);
				PushFollow(Follow._oclExpression_in_variableDeclaration753);
				oclExpression();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(33); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 28);
			LeaveRule("variableDeclaration", 28);
			LeaveRule_variableDeclaration();
		}
		DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return;

	}
	// $ANTLR end "variableDeclaration"


	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// OCL.g3:161:1: type : ( pathName | collectionType | tupleType | primitiveType | oclType );
	[GrammarRule("type")]
	private void type()
	{
		EnterRule_type();
		EnterRule("type", 29);
		TraceIn("type", 29);
		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(161, 1);
		try
		{
			// OCL.g3:162:2: ( pathName | collectionType | tupleType | primitiveType | oclType )
			int alt34=5;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case SimpleName:
				{
				alt34 = 1;
				}
				break;
			case 44:
			case 46:
			case 52:
			case 54:
			case 55:
				{
				alt34 = 2;
				}
				break;
			case 57:
				{
				alt34 = 3;
				}
				break;
			case 45:
			case 47:
			case 53:
			case 56:
			case 58:
				{
				alt34 = 4;
				}
				break;
			case 48:
			case 49:
			case 50:
			case 51:
				{
				alt34 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:162:4: pathName
				{
				DebugLocation(162, 4);
				PushFollow(Follow._pathName_in_type768);
				pathName();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:163:4: collectionType
				{
				DebugLocation(163, 4);
				PushFollow(Follow._collectionType_in_type773);
				collectionType();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// OCL.g3:164:4: tupleType
				{
				DebugLocation(164, 4);
				PushFollow(Follow._tupleType_in_type778);
				tupleType();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// OCL.g3:165:4: primitiveType
				{
				DebugLocation(165, 4);
				PushFollow(Follow._primitiveType_in_type783);
				primitiveType();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// OCL.g3:166:4: oclType
				{
				DebugLocation(166, 4);
				PushFollow(Follow._oclType_in_type788);
				oclType();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type", 29);
			LeaveRule("type", 29);
			LeaveRule_type();
		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return;

	}
	// $ANTLR end "type"


	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();

	// $ANTLR start "primitiveType"
	// OCL.g3:169:1: primitiveType : ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' );
	[GrammarRule("primitiveType")]
	private void primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 30);
		TraceIn("primitiveType", 30);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(169, 1);
		try
		{
			// OCL.g3:170:2: ( 'Boolean' | 'Integer' | 'Real' | 'String' | 'UnlimitedNatural' )
			DebugEnterAlt(1);
			// OCL.g3:
			{
			DebugLocation(170, 2);
			if (input.LA(1)==45||input.LA(1)==47||input.LA(1)==53||input.LA(1)==56||input.LA(1)==58)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primitiveType", 30);
			LeaveRule("primitiveType", 30);
			LeaveRule_primitiveType();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return;

	}
	// $ANTLR end "primitiveType"


	partial void EnterRule_oclType();
	partial void LeaveRule_oclType();

	// $ANTLR start "oclType"
	// OCL.g3:177:1: oclType : ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' );
	[GrammarRule("oclType")]
	private void oclType()
	{
		EnterRule_oclType();
		EnterRule("oclType", 31);
		TraceIn("oclType", 31);
		try { DebugEnterRule(GrammarFileName, "oclType");
		DebugLocation(177, 1);
		try
		{
			// OCL.g3:178:2: ( 'OclAny' | 'OclInvalid' | 'OclMessage' | 'OclVoid' )
			DebugEnterAlt(1);
			// OCL.g3:
			{
			DebugLocation(178, 2);
			if ((input.LA(1)>=48 && input.LA(1)<=51))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclType", 31);
			LeaveRule("oclType", 31);
			LeaveRule_oclType();
		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "oclType"); }
		return;

	}
	// $ANTLR end "oclType"


	partial void EnterRule_collectionType();
	partial void LeaveRule_collectionType();

	// $ANTLR start "collectionType"
	// OCL.g3:184:1: collectionType : collectionTypeIdentifier '(' type ')' ;
	[GrammarRule("collectionType")]
	private void collectionType()
	{
		EnterRule_collectionType();
		EnterRule("collectionType", 32);
		TraceIn("collectionType", 32);
		try { DebugEnterRule(GrammarFileName, "collectionType");
		DebugLocation(184, 1);
		try
		{
			// OCL.g3:185:2: ( collectionTypeIdentifier '(' type ')' )
			DebugEnterAlt(1);
			// OCL.g3:185:4: collectionTypeIdentifier '(' type ')'
			{
			DebugLocation(185, 4);
			PushFollow(Follow._collectionTypeIdentifier_in_collectionType862);
			collectionTypeIdentifier();
			PopFollow();

			DebugLocation(185, 29);
			Match(input,24,Follow._24_in_collectionType864); 
			DebugLocation(185, 33);
			PushFollow(Follow._type_in_collectionType866);
			type();
			PopFollow();

			DebugLocation(185, 39);
			Match(input,25,Follow._25_in_collectionType869); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionType", 32);
			LeaveRule("collectionType", 32);
			LeaveRule_collectionType();
		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionType"); }
		return;

	}
	// $ANTLR end "collectionType"


	partial void EnterRule_tupleType();
	partial void LeaveRule_tupleType();

	// $ANTLR start "tupleType"
	// OCL.g3:188:1: tupleType : 'Tuple' '(' ( variableDeclarationList )? ')' ;
	[GrammarRule("tupleType")]
	private void tupleType()
	{
		EnterRule_tupleType();
		EnterRule("tupleType", 33);
		TraceIn("tupleType", 33);
		try { DebugEnterRule(GrammarFileName, "tupleType");
		DebugLocation(188, 1);
		try
		{
			// OCL.g3:189:2: ( 'Tuple' '(' ( variableDeclarationList )? ')' )
			DebugEnterAlt(1);
			// OCL.g3:189:4: 'Tuple' '(' ( variableDeclarationList )? ')'
			{
			DebugLocation(189, 4);
			Match(input,57,Follow._57_in_tupleType882); 
			DebugLocation(189, 12);
			Match(input,24,Follow._24_in_tupleType884); 
			DebugLocation(189, 16);
			// OCL.g3:189:16: ( variableDeclarationList )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==SimpleName))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:189:16: variableDeclarationList
				{
				DebugLocation(189, 16);
				PushFollow(Follow._variableDeclarationList_in_tupleType886);
				variableDeclarationList();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(189, 41);
			Match(input,25,Follow._25_in_tupleType889); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tupleType", 33);
			LeaveRule("tupleType", 33);
			LeaveRule_tupleType();
		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "tupleType"); }
		return;

	}
	// $ANTLR end "tupleType"


	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// OCL.g3:193:1: variableDeclarationList : variableDeclaration ( ',' variableDeclarationList )? ;
	[GrammarRule("variableDeclarationList")]
	private void variableDeclarationList()
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 34);
		TraceIn("variableDeclarationList", 34);
		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(193, 1);
		try
		{
			// OCL.g3:194:2: ( variableDeclaration ( ',' variableDeclarationList )? )
			DebugEnterAlt(1);
			// OCL.g3:194:4: variableDeclaration ( ',' variableDeclarationList )?
			{
			DebugLocation(194, 4);
			PushFollow(Follow._variableDeclaration_in_variableDeclarationList902);
			variableDeclaration();
			PopFollow();

			DebugLocation(194, 24);
			// OCL.g3:194:24: ( ',' variableDeclarationList )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==27))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:194:25: ',' variableDeclarationList
				{
				DebugLocation(194, 25);
				Match(input,27,Follow._27_in_variableDeclarationList905); 
				DebugLocation(194, 28);
				PushFollow(Follow._variableDeclarationList_in_variableDeclarationList906);
				variableDeclarationList();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationList", 34);
			LeaveRule("variableDeclarationList", 34);
			LeaveRule_variableDeclarationList();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return;

	}
	// $ANTLR end "variableDeclarationList"


	partial void EnterRule_isMarkedPre();
	partial void LeaveRule_isMarkedPre();

	// $ANTLR start "isMarkedPre"
	// OCL.g3:196:1: isMarkedPre : '@' 'pre' ;
	[GrammarRule("isMarkedPre")]
	private void isMarkedPre()
	{
		EnterRule_isMarkedPre();
		EnterRule("isMarkedPre", 35);
		TraceIn("isMarkedPre", 35);
		try { DebugEnterRule(GrammarFileName, "isMarkedPre");
		DebugLocation(196, 1);
		try
		{
			// OCL.g3:197:2: ( '@' 'pre' )
			DebugEnterAlt(1);
			// OCL.g3:197:4: '@' 'pre'
			{
			DebugLocation(197, 4);
			Match(input,43,Follow._43_in_isMarkedPre920); 
			DebugLocation(197, 8);
			Match(input,73,Follow._73_in_isMarkedPre922); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("isMarkedPre", 35);
			LeaveRule("isMarkedPre", 35);
			LeaveRule_isMarkedPre();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "isMarkedPre"); }
		return;

	}
	// $ANTLR end "isMarkedPre"


	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// OCL.g3:200:1: arguments : oclExpression ( ',' arguments )? ;
	[GrammarRule("arguments")]
	private void arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 36);
		TraceIn("arguments", 36);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(200, 1);
		try
		{
			// OCL.g3:201:2: ( oclExpression ( ',' arguments )? )
			DebugEnterAlt(1);
			// OCL.g3:201:4: oclExpression ( ',' arguments )?
			{
			DebugLocation(201, 4);
			PushFollow(Follow._oclExpression_in_arguments934);
			oclExpression();
			PopFollow();

			DebugLocation(201, 18);
			// OCL.g3:201:18: ( ',' arguments )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==27))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:201:20: ',' arguments
				{
				DebugLocation(201, 20);
				Match(input,27,Follow._27_in_arguments938); 
				DebugLocation(201, 24);
				PushFollow(Follow._arguments_in_arguments940);
				arguments();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(37); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arguments", 36);
			LeaveRule("arguments", 36);
			LeaveRule_arguments();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return;

	}
	// $ANTLR end "arguments"


	partial void EnterRule_letExp();
	partial void LeaveRule_letExp();

	// $ANTLR start "letExp"
	// OCL.g3:205:1: letExp : 'let' variableDeclaration letExpSub ;
	[GrammarRule("letExp")]
	private void letExp()
	{
		EnterRule_letExp();
		EnterRule("letExp", 37);
		TraceIn("letExp", 37);
		try { DebugEnterRule(GrammarFileName, "letExp");
		DebugLocation(205, 1);
		try
		{
			// OCL.g3:206:2: ( 'let' variableDeclaration letExpSub )
			DebugEnterAlt(1);
			// OCL.g3:206:4: 'let' variableDeclaration letExpSub
			{
			DebugLocation(206, 4);
			Match(input,70,Follow._70_in_letExp956); 
			DebugLocation(206, 10);
			PushFollow(Follow._variableDeclaration_in_letExp958);
			variableDeclaration();
			PopFollow();

			DebugLocation(206, 30);
			PushFollow(Follow._letExpSub_in_letExp960);
			letExpSub();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("letExp", 37);
			LeaveRule("letExp", 37);
			LeaveRule_letExp();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "letExp"); }
		return;

	}
	// $ANTLR end "letExp"


	partial void EnterRule_letExpSub();
	partial void LeaveRule_letExpSub();

	// $ANTLR start "letExpSub"
	// OCL.g3:209:1: letExpSub : ( ',' variableDeclaration letExpSub | 'in' ( options {greedy=false; } : oclExpression ) );
	[GrammarRule("letExpSub")]
	private void letExpSub()
	{
		EnterRule_letExpSub();
		EnterRule("letExpSub", 38);
		TraceIn("letExpSub", 38);
		try { DebugEnterRule(GrammarFileName, "letExpSub");
		DebugLocation(209, 1);
		try
		{
			// OCL.g3:210:2: ( ',' variableDeclaration letExpSub | 'in' ( options {greedy=false; } : oclExpression ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==27))
			{
				alt38 = 1;
			}
			else if ((LA38_0==68))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:210:4: ',' variableDeclaration letExpSub
				{
				DebugLocation(210, 4);
				Match(input,27,Follow._27_in_letExpSub972); 
				DebugLocation(210, 8);
				PushFollow(Follow._variableDeclaration_in_letExpSub974);
				variableDeclaration();
				PopFollow();

				DebugLocation(210, 28);
				PushFollow(Follow._letExpSub_in_letExpSub976);
				letExpSub();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:211:4: 'in' ( options {greedy=false; } : oclExpression )
				{
				DebugLocation(211, 4);
				Match(input,68,Follow._68_in_letExpSub981); 
				DebugLocation(211, 9);
				// OCL.g3:211:9: ( options {greedy=false; } : oclExpression )
				DebugEnterAlt(1);
				// OCL.g3:211:35: oclExpression
				{
				DebugLocation(211, 35);
				PushFollow(Follow._oclExpression_in_letExpSub992);
				oclExpression();
				PopFollow();


				}


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("letExpSub", 38);
			LeaveRule("letExpSub", 38);
			LeaveRule_letExpSub();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "letExpSub"); }
		return;

	}
	// $ANTLR end "letExpSub"


	partial void EnterRule_oclMessageExp();
	partial void LeaveRule_oclMessageExp();

	// $ANTLR start "oclMessageExp"
	// OCL.g3:214:1: oclMessageExp : ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' );
	[GrammarRule("oclMessageExp")]
	private void oclMessageExp()
	{
		EnterRule_oclMessageExp();
		EnterRule("oclMessageExp", 39);
		TraceIn("oclMessageExp", 39);
		try { DebugEnterRule(GrammarFileName, "oclMessageExp");
		DebugLocation(214, 1);
		try
		{
			// OCL.g3:215:2: ( '^^' SimpleName '(' ( oclMessageArguments )? ')' | '^' SimpleName '(' ( oclMessageArguments )? ')' )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==62))
			{
				alt41 = 1;
			}
			else if ((LA41_0==61))
			{
				alt41 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:215:4: '^^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(215, 4);
				Match(input,62,Follow._62_in_oclMessageExp1004); 
				DebugLocation(215, 9);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1006); 
				DebugLocation(215, 20);
				Match(input,24,Follow._24_in_oclMessageExp1008); 
				DebugLocation(215, 24);
				// OCL.g3:215:24: ( oclMessageArguments )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==BooleanLiteralExp||(LA39_0>=IntegerLiteralExp && LA39_0<=InvalidLiteralExp)||LA39_0==NullLiteralExp||(LA39_0>=RealLiteralExp && LA39_0<=SimpleName)||(LA39_0>=StringLiteralExp && LA39_0<=UnlimitedNaturalLiteralExp)||LA39_0==24||LA39_0==28||LA39_0==42||(LA39_0>=44 && LA39_0<=58)||LA39_0==66||(LA39_0>=69 && LA39_0<=71)||LA39_0==74))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:215:24: oclMessageArguments
					{
					DebugLocation(215, 24);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1010);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(215, 45);
				Match(input,25,Follow._25_in_oclMessageExp1013); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:216:4: '^' SimpleName '(' ( oclMessageArguments )? ')'
				{
				DebugLocation(216, 4);
				Match(input,61,Follow._61_in_oclMessageExp1018); 
				DebugLocation(216, 8);
				Match(input,SimpleName,Follow._SimpleName_in_oclMessageExp1020); 
				DebugLocation(216, 19);
				Match(input,24,Follow._24_in_oclMessageExp1022); 
				DebugLocation(216, 23);
				// OCL.g3:216:23: ( oclMessageArguments )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==BooleanLiteralExp||(LA40_0>=IntegerLiteralExp && LA40_0<=InvalidLiteralExp)||LA40_0==NullLiteralExp||(LA40_0>=RealLiteralExp && LA40_0<=SimpleName)||(LA40_0>=StringLiteralExp && LA40_0<=UnlimitedNaturalLiteralExp)||LA40_0==24||LA40_0==28||LA40_0==42||(LA40_0>=44 && LA40_0<=58)||LA40_0==66||(LA40_0>=69 && LA40_0<=71)||LA40_0==74))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:216:23: oclMessageArguments
					{
					DebugLocation(216, 23);
					PushFollow(Follow._oclMessageArguments_in_oclMessageExp1024);
					oclMessageArguments();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(216, 44);
				Match(input,25,Follow._25_in_oclMessageExp1027); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageExp", 39);
			LeaveRule("oclMessageExp", 39);
			LeaveRule_oclMessageExp();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageExp"); }
		return;

	}
	// $ANTLR end "oclMessageExp"


	partial void EnterRule_oclMessageArguments();
	partial void LeaveRule_oclMessageArguments();

	// $ANTLR start "oclMessageArguments"
	// OCL.g3:218:1: oclMessageArguments : oclMessageArg ( ',' oclMessageArguments )? ;
	[GrammarRule("oclMessageArguments")]
	private void oclMessageArguments()
	{
		EnterRule_oclMessageArguments();
		EnterRule("oclMessageArguments", 40);
		TraceIn("oclMessageArguments", 40);
		try { DebugEnterRule(GrammarFileName, "oclMessageArguments");
		DebugLocation(218, 1);
		try
		{
			// OCL.g3:219:2: ( oclMessageArg ( ',' oclMessageArguments )? )
			DebugEnterAlt(1);
			// OCL.g3:219:4: oclMessageArg ( ',' oclMessageArguments )?
			{
			DebugLocation(219, 4);
			PushFollow(Follow._oclMessageArg_in_oclMessageArguments1037);
			oclMessageArg();
			PopFollow();

			DebugLocation(219, 18);
			// OCL.g3:219:18: ( ',' oclMessageArguments )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==27))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:219:20: ',' oclMessageArguments
				{
				DebugLocation(219, 20);
				Match(input,27,Follow._27_in_oclMessageArguments1041); 
				DebugLocation(219, 24);
				PushFollow(Follow._oclMessageArguments_in_oclMessageArguments1043);
				oclMessageArguments();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArguments", 40);
			LeaveRule("oclMessageArguments", 40);
			LeaveRule_oclMessageArguments();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArguments"); }
		return;

	}
	// $ANTLR end "oclMessageArguments"


	partial void EnterRule_oclMessageArg();
	partial void LeaveRule_oclMessageArg();

	// $ANTLR start "oclMessageArg"
	// OCL.g3:222:1: oclMessageArg : ( '?' ( ':' type )? | oclExpression );
	[GrammarRule("oclMessageArg")]
	private void oclMessageArg()
	{
		EnterRule_oclMessageArg();
		EnterRule("oclMessageArg", 41);
		TraceIn("oclMessageArg", 41);
		try { DebugEnterRule(GrammarFileName, "oclMessageArg");
		DebugLocation(222, 1);
		try
		{
			// OCL.g3:223:2: ( '?' ( ':' type )? | oclExpression )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==42))
			{
				alt44 = 1;
			}
			else if ((LA44_0==BooleanLiteralExp||(LA44_0>=IntegerLiteralExp && LA44_0<=InvalidLiteralExp)||LA44_0==NullLiteralExp||(LA44_0>=RealLiteralExp && LA44_0<=SimpleName)||(LA44_0>=StringLiteralExp && LA44_0<=UnlimitedNaturalLiteralExp)||LA44_0==24||LA44_0==28||(LA44_0>=44 && LA44_0<=58)||LA44_0==66||(LA44_0>=69 && LA44_0<=71)||LA44_0==74))
			{
				alt44 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// OCL.g3:223:4: '?' ( ':' type )?
				{
				DebugLocation(223, 4);
				Match(input,42,Follow._42_in_oclMessageArg1058); 
				DebugLocation(223, 8);
				// OCL.g3:223:8: ( ':' type )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==33))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// OCL.g3:223:9: ':' type
					{
					DebugLocation(223, 9);
					Match(input,33,Follow._33_in_oclMessageArg1061); 
					DebugLocation(223, 13);
					PushFollow(Follow._type_in_oclMessageArg1063);
					type();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(43); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// OCL.g3:224:4: oclExpression
				{
				DebugLocation(224, 4);
				PushFollow(Follow._oclExpression_in_oclMessageArg1070);
				oclExpression();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oclMessageArg", 41);
			LeaveRule("oclMessageArg", 41);
			LeaveRule_oclMessageArg();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "oclMessageArg"); }
		return;

	}
	// $ANTLR end "oclMessageArg"


	partial void EnterRule_ifExp();
	partial void LeaveRule_ifExp();

	// $ANTLR start "ifExp"
	// OCL.g3:227:1: ifExp : 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' ;
	[GrammarRule("ifExp")]
	private void ifExp()
	{
		EnterRule_ifExp();
		EnterRule("ifExp", 42);
		TraceIn("ifExp", 42);
		try { DebugEnterRule(GrammarFileName, "ifExp");
		DebugLocation(227, 1);
		try
		{
			// OCL.g3:228:2: ( 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif' )
			DebugEnterAlt(1);
			// OCL.g3:228:4: 'if' oclExpression 'then' oclExpression 'else' oclExpression 'endif'
			{
			DebugLocation(228, 4);
			Match(input,66,Follow._66_in_ifExp1082); 
			DebugLocation(228, 9);
			PushFollow(Follow._oclExpression_in_ifExp1084);
			oclExpression();
			PopFollow();

			DebugLocation(228, 23);
			Match(input,75,Follow._75_in_ifExp1086); 
			DebugLocation(228, 30);
			PushFollow(Follow._oclExpression_in_ifExp1088);
			oclExpression();
			PopFollow();

			DebugLocation(228, 44);
			Match(input,64,Follow._64_in_ifExp1090); 
			DebugLocation(228, 51);
			PushFollow(Follow._oclExpression_in_ifExp1092);
			oclExpression();
			PopFollow();

			DebugLocation(228, 65);
			Match(input,65,Follow._65_in_ifExp1094); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifExp", 42);
			LeaveRule("ifExp", 42);
			LeaveRule_ifExp();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "ifExp"); }
		return;

	}
	// $ANTLR end "ifExp"
	#endregion Rules


	#region DFA
	private DFA11 dfa11;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa11 = new DFA11( this );
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\xB\xFFFF";
		private const string DFA11_eofS =
			"\xB\xFFFF";
		private const string DFA11_minS =
			"\x1\x4\x2\xFFFF\x1\x18\x7\xFFFF";
		private const string DFA11_maxS =
			"\x1\x4A\x2\xFFFF\x1\x4D\x7\xFFFF";
		private const string DFA11_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1"+
			"\x3";
		private const string DFA11_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\x1\x4\x4\xFFFF\x2\x4\x4\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\x6\x1\xFFFF\x2"+
				"\x4\x2\xFFFF\x1\x7\x13\xFFFF\x1\x2\x1\x5\x1\x2\x5\x5\x1\x2\x1\x5\x2"+
				"\x2\x1\x5\x1\x3\x1\x5\x7\xFFFF\x1\x8\x2\xFFFF\x1\x6\x1\x9\x3\xFFFF\x1"+
				"\x1",
				"",
				"",
				"\x1\x5\x34\xFFFF\x1\xA",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "52:1: primaryExperession : ( 'self' | collectionLiteralExpAndType | tupleLiteralExp | primitiveLiteralExp | enumAndType | propertyCall | '(' oclExpression ')' | ifExp | letExp );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _logicalImpliesExpression_in_oclExpression26 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression40 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _67_in_logicalImpliesExpression43 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _logicalXorExpression_in_logicalImpliesExpression45 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression57 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _76_in_logicalXorExpression60 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _logicalOrExpression_in_logicalXorExpression62 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression74 = new BitSet(new ulong[]{0x2UL,0x100UL});
		public static readonly BitSet _72_in_logicalOrExpression77 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression79 = new BitSet(new ulong[]{0x2UL,0x100UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression91 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_logicalAndExpression94 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _relationalEqExpression_in_logicalAndExpression96 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression110 = new BitSet(new ulong[]{0xC000000002UL});
		public static readonly BitSet _set_in_relationalEqExpression113 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _relationalNotEqExprassion_in_relationalEqExpression119 = new BitSet(new ulong[]{0xC000000002UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion133 = new BitSet(new ulong[]{0x33000000002UL});
		public static readonly BitSet _set_in_relationalNotEqExprassion136 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _additiveExpression_in_relationalNotEqExprassion149 = new BitSet(new ulong[]{0x33000000002UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression166 = new BitSet(new ulong[]{0x14000002UL});
		public static readonly BitSet _set_in_additiveExpression169 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression176 = new BitSet(new ulong[]{0x14000002UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression192 = new BitSet(new ulong[]{0x100200002UL});
		public static readonly BitSet _set_in_multiplicativeExpression195 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression201 = new BitSet(new ulong[]{0x100200002UL});
		public static readonly BitSet _set_in_unaryExpression215 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _termExpression_in_unaryExpression221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _termExpression_in_unaryExpression226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExperession_in_termExpression238 = new BitSet(new ulong[]{0x6000000060000002UL});
		public static readonly BitSet _set_in_termExpression243 = new BitSet(new ulong[]{0x40000UL,0x20UL});
		public static readonly BitSet _propertyCall_in_termExpression248 = new BitSet(new ulong[]{0x6000000060000002UL});
		public static readonly BitSet _oclMessageExp_in_termExpression252 = new BitSet(new ulong[]{0x6000000060000002UL});
		public static readonly BitSet _74_in_primaryExperession276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralExpAndType_in_primaryExperession285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleLiteralExp_in_primaryExperession291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveLiteralExp_in_primaryExperession297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumAndType_in_primaryExperession305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyCall_in_primaryExperession311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _24_in_primaryExperession318 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_primaryExperession319 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_primaryExperession320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifExp_in_primaryExperession325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _letExp_in_primaryExperession330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_propertyCall340 = new BitSet(new ulong[]{0x800080001000002UL});
		public static readonly BitSet _59_in_propertyCall343 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _arguments_in_propertyCall344 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_propertyCall345 = new BitSet(new ulong[]{0x80001000002UL});
		public static readonly BitSet _isMarkedPre_in_propertyCall349 = new BitSet(new ulong[]{0x1000002UL});
		public static readonly BitSet _24_in_propertyCall353 = new BitSet(new ulong[]{0x7FFF00013368610UL,0x4E4UL});
		public static readonly BitSet _propertyCallParametrs_in_propertyCall354 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_propertyCall355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_propertyCall369 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_propertyCall371 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclaration_in_propertyCall373 = new BitSet(new ulong[]{0x800040000UL,0x4000UL});
		public static readonly BitSet _35_in_propertyCall375 = new BitSet(new ulong[]{0x40000UL,0x4000UL});
		public static readonly BitSet _78_in_propertyCall380 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_propertyCall382 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_propertyCall384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarePropertyCallParametrs_in_propertyCallParametrs406 = new BitSet(new ulong[]{0x7FFF00011368612UL,0x4E4UL});
		public static readonly BitSet _arguments_in_propertyCallParametrs409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs425 = new BitSet(new ulong[]{0x8000000UL,0x4000UL});
		public static readonly BitSet _27_in_declarePropertyCallParametrs428 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _typedef_in_declarePropertyCallParametrs430 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_declarePropertyCallParametrs434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_typedef445 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_typedef447 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_typedef448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_enumAndType471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_enumAndType476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_enumAndType481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_pathName495 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _34_in_pathName498 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_pathName500 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExpAndType515 = new BitSet(new ulong[]{0x1000002UL,0x2000UL});
		public static readonly BitSet _24_in_collectionLiteralExpAndType518 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_collectionLiteralExpAndType520 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_collectionLiteralExpAndType523 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_collectionLiteralExpAndType528 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x84E4UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExpAndType530 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_collectionLiteralExpAndType533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_enumLiteralExp547 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_enumLiteralExp548 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_enumLiteralExp550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionLiteralExp562 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_collectionLiteralExp565 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x84E4UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp567 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_collectionLiteralExp570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_collectionLiteralExp574 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_collectionLiteralExp576 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x84E4UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralExp578 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_collectionLiteralExp581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_collectionTypeIdentifier597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionLiteralPart_in_collectionLiteralParts626 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_collectionLiteralParts630 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _collectionLiteralParts_in_collectionLiteralParts632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart647 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _31_in_collectionLiteralPart650 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_collectionLiteralPart652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveLiteralExp668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_tupleLiteralExp711 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_tupleLiteralExp713 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleLiteralExp715 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_tupleLiteralExp717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeLiteralExp729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SimpleName_in_variableDeclaration740 = new BitSet(new ulong[]{0x8200000002UL});
		public static readonly BitSet _33_in_variableDeclaration743 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_variableDeclaration745 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_variableDeclaration751 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_variableDeclaration753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pathName_in_type768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionType_in_type773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tupleType_in_type778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_type783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclType_in_type788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_primitiveType800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_oclType833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionTypeIdentifier_in_collectionType862 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_collectionType864 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_collectionType866 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_collectionType869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_tupleType882 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_tupleType884 = new BitSet(new ulong[]{0x2040000UL});
		public static readonly BitSet _variableDeclarationList_in_tupleType886 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_tupleType889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList902 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_variableDeclarationList905 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclarationList_in_variableDeclarationList906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_isMarkedPre920 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_isMarkedPre922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_arguments934 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_arguments938 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _arguments_in_arguments940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_letExp956 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclaration_in_letExp958 = new BitSet(new ulong[]{0x8000000UL,0x10UL});
		public static readonly BitSet _letExpSub_in_letExp960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_letExpSub972 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _variableDeclaration_in_letExpSub974 = new BitSet(new ulong[]{0x8000000UL,0x10UL});
		public static readonly BitSet _letExpSub_in_letExpSub976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_letExpSub981 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_letExpSub992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_oclMessageExp1004 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1006 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_oclMessageExp1008 = new BitSet(new ulong[]{0x7FFF40013368610UL,0x4E4UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1010 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_oclMessageExp1013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_oclMessageExp1018 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _SimpleName_in_oclMessageExp1020 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _24_in_oclMessageExp1022 = new BitSet(new ulong[]{0x7FFF40013368610UL,0x4E4UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageExp1024 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _25_in_oclMessageExp1027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclMessageArg_in_oclMessageArguments1037 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_oclMessageArguments1041 = new BitSet(new ulong[]{0x7FFF40011368610UL,0x4E4UL});
		public static readonly BitSet _oclMessageArguments_in_oclMessageArguments1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_oclMessageArg1058 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_oclMessageArg1061 = new BitSet(new ulong[]{0x7FFF00000040000UL});
		public static readonly BitSet _type_in_oclMessageArg1063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _oclExpression_in_oclMessageArg1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_ifExp1082 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_ifExp1084 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_ifExp1086 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_ifExp1088 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_ifExp1090 = new BitSet(new ulong[]{0x7FFF00011368610UL,0x4E4UL});
		public static readonly BitSet _oclExpression_in_ifExp1092 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_ifExp1094 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace eXolutio.Model.OCL.Compiler
