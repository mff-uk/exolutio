using System;
using System.IO;
using System.Text;
using System.Xml.Linq;
using Exolutio.Model.PSM;
using Exolutio.Model.PSM.Grammar;
using Exolutio.Model.PSM.Grammar.RNGTranslation;
using Exolutio.ResourceLibrary;
using Exolutio.SupportingClasses;

namespace Exolutio.View.Commands.Grammar
{
    public class guiGenerateRngCommand : guiActiveDiagramCommand
    {   
        public override void Execute(object parameter = null)
        {
            if (Current.ActiveDiagram != null && Current.ActiveDiagram is PSMDiagram)
            {
                
                FilePresenterButtonInfo[] additionalButtonsInfo = new[] {
                    new FilePresenterButtonInfo() { ButtonName = "bXML", Text = "XML Syntax", Icon = ExolutioResourceNames.GetResourceImageSource(ExolutioResourceNames.relaxNG), UpdateFileContentAction = RegenerateSchema, RadioToggleButton = true, IsToggled = true },
                    new FilePresenterButtonInfo() { ButtonName = "bCompact", Text = "Compact Syntax", Icon = ExolutioResourceNames.GetResourceImageSource(ExolutioResourceNames.relaxNG_compact), UpdateFileContentAction = RegenerateSchema, RadioToggleButton = true, IsToggled = false },
                    };

                XDocument xmlSchemaDocument;
                var schemaGenerator = GenerateXmlSyntax(out xmlSchemaDocument, (PSMSchema)Current.ActiveDiagram.Schema);

                IFilePresenterTab filePresenterTab = Current.MainWindow.FilePresenter.DisplayFile(xmlSchemaDocument, EDisplayedFileType.RNG, Current.ActiveDiagram.Caption + ".rng", schemaGenerator.Log, sourcePSMSchema: schemaGenerator.PSMSchema,
                    additionalActions: additionalButtonsInfo);
                filePresenterTab.RefreshCallback += RegenerateSchema;
            }
        }

        private static RngSchemaGenerator 
            GenerateXmlSyntax(out XDocument xmlSchemaDocument, PSMSchema psmSchema)
        {
            RngSchemaGenerator schemaGenerator = new RngSchemaGenerator();
            schemaGenerator.Initialize(psmSchema);
            schemaGenerator.GenerateSchemaStructure();
            xmlSchemaDocument = schemaGenerator.GetRelaxNgSchema();

            if (Environment.MachineName.Contains("TRUPIK"))
            {
				xmlSchemaDocument.Save(@"d:\Development\Exolutio\XSLTTest\LastSchema.rng");
            }
            return schemaGenerator;
        }

        private void RegenerateSchema(IFilePresenterTab filePresenterTab)
        {
            bool xml = true;
            foreach (FilePresenterButtonInfo buttonInfo in filePresenterTab.FilePresenterButtons)
            {
                if (buttonInfo.ButtonName == "bXML")
                {
                    xml = buttonInfo.IsToggled;
                }
                if (buttonInfo.ButtonName == "bCompact")
                {
                    xml = !buttonInfo.IsToggled;
                }
            }

            if (xml)
            {
                XDocument xmlSchemaDocument;
                var schemaGenerator = GenerateXmlSyntax(out xmlSchemaDocument, filePresenterTab.SourcePSMSchema);
                filePresenterTab.ReDisplayFile(xmlSchemaDocument, EDisplayedFileType.RNG, schemaGenerator.PSMSchema.Caption + ".rng", schemaGenerator.Log, sourcePSMSchema: schemaGenerator.PSMSchema);    
            }
            else
            {
                XDocument xmlSchemaDocument;
                var schemaGenerator = GenerateXmlSyntax(out xmlSchemaDocument, filePresenterTab.SourcePSMSchema);
                StringBuilder sb = new StringBuilder();
                TextWriter tw = new StringWriter(sb);
                schemaGenerator.WriteInCompactSyntax(xmlSchemaDocument, tw);
                sb.Insert(0, string.Format("# translated to compact syntax using Pantor Engineering AB's RngToRncClassic.xsl" + Environment.NewLine + Environment.NewLine));
                sb.Insert(0, string.Format("# generated by eXolutio on {0} {1} from {2}/{3}. " + Environment.NewLine, 
                    DateTime.Now.ToShortDateString(), DateTime.Now.ToShortTimeString(), filePresenterTab.SourcePSMSchema.Project.Name, filePresenterTab.SourcePSMSchema.Caption));
                filePresenterTab.ReDisplayFile(sb.ToString(), EDisplayedFileType.RNC, schemaGenerator.PSMSchema.Caption + ".rnc", schemaGenerator.Log, sourcePSMSchema: schemaGenerator.PSMSchema);    
            }
        }

        public override string Text
        {
            get { return "Generate Relax NG"; }
        }

        public override string ScreenTipText
        {
            get { return "Generate Relax NG Schema from the PSM schema"; }
        }

        public override bool CanExecute(object parameter = null)
        {
            return Current.ActiveDiagram != null && Current.ActiveDiagram is PSMDiagram;
        }

        public override System.Windows.Media.ImageSource Icon
        {
            get { return ExolutioResourceNames.GetResourceImageSource(ExolutioResourceNames.relaxNG); }
        }
    }
}