<?xml version="1.0" encoding="utf-8" ?>
<Revalidation>
  <XSLT>
    <GeneralPrinciples>
      <TopLevelTemplates>
        Each red node => top level template.
        Existing node => matching template
        Added node => named tamplate

        Exceptions: 
        <obsolete>group nodes always have named template, even when they are existing nodes.</obsolete>
        <update>group nodes do not have this kind of 'top level' template</update>

        Each top level template (called node wrapping template) calls its attribute template and
        elements template (these have ATT and ELM postfixes in their names). We have these separately,
        so that they can be called from structural representatives.

        Each ATT/ELM template have parameter 'ci' (short for current instance) filled by the calling template to contain
        the corresponding XML fragment. When ATT/ELM template is called from the wrapping template,
        simple expression "./(* | @*)" is used to supply the value for 'ci' attribute.
      
        Additionally: group nodes do not have wrapping template, but they have ATT and ELM templates, which are called 
        from their parent node's template (which is always a red node, see <a href="#mark-group-parents-red" />).
      </TopLevelTemplates>
      <TemplateReferences>
        This section describes how templates call each other. 
        
        Exception: group nodes. Group nodes do not have wrapping templates. Since group can define both attributes
        and elements and both propagate upwards, the attribute template and elemente template must be called separately
        from the parent node's template (and possibly other templates may be called between them). 
        
        When a node C has two groups in its content G1 and G2, the order of calls from C will be
        G1-ATT, G2-Att, G1-ELM, G2-ELM.   
      </TemplateReferences>
    </GeneralPrinciples>
    <Groups>
      <remarks>
        Associations without names cause problems when implementing revalidation via XSLT.

        We want to follow the basic pattern one template = one red node. Each red node with parent association without name will
        is a group node.

        Group nodes do not have one wrapping elements, that is why the template can not be matching templates, but have to be named
        templates. Group template have one variable containing the instance of the group (it will be a sequence of attribute and
        element nodes).

        Group template must be called explicitly (it is a named template). This complicates the basic approach: when there is a green
        node having a red group node in its content, using 'apply-templates' will not work, because apply-templates never calls
        named template (and group template is a named template).

        rule to solve this: <a id="mark-group-parents-red">mark every parent node of a red group node red as well. </a>
      </remarks>      
    </Groups>
    <Attribute>
      <AttributeXFormChanged>
        <remarks>
          <p>
            There are two possible changes: e => a and a => e
          </p>
          <p>
            Parent node must be invalidated (new element is added for a => e, element is removed for e => a)
          </p>
          <p>
            All the changes from e => a, where the changed attribute is a green node (remember, AttributeXFormChanged only
            invalidates the parent node) are processed in one template called "Element to attribute conversion template",
            which looks like this:

            <code lang="xml" title="Element to attribute conversion template">
            <![CDATA[
              <xsl:template match="amount" priority="0">
                <xsl:attribute name="{name()}">
                  <xsl:value-of select="." />
                </xsl:attribute>
              </xsl:template>
            ]]>
            </code>
          </p>
          <p>
            Changes from a => e are treated simlarly by another template
            <code lang="xml" title="Element to attribute conversion template">
            <![CDATA[
              <!--Attribute to element conversion template-->
              <xsl:template match="@id" priority="0">
                <xsl:element name="{name()}">
                  <xsl:value-of select="." />
                </xsl:element>
              </xsl:template>
            ]]>
            </code>
          </p>       
        
          TODO: are there situations, where xsl:attribute must be used inside generating single reference? 
        
        
        </remarks>
      </AttributeXFormChanged>

      <AttributeRenamed>
        <p>!!!TODO!!!, zjistit, jak se to chova, prozkouset vsechny dalsi zmeny atributu</p>
        <p>The general rule for rename is: mark node red, which results in generating a 
        match template T for the attribute node. This will be called from the parent node 
        (which will be blue, unless marked red due to other detected changes) and 
        the template T will create the node with the appropriate name. </p>
      </AttributeRenamed>
    </Attribute>
  </XSLT>
</Revalidation>