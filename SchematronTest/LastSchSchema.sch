<?xml version="1.0" encoding="utf-8"?>
<sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <!-- Generated by eXolutio on 3.7.2012 9:58 from Hierarchy2/CompanyHierarchy. -->
  <!--Below follow constraints from OCL script 'defaultname'. -->
  <sch:pattern id="Company">
    <sch:rule context="/company">
      <sch:let name="self" value="." />
      <!--self.departments.department->closure(c : Department | c.subdepartments.department)->forAll(d : Department | d.subdepartments.department->size() < 5)-->
      <sch:assert test="oclX:forAll(oclX:closure(departments/department, function($c) { $c/subdepartments/department }), function($d) { count($d/subdepartments/department) lt 5 })" />
      <!--self.departments.department->closure(c : Department | c.subdepartments.department)->size() < 30-->
      <sch:assert test="count(oclX:closure(departments/department, function($c) { $c/subdepartments/department })) lt 30" />
    </sch:rule>
  </sch:pattern>
  <sch:pattern id="Department">
    <sch:rule context="company/departments/descendant::department">
      <sch:let name="d" value="." />
      <!--let count : integer = d.oclAsSet()->closure(sd : Department | sd.subdepartments.department)->collect(d : Department | d.employees)->collect(e : Employees | e.employee)->size() in d.interns.intern->size() > 0 implies count >= 3-->
      <sch:assert test="let $count := count(oclX:collect(oclX:collect(oclX:closure(., function($sd) { $sd/subdepartments/department }), function($d) { $d/employees }), function($e) { $e/employee })) return if (count(interns/intern) gt 0) then $count ge 3 else true()">Only departments with at least 3 employees can accept interns, department <sch:value-of select="$d/name" /> has only  employee(s)</sch:assert>
    </sch:rule>
  </sch:pattern>
  <sch:pattern id="Employee" abstract="true">
    <sch:rule context="$e">
      <!--e.allInstances().oclAsSet()->isUnique(emp : Employee | emp.id)-->
      <sch:assert test="oclX:isUnique((//manager | //employee | //intern), function($emp) { data($emp/id) })" />
    </sch:rule>
  </sch:pattern>
  <sch:pattern id="Manager">
    <sch:rule context="//manager">
      <sch:let name="m" value="." />
      <!--m.Department.employees.employee->includes(m)-->
      <sch:assert test="oclX:includes(../employees/employee, .)" />
    </sch:rule>
  </sch:pattern>
  <sch:pattern id="Employee2" abstract="true">
    <sch:rule context="$e">
      <!--e.Interns.Department <> null implies e.Interns.Department <> e.Employees.Department-->
      <sch:assert test="if (exists(parent::interns/..)) then not(parent::interns/.. is parent::employees/..) else true()">Internship in home department is forbidden</sch:assert>
    </sch:rule>
  </sch:pattern>
  <!--instance pattern for PSMClass: "Manager"'s ancestor Employee-->
  <sch:pattern id="Manager-as-Employee" is-a="Employee">
    <sch:param name="e" value="//manager" />
  </sch:pattern>
  <!--instance pattern for PSMClass: "Manager"'s ancestor Employee-->
  <sch:pattern id="Manager-as-Employee2" is-a="Employee2">
    <sch:param name="e" value="//manager" />
  </sch:pattern>
  <!--instance pattern for PSMClass: "Employee"-->
  <sch:pattern id="Employee-as-Employee" is-a="Employee">
    <sch:param name="e" value="(//employee | //intern)" />
  </sch:pattern>
  <!--instance pattern for PSMClass: "Employee"-->
  <sch:pattern id="Employee-as-Employee2" is-a="Employee2">
    <sch:param name="e" value="(//employee | //intern)" />
  </sch:pattern>
</sch:schema>